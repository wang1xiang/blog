import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"跟着卡哥学算法Day 48：单调栈概念 & part1","frontmatter":{"date":"2025-03-31","title":"跟着卡哥学算法Day 48：单调栈概念 & part1","tags":["leetcode"],"describe":"单调栈概念 & part1"},"headers":[{"level":2,"title":"单调栈","slug":"单调栈"},{"level":3,"title":"单调栈原理","slug":"单调栈原理"},{"level":2,"title":"739. 每日温度 🌟🌟","slug":"_739-每日温度-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"496.下一个更大元素 I 🌟🌟","slug":"_496-下一个更大元素-i-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"代码","slug":"代码-2"},{"level":2,"title":"503.下一个更大元素 II 🌟🌟","slug":"_503-下一个更大元素-ii-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":3,"title":"代码","slug":"代码-3"}],"relativePath":"docs/leetcode/monotone-stack.md","lastUpdated":1743653323555.1055}';var p={};const e=[a('<h2 id="单调栈"><a class="header-anchor" href="#单调栈" aria-hidden="true">#</a> 单调栈</h2><p>单调栈是一种特殊的栈结构，常用于解决<strong>下一/前一个更大（小）元素</strong>相关的问题，能在 O(n)时间复杂度内完成处理，适用于区间性质的计算，如柱状图最大矩形面积、每日温度、接雨水等问题。</p><h3 id="单调栈原理"><a class="header-anchor" href="#单调栈原理" aria-hidden="true">#</a> 单调栈原理</h3><p><strong>本质：空间换时间</strong></p><p>单调栈的原理是通过维护一个单调递增或递减的栈（记录已经遍历过的元素），来快速找到当前元素的前一个或下一个更大（小）元素</p><ul><li>单调递增栈：栈内元素<strong>从栈顶到栈底递增</strong>（用于求 下一/前一个更大元素）</li><li>单调递减栈：栈内元素<strong>从栈顶到栈底递减</strong>（用于求 下一/前一个更小元素）</li></ul><p>当新元素入栈时，会不断弹出不符合单调性的元素，从而保持栈的单调性</p><h2 id="_739-每日温度-🌟🌟"><a class="header-anchor" href="#_739-每日温度-🌟🌟" aria-hidden="true">#</a> 739. 每日温度 🌟🌟</h2><p><a href="https://leetcode.cn/problems/daily-temperatures/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p><p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>对于每天的温度 t[i]，找出未来温度比当前温度更高的最短天数</p><ul><li>维护一个单调递增栈，存储温度索引，用于记录尚未找到更高温度的天数，默认添加第一个元素</li><li>维护结果数组 result，初始值全为 0，表示默认未来没有更高温度</li></ul><p>主要有三个判断条件：</p><ol><li>当前元素 t[i]大于栈顶元素 stack.pop()，弹出栈顶元素 i 再入栈，表示找到了一个更大的元素</li><li>当前元素等于栈顶元素，i 入栈</li><li>当前元素 t[i]小于栈顶元素 stack.pop()，i 入栈</li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">dailyTemperatures</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">temperatures</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>\n      stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>\n      temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      result<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> top\n    <span class="token punctuation">}</span>\n\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_496-下一个更大元素-i-🌟🌟"><a class="header-anchor" href="#_496-下一个更大元素-i-🌟🌟" aria-hidden="true">#</a> 496.下一个更大元素 I 🌟🌟</h2><p><a href="https://leetcode.cn/problems/next-greater-element-i/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给你两个 没有重复元素 的数组  nums1 和  nums2 ，其中 nums1  是  nums2  的子集。</p><p>请你找出 nums1  中每个元素在  nums2  中的下一个比其大的值。</p><p>nums1  中数字  x  的下一个更大元素是指  x  在  nums2  中对应位置的右边的第一个比  x  大的元素。如果不存在，对应位置输出 -1 。</p><p>示例 1:</p><p>输入: nums1 = [4,1,2], nums2 = [1,3,4,2].<br> 输出: [-1,3,-1]<br> 解释:<br> 对于 num1 中的数字 4 ，你无法在第二个数组中找到下一个更大的数字，因此输出 -1 。<br> 对于 num1 中的数字 1 ，第二个数组中数字 1 右边的下一个较大数字是 3 。<br> 对于 num1 中的数字 2 ，第二个数组中没有下一个更大的数字，因此输出 -1 。</p><p>示例 2:<br> 输入: nums1 = [2,4], nums2 = [1,2,3,4].<br> 输出: [3,-1]<br> 解释:<br> 对于 num1 中的数字 2 ，第二个数组中的下一个较大数字是 3 。<br> 对于 num1 中的数字 4 ，第二个数组中没有下一个更大的数字，因此输出-1 。</p><p>提示：</p><ul><li>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</li><li>0 &lt;= nums1[i], nums2[i] &lt;= 10^4</li><li>nums1 和 nums2 中所有整数 互不相同</li><li>nums1 中的所有整数同样出现在 nums2 中</li></ul><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p>找到 nums1 中每个元素在 nums2 中的下一个更大元素，使用<strong>单调递增栈</strong>来解决</p><ol><li>单调栈处理 nums2：遍历 nums2，记录每个元素右侧第一个更大的元素</li><li>哈希表记录结果：在处理 nums2 的过程中，使用哈希表记录每个元素的下一个更大元素 map(index -&gt; value)</li><li>查询结果：遍历 nums1，根据哈希表生成结果列表</li></ol><h3 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">nextGreaterElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> m <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length\n\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums2<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">1</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_503-下一个更大元素-ii-🌟🌟"><a class="header-anchor" href="#_503-下一个更大元素-ii-🌟🌟" aria-hidden="true">#</a> 503.下一个更大元素 II 🌟🌟</h2><p><a href="https://leetcode.cn/problems/next-greater-element-ii/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p><p>示例 1:</p><ul><li>输入: [1,2,1]</li><li>输出: [2,-1,2]</li><li>解释: 第一个 1 的下一个更大的数是 2；数字 2 找不到下一个更大的数；第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</li></ul><p>提示:</p><ul><li>1 &lt;= nums.length &lt;= 10^4</li><li>-10^9 &lt;= nums[i] &lt;= 10^9</li></ul><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><p>类似<a href="#739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6-">739.每日温度</a>，因为是循环数组，所以需要遍历两次（<code>n * 2</code>），使用单调栈来维护下一个更大元素</p><p>此时循环中的 i 需要取模，<strong>i % n，表示当前元素在 nums 中的位置</strong></p><h3 id="代码-3"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">nextGreaterElements</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">%</span> n<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i <span class="token operator">%</span> n<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div>',49)];p.render=function(a,t,p,o,c,l){return n(),s("div",null,e)};export{t as __pageData,p as default};
