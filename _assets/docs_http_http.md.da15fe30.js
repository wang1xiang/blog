import{f as l,g as e,J as t}from"./common-03e46d7f.js";const i='{"title":"Http学习简单记录","frontmatter":{"date":"2020-08-15","title":"Http学习简单记录","tags":["http"],"describe":null},"headers":[{"level":2,"title":"http(Hyper Text Transfer Protocol 超文本链接协议)","slug":"http-hyper-text-transfer-protocol-超文本链接协议"},{"level":3,"title":"特点","slug":"特点"},{"level":3,"title":"URL(Uniform Resource Locator 统一资源定位符)","slug":"url-uniform-resource-locator-统一资源定位符"},{"level":3,"title":"HTTP 之状态码","slug":"http-之状态码"},{"level":3,"title":"HTTP 工作原理","slug":"http-工作原理"},{"level":3,"title":"浏览器地址栏键入 URL，按下回车经历","slug":"浏览器地址栏键入-url，按下回车经历"}],"relativePath":"docs/http/http.md","lastUpdated":1742176930023.5972}';var r={};const a=[t('<h2 id="http-hyper-text-transfer-protocol-超文本链接协议"><a class="header-anchor" href="#http-hyper-text-transfer-protocol-超文本链接协议" aria-hidden="true">#</a> http(Hyper Text Transfer Protocol 超文本链接协议)</h2><p>基于 tcp/ip 协议</p><h3 id="特点"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><ul><li>简单快速</li><li>灵活(任意类型由 Content-Type 标记)</li><li>无连接(请求完成断开连接)</li><li>无状态</li><li>支持 B/S 及 C/S</li></ul><h3 id="url-uniform-resource-locator-统一资源定位符"><a class="header-anchor" href="#url-uniform-resource-locator-统一资源定位符" aria-hidden="true">#</a> URL(Uniform Resource Locator 统一资源定位符)</h3><p>http 使用统一资源标识符(URI Uniform Resource Identifiers)来传输数据和建立连接，URL 是特殊的 URI</p><ul><li>URL 构成(<a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noopener noreferrer">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a>) 包括： <ol><li>协议部分 http 或 ftp 等</li><li>域名部分：<a href="http://www.aspxfans.com" target="_blank" rel="noopener noreferrer">www.aspxfans.com</a></li><li>端口部分：端口不是必须，如果省略将采用默认端口</li><li>虚拟目录部分：第一个/到最后一个/是虚拟目录部分，/news/</li><li>文件名部分：从域名后的最后一个&#39;/&#39;开始到&#39;?&#39;为止，index.asp</li><li>锚部分：从&#39;#&#39;开始到最后，都是锚部分，name</li><li>参数部分：从&#39;?&#39;开始到&#39;#&#39;之间都是参数</li></ol></li><li>URL 和 URI 关系 URI 是 Uniform Resource Identifier，统一资源标识符，用来唯一的表示一个资源(web 上可用的资源：图片、文档、视频、程序)都是 URI 来定位的 URI 由三部分组成：访问资源的命名机制、存放资源的主机名、资源自身的名称 URL 由三部分组成：协议、存有该资源的主机 IP 地址、主机资源的具体地址</li><li>HTTP 协议之请求消息 Request</li><li>HTTP 协议之请求消息 Response</li></ul><h3 id="http-之状态码"><a class="header-anchor" href="#http-之状态码" aria-hidden="true">#</a> HTTP 之状态码</h3><ul><li>1xx 正在请求状态中</li><li>2xx 请求成功</li><li>3xx 需要重定向</li><li>4xx 资源找不到，客户端问题</li><li>5xx 服务器错误 常见状态码：</li><li>200 OK/客户端请求成功</li><li>400Bad Request/客户端请求有语法错误，不能被服务器所理解</li><li>401 Unauthorized /请求未经授权</li><li>403Forbidden / 服务器收到请求，但是拒绝提供服务</li><li>404Not found / 请求资源找不到</li><li>500 Internal Serve Error / 服务器不可预期的错误</li><li>503 Server Unavailable / 服务器不可用</li></ul><h3 id="http-工作原理"><a class="header-anchor" href="#http-工作原理" aria-hidden="true">#</a> HTTP 工作原理</h3><p>Http 协议采用请求/响应模型，客户端发送请求报文(请求的方法、URL、协议版本、请求头部和请求数据)，服务器返回状态行作为响应(协议的版本、成功或错误代码、服务器信息、响应头部和响应数据) HTTP 请求/响应步骤：</p><ol><li>客户端连接到 web 服务器，一个 Http 客户端，通常是浏览器，与 web 服务器的 http 端口建立一个 tcp 套接字连接</li><li>发送 http 请求，通过 TCP 套接字，客户端向 web 服务器发送一个文本的请求报文，由请求行、请求头部、空行和请求数据组成</li><li>服务器接受请求并返回 HTTP 响应，web 服务器解析请求，定位请求资源，服务器将资源副本写到 tcp 套接字，有客户端读取，由状态行、响应头部、空行和响应数据</li><li>放连接 tcp 连接，若 connection 模式为 close，则服务器主动关闭 TCP 连接，客户端被动关闭，释放 tcp 连接；若 connection 模式为 keepalive，则该连接会继续接受请求</li><li>客户端浏览器解析 HTML 内容，客户端浏览器首先解析状态行，查明表明请求是否成功的状态码。然后解析每一个响应头，响应头告知以下为若干字节的 HTML 文档和文档的字符集，客户端浏览器读取响应数据 HTML，根据 HTML 的语法对其进行格式化，并在浏览器窗口展示</li></ol><h3 id="浏览器地址栏键入-url，按下回车经历"><a class="header-anchor" href="#浏览器地址栏键入-url，按下回车经历" aria-hidden="true">#</a> 浏览器地址栏键入 URL，按下回车经历</h3><ol><li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP</li><li>解析出 IP 地址后，根据该 IP 地址和端口，和服务器建立 TCP 连接</li><li>浏览器发出读取文件(URL 中域名后面部分对应的文件)的 HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器</li><li>服务器对浏览器请求做出响应，并把 对应的 html 文本发送给浏览器</li><li>释放 tcp 连接</li><li>浏览器将该 html 文本显示内容</li></ol>',14)];r.render=function(t,i,r,o,n,p){return l(),e("div",null,a)};export{i as __pageData,r as default};
