import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"富文本编辑器Tiptap系列教程——Tiptap模块&概念详解","frontmatter":{"date":"2023-06-10","title":"富文本编辑器Tiptap系列教程——Tiptap模块&概念详解","tags":["tiptap"],"describe":"搭建基于Tiptap的富文本编辑器很简单，但仅仅会使用是不够的，我们还需要掌握它的相关概念，这样才能更好的掌握"},"headers":[{"level":2,"title":"Tiptap 模块","slug":"tiptap-模块"},{"level":2,"title":"Tiptap 初始化配置","slug":"tiptap-初始化配置"},{"level":3,"title":"element","slug":"element"},{"level":3,"title":"extensions","slug":"extensions"},{"level":3,"title":"content","slug":"content"},{"level":3,"title":"editable","slug":"editable"},{"level":3,"title":"autofocus","slug":"autofocus"},{"level":3,"title":"enableInputRules","slug":"enableinputrules"},{"level":3,"title":"enablePasteRules","slug":"enablepasterules"},{"level":3,"title":"injectCSS","slug":"injectcss"},{"level":3,"title":"injectNonce","slug":"injectnonce"},{"level":3,"title":"editorProps","slug":"editorprops"},{"level":3,"title":"parseOptions","slug":"parseoptions"},{"level":2,"title":"NNde、Mark、Extension","slug":"nnde、mark、extension"},{"level":3,"title":"节点 node","slug":"节点-node"},{"level":3,"title":"标记 mark","slug":"标记-mark"},{"level":3,"title":"扩展 extension","slug":"扩展-extension"},{"level":2,"title":"最后","slug":"最后"}],"relativePath":"docs/tiptap/tiptap-tutorial3.md","lastUpdated":1742819970785.5366}';var p={};const e=[a('<p>接上篇<a href="https://juejin.cn/post/7243413934765621307" target="_blank" rel="noopener noreferrer">富文本编辑器 Tiptap 系列教程——5 分钟搭建基于 Tiptap 的富文本编辑器 </a>，本节我们主要讲一下 Tiptap 的基本概念。</p><h2 id="tiptap-模块"><a class="header-anchor" href="#tiptap-模块" aria-hidden="true">#</a> Tiptap 模块</h2><p><a href="https://github.com/ueberdosis/tiptap/tree/develop" target="_blank" rel="noopener noreferrer">Tiptap</a>采用 monorepo 的方式构建代码，相关的包都在 packages 下：</p><p><img src="/blog/_assets/tiptap-source-code.d730ad14.png" alt="tiptap-source-code"></p><p>我们上篇文章初始化安装时有以下几个模块：</p><ul><li><p>@tiptap/vue-3：适用于 vue3 的 tiptap 组件，类似的还有<a href="https://github.com/ueberdosis/tiptap/tree/develop/packages/react" target="_blank" rel="noopener noreferrer">@tiptap/react</a>、<a href="https://github.com/ueberdosis/tiptap/tree/develop/packages/vue-2" target="_blank" rel="noopener noreferrer">@tiptap/vue-2</a></p><p>Tiptap 简化了创建 ProseMirror 编辑器的大部分繁重工作，例如创建 EditorView、设置初始 EditorState 等，在 vue3 中可以很方便的使用<code>useEditor</code>钩子进行初始化，vue2 可以使用<code>new Editor</code>初始化。 我们项目中通过继承 Tiptap 的<code>Editor</code>，并在其基础上封装了一些基础设置和常用方法。</p></li><li><p>@tiptap/pm：提供了所有重要的 ProseMirror 包，如 prosemirror-state、prosemirror-view 或 prosemirror-model，这样我们就可以访问所有 ProseMirror 内部各种强大的 API，比如我们需要注册插件的时候：</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin<span class="token punctuation">,</span> PluginKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/pm/state&#39;</span>\n\n<span class="token operator">...</span>\n<span class="token function">addProseMirrorPlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PluginKey</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\n</code></pre></div></li><li><p>@tiptap/starter-kit：StarterKit 是最流行的 Tiptap 扩展的<a href="https://tiptap.dev/api/extensions/starter-kit#included-extensions" target="_blank" rel="noopener noreferrer">集合</a>，包含最基本的 Tiptap 节点、标记和扩展，并且可以对其中的一个或多个进行配置或禁用，在项目中我们可以先引入 StarterKit 再根据自己的需求引入其他扩展即可</p><div class="language-js"><pre><code><span class="token keyword">import</span> StarterKit <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/starter-kit&#39;</span>\n\n<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    StarterKit<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 禁用历史记录</span>\n      <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 目录只有一级目录和二级目录</span>\n      <span class="token literal-property property">heading</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">levels</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><h2 id="tiptap-初始化配置"><a class="header-anchor" href="#tiptap-初始化配置" aria-hidden="true">#</a> Tiptap 初始化配置</h2><p>我们在初始化编辑器的时候可以为编辑器开启一些默认配置，如：初始内容 content、扩展 extensions、自动获取焦点 autofocus、是否可编辑 editable 等。</p><div class="language-js"><pre><code><span class="token keyword">import</span> Document <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/extension-document&#39;</span>\n<span class="token keyword">import</span> Paragraph <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/extension-paragraph&#39;</span>\n<span class="token keyword">import</span> Text <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/extension-text&#39;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>Document<span class="token punctuation">,</span> Paragraph<span class="token punctuation">,</span> Text<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;h2&gt;\n      Hi there,\n    &lt;/h2&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token literal-property property">autofocus</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">editable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>我们来看下所有可用的配置项列表：</p><h3 id="element"><a class="header-anchor" href="#element" aria-hidden="true">#</a> element</h3><p>将编辑器内容绑定到指定的元素，针对于 JS 引用，vue 中不用配置，使用<code>EditorComponent</code>即可。</p><h3 id="extensions"><a class="header-anchor" href="#extensions" aria-hidden="true">#</a> extensions</h3><p>Tiptap 扩展列表，可以使用 StarterKit 默认扩展，或其他扩展。</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Editor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/core&#39;</span>\n<span class="token keyword">import</span> StarterKit <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/starter-kit&#39;</span>\n<span class="token keyword">import</span> Document <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/extension-document&#39;</span>\n<span class="token keyword">import</span> Paragraph <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/extension-paragraph&#39;</span>\n<span class="token keyword">import</span> Text <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/extension-text&#39;</span>\n<span class="token keyword">import</span> Highlight <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/extension-highlight&#39;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 使用默认扩展</span>\n  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>StarterKit<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 使用其他扩展</span>\n  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>Document<span class="token punctuation">,</span> Paragraph<span class="token punctuation">,</span> Text<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 也可以混着用</span>\n  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>StarterKit<span class="token punctuation">,</span> Highlight<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="content"><a class="header-anchor" href="#content" aria-hidden="true">#</a> content</h3><p>初始化时传递给编辑器的内容，可以是 HTML 或 JSON 格式。</p><h3 id="editable"><a class="header-anchor" href="#editable" aria-hidden="true">#</a> editable</h3><p>设置编辑器读写权限，<code>true</code> 可编辑 <code>false</code> 只读。</p><h3 id="autofocus"><a class="header-anchor" href="#autofocus" aria-hidden="true">#</a> autofocus</h3><p>设置编辑器是否自动聚焦和设置光标位置：</p><ul><li>&#39;start&#39;: 设置光标在编辑器文档的最前面</li><li>&#39;end&#39;: 设置光标在编辑器文档的最后面</li><li>&#39;all&#39; 选中全部文档</li><li>Number: 光标设置到文档中的特定位置</li><li>true: 自动获取焦点</li><li>false: 禁用自动获取焦点</li><li>null: 禁用自动获取焦点</li></ul><h3 id="enableinputrules"><a class="header-anchor" href="#enableinputrules" aria-hidden="true">#</a> enableInputRules</h3><p>默认情况下开启所有<a href="https://tiptap.dev/guide/custom-extensions/#input-rules" target="_blank" rel="noopener noreferrer">输入规则</a>，通过<code>enableInputRules</code>可以自定义输入规则。一般不会直接在这里设置，而是在节点或扩展中通过<code>addInputRules</code>来设置。</p><p>比如：我们使用 markdown 语法的规则来定义有序无序列表的输入，在输入<code>-</code>、<code>+</code>、<code>*</code>后空格启用无序列表，输入<code>1</code>、<code>a</code>、<code>一</code>后输入<code>.</code>或<code>、</code>启用有序列表。</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> List <span class="token operator">=</span> Node<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// 有序无序列表输入规则</span>\n  <span class="token function">addInputRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">InputRule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">find</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*([-+*])\\s$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> range<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> state <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInListNde</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n          <span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrapInBulletList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">InputRule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">find</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*([1a一][.、])\\s$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> range<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> match<span class="token punctuation">,</span> state <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInListNde</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">deleteRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">wrapInOrderedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">toggleListStyle</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">listStyle</span><span class="token operator">:</span> <span class="token string">&#39;4&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;一&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">deleteRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">wrapInOrderedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">toggleListStyle</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">listStyle</span><span class="token operator">:</span> <span class="token string">&#39;7&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrapInOrderedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="enablepasterules"><a class="header-anchor" href="#enablepasterules" aria-hidden="true">#</a> enablePasteRules</h3><p>默认情况下开启所有<a href="https://tiptap.dev/guide/custom-extensions/#paste-rules" target="_blank" rel="noopener noreferrer">粘贴规则</a>，通过<code>enablePasteRules</code>可以自定义粘贴规则。</p><h3 id="injectcss"><a class="header-anchor" href="#injectcss" aria-hidden="true">#</a> injectCSS</h3><p>Tiptap 默认注入的<a href="https://github.com/ueberdosis/tiptap/blob/main/packages/core/src/style.ts" target="_blank" rel="noopener noreferrer">css 样式</a>，通过设置<code>injectCSS</code>可以禁用掉。</p><h3 id="injectnonce"><a class="header-anchor" href="#injectnonce" aria-hidden="true">#</a> injectNonce</h3><p>HTML <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/nonce" target="_blank" rel="noopener noreferrer">nonce</a>是一种告诉浏览器特定脚本或样式元素的内联内容不是由某些(恶意)第三方注入到文档中，而是由控制文档的服务器的人故意放入文档中的方法。</p><p>使用<code>injectNonce</code>可以指定要添加到动态创建的元素的 <code>nonce</code>，如设置<code>injectNonce: &quot;your-nonce-here&quot;</code>，这样在控制台中看到的样式文件会带有<code>nonce</code>标志。</p><p><img src="/blog/_assets/tiptap-nonce.b7cd3eef.png" alt="tiptap-nonce.png"></p><h3 id="editorprops"><a class="header-anchor" href="#editorprops" aria-hidden="true">#</a> editorProps</h3><p>传递<code>editorProps</code>由<code>ProseMirror</code>处理，用来覆盖编辑器事件或更改编辑器 DOM 元素属性。</p><h3 id="parseoptions"><a class="header-anchor" href="#parseoptions" aria-hidden="true">#</a> parseOptions</h3><p>传递<code>parseOptions</code>由<code>ProseMirror</code>处理。</p><p><a href="https://tiptap.dev/api/editor#settings" target="_blank" rel="noopener noreferrer">所有配置选项</a></p><h2 id="nnde、mark、extension"><a class="header-anchor" href="#nnde、mark、extension" aria-hidden="true">#</a> NNde、Mark、Extension</h2><p>Tiptap 的大多功能依赖于 <a href="https://tiptap.dev/api/nodes" target="_blank" rel="noopener noreferrer">节点 node</a>、<a href="https://tiptap.dev/api/marks" target="_blank" rel="noopener noreferrer">标记 mark</a> 和 <a href="https://tiptap.dev/api/extensions" target="_blank" rel="noopener noreferrer">扩展 extension</a> 这三个模块，所以想要敲开 Tiptap 的大门，我们需要熟悉这三个模块。</p><h3 id="节点-node"><a class="header-anchor" href="#节点-node" aria-hidden="true">#</a> 节点 node</h3><p>如果您将文档视为一棵树，那么节点就是该树中的一种内容。类似 DOM 树和 DOM 节点，而 Tiptap 节点指的是段落 Paragraph、标题 Heading、代码块 CodeBlock、表情 Emoji 等等。</p><p>前面讲到我们可以使用 StarterKit 来初始化节点、标记和扩展，我们看下 StarterKit 已经包含的 node 列表</p><p><img src="/blog/_assets/starerKit-node.e208cc30.png" alt="starterKit-node.png"></p><p>像其他的一些比如图片 Image、表格 Table 等，需要导入如<code>@tiptap/extension-image</code>相关插件来配置。</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> @tiptap/extension-image\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>Image<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Tiptap 已经为我们完成了大多数的 node，当然如果你觉得不够用或不好用的话，也可以自定义节点。</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Node <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/core&#39;</span>\n\n<span class="token keyword">const</span> CustomNode <span class="token operator">=</span> Node<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Your code here</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>CustomNode<span class="token punctuation">,</span> Document<span class="token punctuation">,</span> Paragraph<span class="token punctuation">,</span> Text<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="标记-mark"><a class="header-anchor" href="#标记-mark" aria-hidden="true">#</a> 标记 mark</h3><p><img src="/blog/_assets/tiptap-marks.04cee97c.png" alt="tiptap-marks"> 可以将一个或多个标记应用于节点，例如添加内联格式（如粗体和斜体）或其他附加信息。如上图，当我们给节点设置<code>加粗</code>和<code>斜体</code>后，在 html 内容中可以看到会讲<code>&lt;strong&gt;</code>和<code>&lt;em&gt;</code>标签添加到对应节点上，这些对应的 html 标签就是 mark。</p><p>StarterKit 中已经包含了一些常用的 mark，其余的只需要引入即可，当然像 node 一样 mark 也是可以自定义的。</p><h3 id="扩展-extension"><a class="header-anchor" href="#扩展-extension" aria-hidden="true">#</a> 扩展 extension</h3><p>Tiptap 提供具有更多功能的扩展，横向增加 Tiptap 的功能，像之前的 node 和 mark 都可以作为扩展添加到 Tiptap 中。 可以在社区中找到更多的 Tiptap <a href="https://github.com/ueberdosis/awesome-tiptap#community-extensions" target="_blank" rel="noopener noreferrer">扩展</a></p><h4 id="extension-的工作原理"><a class="header-anchor" href="#extension-的工作原理" aria-hidden="true">#</a> extension 的工作原理</h4><p>尽管 Tiptap 试图隐藏 ProseMirror 的大部分复杂性，但它构建在 ProseMirror 之上，所以扩展的底层依然是基于 roseMirror，要想使用自定义扩展这样的高级功能必须对 ProseMirror 的原理有一定的了解。</p><p>现有的节点、标记和扩展都有 Github 地址，这样我们就能很方便的看到它们的源码。看下官方扩展的源码可以让我们可能会遇到 ProseMirror 的各种 API，然后可以在<a href="https://prosemirror.net/docs/ref/" target="_blank" rel="noopener noreferrer">ProseMirror API</a>中找到它，去了解并学习最终运用在自己的自定义扩展中。</p><h4 id="自定义-extension"><a class="header-anchor" href="#自定义-extension" aria-hidden="true">#</a> 自定义 extension</h4><p>自定义扩展只需要继承通过 Extension 去创建一个扩展，最后引入到初始化 Editor 的 extensions 中即可。</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Extension <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/core&#39;</span>\n\n<span class="token keyword">const</span> CustomExtension <span class="token operator">=</span> Extension<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Your code here</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// Register your custom extension with the editor.</span>\n    CustomExtension<span class="token punctuation">,</span>\n    <span class="token comment">// … and don&#39;t forget all other extensions.</span>\n    Document<span class="token punctuation">,</span>\n    Paragraph<span class="token punctuation">,</span>\n    Text<span class="token punctuation">,</span>\n    <span class="token comment">// …</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="最后"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h2><p>通过本文的介绍，想必大家已经对 Tiptap 重要的概念有了一定的了解，也知道了如何自定义节点或扩展。推荐大家阅读一些比较简单的扩展源码，类似<a href="https://github.com/ueberdosis/tiptap/tree/develop/packages/extension-bold" target="_blank" rel="noopener noreferrer">Bold</a>、<a href="https://github.com/ueberdosis/tiptap/tree/main/packages/extension-character-count" target="_blank" rel="noopener noreferrer">CharacterCount</a>这种，学习别人是怎么完成一个扩展，怎样使用 Tiptap 或 ProseMirror API 的，<strong>学了就会有收获</strong>💪。</p><p>以上就是本文的全部内容，希望这篇文章对你有所帮助，欢迎点赞和收藏 🙏，如果发现有什么错误或者更好的解决方案及建议，欢迎随时联系。</p>',64)];p.render=function(a,t,p,o,c,r){return n(),s("div",null,e)};export{t as __pageData,p as default};
