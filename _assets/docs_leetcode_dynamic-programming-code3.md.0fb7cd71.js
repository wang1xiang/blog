import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 35：动态规划part3","frontmatter":{"date":"2025-03-18","title":"跟着卡哥学算法Day 35：动态规划part3","tags":["leetcode"],"describe":"动态规划part3"},"headers":[{"level":2,"title":"01 背包理论基础","slug":"_01-背包理论基础"},{"level":3,"title":"01 背包动态规划解法（常规解法）","slug":"_01-背包动态规划解法（常规解法）"},{"level":3,"title":"01 背包动态规划解法（滚动数组）","slug":"_01-背包动态规划解法（滚动数组）"},{"level":2,"title":"416. 分割等和子集 🌟🌟","slug":"_416-分割等和子集-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码-3"}],"relativePath":"docs/leetcode/dynamic-programming-code3.md","lastUpdated":1742523053375.6387}';var t={};const o=[a('<p><strong>找问题最好的方式就是把 dp 数组打印出来，看看是不是和我们推导的公式一致。</strong></p><p><strong>做动规题目前，一定要把状态转移在 dp 数组上的具体情况模拟一遍，确定最后推出的是想要的结果。</strong></p><h2 id="_01-背包理论基础"><a class="header-anchor" href="#_01-背包理论基础" aria-hidden="true">#</a> 01 背包理论基础</h2><p>01 背包问题是指有 n 件物品和一个最多能背重量为 w 的背包。第 i 件物品的重量为 weight[i]，价值为 value[i]，<strong>每个物品只能选择一次</strong>，在不超过背包容量的情况下，使得物品的总价值最大。比如：旅行时行李箱大小有限，如何选择最有价值的物品装满行李箱。</p><p>首先思考如何使用暴力解法？</p><p>每件物品的状态有两种：<strong>放入背包或不放入背包</strong>，有 2^n 种状态，可以使用回溯法搜索出所有的情况，时间复杂度为 O(2^n)。</p><p>回溯三部曲：</p><p>初始化 maxValue = 0 表示总价值</p><ol><li><p>回溯函数返回值以及参数</p><ul><li>参数 1：startIndex 表示当前处理的物品索引</li><li>参数 2：currentWeight 表示当前已选物品的总重量</li><li>参数 3：currentValue 表示已选物品的总价值</li></ul></li><li><p>回溯函数终止条件</p><p>当 startIndex 等于物品数量 n 时，比较并更新最大价值</p></li><li><p>单层搜索的过程</p><ul><li>不选当前物品：直接处理下一个物品（index + 1），重量和价值不变</li><li>选当前物品：如果加入后不超过容量，则更新重量和价值，再处理下一个物品</li></ul><div class="language-js"><pre><code><span class="token comment">// 不选当前物品，直接处理下一个</span>\n<span class="token function">backtrack</span><span class="token punctuation">(</span>startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> currentWeight<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span>\n\n<span class="token comment">// 选当前物品（需检查容量）</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>currentWeight <span class="token operator">+</span> weight<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token constant">W</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">backtrack</span><span class="token punctuation">(</span>\n    startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    currentWeight <span class="token operator">+</span> weight<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    currentValue <span class="token operator">+</span> value<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">knapsack01Backtrack</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">W</span><span class="token punctuation">,</span> weight<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> maxValue <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> weight<span class="token punctuation">.</span>length\n\n  <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">startIndex<span class="token punctuation">,</span> currentWeight<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      maxValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 不选当前物品，直接处理下一个</span>\n    <span class="token function">backtracking</span><span class="token punctuation">(</span>startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> currentWeight<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span>\n\n    <span class="token comment">// 选当前物品（需检查容量）</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentWeight <span class="token operator">+</span> weight<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token constant">W</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">backtracking</span><span class="token punctuation">(</span>\n        startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        currentWeight <span class="token operator">+</span> weight<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>\n        currentValue <span class="token operator">+</span> value<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> maxValue\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>暴力解法是指数级别的时间复杂度，所以需要动态规划的解法来优化</strong></p><h3 id="_01-背包动态规划解法（常规解法）"><a class="header-anchor" href="#_01-背包动态规划解法（常规解法）" aria-hidden="true">#</a> 01 背包动态规划解法（常规解法）</h3><p>以下面的输入为例：</p><p>背包最大重量为 4。</p><p>物品为：</p><table><thead><tr><th></th><th>重量</th><th>价值</th></tr></thead><tbody><tr><td>物品 0</td><td>1</td><td>15</td></tr><tr><td>物品 1</td><td>3</td><td>20</td></tr><tr><td>物品 2</td><td>4</td><td>30</td></tr></tbody></table><p>问背包能背的物品最大价值是多少？</p><h4 id="二维-dp-数组-01-背包"><a class="header-anchor" href="#二维-dp-数组-01-背包" aria-hidden="true">#</a> 二维 dp 数组 01 背包</h4><p>动规五部曲：</p><ol><li><p>确定 dp 数组以及下标的含义</p><p>需要定义二维数组：一个维度表示背包容量，一个维度表示表示物品，即 <code>dp[i][j]</code> 表示前 i 个物品放入容量为 j 的背包时的最大价值。</p><ol><li><p>处理物品 0（重量 1，价值 15）</p><p>当 j = 0（容量为 0）时，无法放入，价值为 0；若 j ≥ 1，可以放入物品 0，价值为 15。</p><table><thead><tr><th>背包容量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>物品 0</td><td>0</td><td>15</td><td>15</td><td>15</td><td>15</td></tr></tbody></table></li><li><p>处理物品 1（重量 3，价值 20）</p><ul><li><p>容量 1-2：无法放入物品 1，继承物品 0 的值 15</p></li><li><p>容量 3：</p><ul><li>不放入物品 1：那么背包的价值应该是 <code>dp[1][3]</code> = <code>dp[0][3] = 15</code>，即容量为 3 的背包，只放物品 0 的情况</li><li>放入物品 1：那么<strong>背包要先留出物品 1 的容量</strong>，目前容量为 3，物品 1 的重量为 3，背包剩余容量为 0 时的价值为 <code>dp[0][0] = 0</code>，所以 <code>dp[1][3]</code> = <code>dp[0][3-3] + 20 = 0 + 20 = 20</code></li><li>取最大值 <code>20</code></li></ul></li><li><p>容量 4：</p><ul><li>不放入物品 1：那么背包的价值应该是 <code>dp[1][4]</code> = <code>dp[0][4] = 15</code>，即容量为 4 的背包，只放物品 0 的情况</li><li>放入物品 1：目前容量为 4，物品 1 的重量为 3，背包剩余容量为 1，背包容量为 1 时的价值为 <code>dp[0][1] = 15</code>, 所以<code>dp[1][4]</code> = <code>dp[0][4-3] + 20 = 15 + 20 = 35</code></li><li>取最大值 <code>35</code></li></ul><table><thead><tr><th>背包容量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>物品 0</td><td>0</td><td>15</td><td>15</td><td>15</td><td>15</td></tr><tr><td>物品 1</td><td>0</td><td>15</td><td>15</td><td>20</td><td>35</td></tr></tbody></table></li></ul></li><li><p>处理物品 2（重量 4，价值 30）</p><ul><li><p>容量 1-3：无法放入物品 2，继承物品 1 的值。</p></li><li><p>容量 4：</p><ul><li>不放入物品 2：<code>dp[2][4]</code> = <code>dp[1][4] = 35</code>，即容量为 4 的背包，放入物品 0 和 1 的情况</li><li>放入物品 2：目前容量为 4，物品重量为 4，放入后背包剩余 0 的价值为 <code>dp[0][0] = 0</code>，所以<code>dp[2][4]</code> = <code>dp[1][4-4] + 30 = 0 + 30 = 30</code></li><li>取最大值 <code>35</code></li></ul></li></ul><table><thead><tr><th>背包容量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>物品 0</td><td>0</td><td>15</td><td>15</td><td>15</td><td>15</td></tr><tr><td>物品 1</td><td>0</td><td>15</td><td>15</td><td>20</td><td>35</td></tr><tr><td>物品 2</td><td>0</td><td>15</td><td>15</td><td>20</td><td>35</td></tr></tbody></table></li></ol></li><li><p>确认递推公式</p><p>通过上面的示例，我们可以得出不放入第 i 个物品和放入第 i 个物品的最大价值：</p><ol><li>不放入第 i 个物品：背包容量为 j，里面不放物品 i 的最大价值是 <code>dp[i][j] = dp[i-1][j]</code></li><li>放入第 i 个物品：背包空出物品 i 的容量后，背包容量为 <code>j - weight[i]</code>，<code>dp[i-1][j-weight[i]]</code> 为背包容量为 <code>j - weight[i]</code> 且不放物品 i 的最大价值， <code>dp[i][j] = dp[i-1][j-weight[i]] + value[i]</code> 就是背包放入物品 i 得到的最大价值</li></ol><p>两者取最大值：<code>dp[i][j] = Math.max(dp[i-1][j], dp[i-1][j-weight[i]] + value[i])</code></p></li><li><p>dp 数组初始化</p><p><strong>初始化一定要和 dp 数组的定义吻合，否则到递推公式的时候会越来越乱</strong></p><ul><li>当 j = 0（背包容量为 0）时，背包价值为 0，即<code>dp[i][0] = 0</code></li><li>由状态转移方程可知，i 是由 i-1 推导出来的，所以 i 为 0 需要初始化 <ul><li>当 <code>j &lt; weight[0]</code> 时，<code>dp[0][j] = 0</code>，背包容量比编号 0 的物品重量小</li><li>当 <code>j &gt;= weight[0]</code> 时，<code>dp[0][j] = value[0]</code>，背包容量比编号 0 的物品重量大，可以放入，此时价值就是 <code>value[0]</code></li></ul></li></ul><p>此时，dp 数组初始化应该如下：</p><table><thead><tr><th>背包容量</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>物品 0</td><td>0</td><td>15</td><td>15</td><td>15</td><td>15</td></tr><tr><td>物品 1</td><td>0</td><td></td><td></td><td></td><td></td></tr><tr><td>物品 2</td><td>0</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>由递推公式可以 <code>dp[i][j]</code> 都会由左上方的值决定，所以初始化任何数都可以，统一填充为 0</p></li><li><p>确定遍历顺序</p><p>有两个维度，物品和背包容量，<strong>先遍历物品还是先遍历背包容量呢？</strong></p><p>先遍历物品，再遍历背包容量，就类似于上面的推导过程，比较好理解</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weight<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 物品</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token constant">W</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 背包容量</span>\n    <span class="token comment">// 1. 不放入物品 i</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 2. 放入物品 i</span>\n      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>举例推导 dp 数组</p><p>上述示例的 dp 数组应该是：</p><div class="language-text"><pre><code>[\n  [0, 15, 15, 15, 15],\n  [0, 15, 15, 20, 35],\n  [0, 15, 15, 20, 35]\n]\n</code></pre></div></li></ol><h4 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h4><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">knapsack01</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">W</span><span class="token punctuation">,</span> weight<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> weight<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">W</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 初始化 dp 数组</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token constant">W</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> weight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token constant">W</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">W</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_01-背包动态规划解法（滚动数组）"><a class="header-anchor" href="#_01-背包动态规划解法（滚动数组）" aria-hidden="true">#</a> 01 背包动态规划解法（滚动数组）</h3><p><a href="#01-%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E6%B3%95%E5%B8%B8%E8%A7%84%E8%A7%A3%E6%B3%95">上面二维数组</a>的解法中，每个状态 <code>dp[i][j]</code> 依赖于上一行的数据，<code>dp[i-1][j]</code> 和 <code>dp[i-1][j-weight[i]]</code></p><p>这说明其实每次处理新物品的时候，只需要前一行的数据，而不需要保留之前所有行的信息。这样的话，理论上可以用一维数组来滚动更新，减少空间使用。</p><p>二维数组的递推公式为：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])</code></p><p><strong>把 dp[i - 1]拷贝到 dp[i]，表达式可以是 <code>dp[i][j] = Math.max(dp[i][j], dp[i][j - weight[i]] + value[i])</code></strong></p><p>因此可以使用<strong>滚动数组</strong>：如果上一层可以重复利用，直接拷贝到当前层</p><p>动规五部曲：</p><ol><li><p>确定 dp 数组以及下标的含义</p><p>在上面的二维数组中，<code>dp[i][j]</code> 表示从下标为[0-i]的物品里任意取，放进容量为 j 的背包的最大价值</p><p>一维数组：<code>dp[j]</code> 表示背包容量为 j 时的最大价值</p></li><li><p>确定递推公式</p><p>当把 <code>dp[i - 1]</code> 拷贝到 <code>dp[i]</code> 的时候，递推公式可以简化为：<code>dp[i][j] = Math.max(dp[i][j], dp[i][j - weight[i]] + value[i])</code></p><p>此时去掉 i，<code>dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i])</code></p><ul><li>dp[j]： 相当于二维 dp 数组中的 <code>dp[i-1][j]</code>，即不放物品 i</li><li>dp[j - weight[i]] + value[i]：容量为 j - weight[i]的背包所背的最大价值 + 当前物品 i 的价值，即放物品 i</li></ul></li><li><p>dp 数组初始化</p><p>dp[0] = 0，即容量为 0 的背包，不放任何物品，最大价值为 0</p><p>初始化为全 0，表示没有物品时的价值为 0。</p></li><li><p>确定遍历顺序</p><p>二维遍历的时候，背包从小到大，而一维遍历时，背包应从大到小</p><p>示例：</p><ul><li>物品 0：重量 <code>weight[0] = 1</code>，价值 <code>value[0] = 15</code></li><li>背包容量：<code>W = 2</code></li><li>一维数组初始化：<code>dp = [0, 0, 0]</code>（容量 0、1、2）</li></ul><ol><li><p>正序遍历容量（错误方式）</p><p>遍历顺序：容量从小到大（<code>j = 1 → 2</code>）</p><p>执行步骤：</p><ol><li><p>j = 1：</p><ul><li><code>dp[1] = max(0, dp[0] + 15) = 15</code></li><li>此时 <code>dp = [0, 15, 0]</code></li></ul></li><li><p>j = 2：</p><ul><li><code>dp[2] = max(0, dp[1] + 15) = 15 + 15 = 30</code></li><li>此时 <code>dp = [0, 15, 30]</code></li></ul></li></ol><p>结果分析：</p><ul><li><code>dp[2] = 30</code> 此时物品 0 被放入两次</li><li>错误原因：正序遍历时，<code>dp[j - weight[i]]</code> 已经被当前物品的更新污染，导致重复选择</li></ul></li><li><p>逆序遍历容量（正确方式）</p><p>遍历顺序：容量从大到小（<code>j = 2 → 1</code>）</p><p>执行步骤：</p><ol><li><p>j = 2：</p><ul><li><code>dp[2] = max(0, dp[1] + 15)</code>，但此时 <code>dp[1]</code> 尚未更新，仍为 0。</li><li>因此 <code>dp[2] = 0 + 15 = 15</code></li><li>此时 <code>dp = [0, 0, 15]</code></li></ul></li><li><p>j = 1：</p><ul><li><code>dp[1] = max(0, dp[0] + 15) = 15</code></li><li>此时 <code>dp = [0, 15, 15]</code></li></ul></li></ol><p>结果分析：</p><ul><li><code>dp[2] = 15</code> 表示物品 0 仅被放入一次</li><li>正确原因：逆序遍历时，较大的容量 j 优先处理，此时较小的容量 j - weight[i] 尚未被修改，仍保留上一轮的值，避免重复计算</li></ul></li></ol></li><li><p>举例推导 dp 数组</p><ol><li>物品 0 遍历背包：dp = [0, 15, 15, 15, 15]</li><li>物品 1 遍历背包：dp = [0, 15, 15, 20, 35]</li><li>物品 2 遍历背包：dp = [0, 15, 15, 20, 35]</li></ol></li></ol><h4 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h4><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">knapsack01</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">W</span><span class="token punctuation">,</span> weight<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">W</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 初始化一维数组</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> weight<span class="token punctuation">.</span>length\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 遍历物品</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token constant">W</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 逆序遍历容量</span>\n      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token constant">W</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_416-分割等和子集-🌟🌟"><a class="header-anchor" href="#_416-分割等和子集-🌟🌟" aria-hidden="true">#</a> 416. 分割等和子集 🌟🌟</h2><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200</p><p>示例 1:</p><ul><li>输入: [1, 5, 11, 5]</li><li>输出: true</li><li>解释: 数组可以分割成 [1, 5, 5] 和 [11].</li></ul><p>示例  2:</p><ul><li>输入: [1, 2, 3, 5]</li><li>输出: false</li><li>解释: 数组不能分割成两个元素和相等的子集.</li></ul><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 200</li><li>1 &lt;= nums[i] &lt;= 100</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>前提：</p><ol><li>数组和为偶数（否则无法等分）</li><li>数组长度大于 2（否则无法分割子集）</li><li>最大元素必须小于总和的一半（否则剩下的所有元素和一定小于总和的一半，不可能等分）</li></ol><p>满足以上三个条件，如[1, 5, 11, 5]，总和为 22，可以等分为 [1, 5, 5] 和 [11]</p><p>此题关键点是将这个问题视为一个背包问题，不仅可以求<strong>背包能背的最大价值，还可以求这个背包是否可以装满</strong>，其中<strong>背包的容量是数组总和的一半</strong>。如果能找到一个子集的和等于总和的一半，那么剩下的元素自然也能组成另一半，这样就满足了题目的条件。</p><p>即<strong>求合集内是否出现总和为 sum/2 的子集</strong>。</p><p>转为 01 背包问题，求背包容量为 sum/2 时，物品的<strong>重量和价值都是数字本身</strong>，这些数字能否把背包装满（和为 sum/2）</p><h4 id="二维-dp-数组"><a class="header-anchor" href="#二维-dp-数组" aria-hidden="true">#</a> 二维 dp 数组</h4><p>动规五部曲：</p><ol><li><p>确定 dp 数组和下标的含义</p><ul><li>01 背包中，<code>dp[i][j]</code> 表示在[0, i - 1]范围内的物品放入容量为 j 的背包，所背物品的最大价值</li><li>本题中，<code>dp[i][j]</code> 表示在[0, i - 1]范围内是否存在和为 j 的子集</li></ul></li><li><p>确定递推公式</p><ul><li>01 背包二维数组的递推公式为：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]])</code></li><li>此题的递推公式为：<code>dp[i][j] = dp[i - 1][j]（不选） || dp[i - 1][j - nums[i]]（选择）</code></li></ul></li><li><p>初始化 dp 数组</p><ul><li>初始化所有<code>dp[i][0]</code>为 true，因为不选择任何元素时，和为 0 总是成立的</li><li>初始化<code>dp[0][nums[0]]</code>为 true，只选第一个数字时，和为 nums[0] 总是成立的</li><li>其他位置填充为 false</li></ul><p><img src="/blog/_assets/dynamic-programming-code31.cbf49c74.png" alt="dynamic-programming-code31"></p></li><li><p>确定遍历顺序</p><p>先遍历数字，再遍历每一个可能的和 [1...sum/2]</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 数字</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 和</span>\n    <span class="token comment">// 1. 不选择数字</span>\n    <span class="token comment">// 不选择当前元素，继承上一行的结果</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 2. 选择数字</span>\n      <span class="token comment">// 如果当前元素的值小于等于j，则`dp[i][j]`取决于是否选择当前元素</span>\n      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>举例推导 dp 数组</p><p><img src="/blog/_assets/dynamic-programming-code32.71de75ea.png" alt="dynamic-programming-code32"></p></li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">canPartition</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n\n  <span class="token keyword">const</span> target <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">2</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 初始化第一列为true 不选择任何元素时和为0总是成立的</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 只选第一个数字时，和为nums[0] 总是成立的</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> num<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="滚动数组"><a class="header-anchor" href="#滚动数组" aria-hidden="true">#</a> 滚动数组</h4><p>即 <code>dp[sum/2] === sum/2</code>。</p><p>按照上题，只要找出 <strong>dp[11] 等于 11</strong>，则返回 true。</p><p>动规五部曲：</p><ol><li><p>确定 dp 数组和下标的含义</p><ul><li>01 背包中，dp[j]指的是容量为 j 的背包，所背物品的最大价值为 dp[j]</li><li>本题中， dp[j]指的是容量为 j 的背包，所背数字的最大和为 dp[j]</li></ul><p><strong>当 dp[j] === j 时，表示背包容量为 j 时，背包刚好装满</strong></p><p>如 <code>dp[6] === 1 + 5</code>，表示容量为 6 的背包，放入 1 和 5 后，刚好装满，即和为 6</p></li><li><p>确定递推公式</p><ul><li>01 背包的递推公式为：<code>dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i])</code></li><li>本题重量和价值都是数字本身，所以递推公式：<code>dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i])</code></li></ul></li><li><p>dp 数组初始化</p><ul><li>根据 dp 的定义，dp[0] = 0</li><li>dp[1...sum/2]初始化也设为 0</li></ul></li><li><p>确定遍历顺序</p><p>如果使用一维数组，需要<strong>先遍历物品，再遍历背包，且背包按逆序遍历</strong></p></li><li><p>举例推导 dp 数组</p><p>输入[1,5,11,5]，得到的 dp 数组为：</p><div class="language-js"><pre><code><span class="token comment">// 1</span>\ndp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token comment">// 5</span>\ndp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>\n<span class="token comment">// 11</span>\ndp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>\n<span class="token comment">// 5</span>\ndp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>\n</code></pre></div><p>最后 <code>dp[11] === 11</code>，返回 true</p></li></ol><h3 id="代码-3"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">canPartition</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 先遍历物品</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 逆序遍历背包</span>\n      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',61)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
