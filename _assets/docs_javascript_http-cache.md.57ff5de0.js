import{f as e,g as a,J as i}from"./common-03e46d7f.js";const s='{"title":"http缓存学习","frontmatter":{"date":"2022-10-31","title":"http缓存学习","tags":["javascript"],"describe":"http缓存学习笔记"},"headers":[{"level":3,"title":"HTTP协议","slug":"http协议"},{"level":3,"title":"与缓存有关的首部字段名","slug":"与缓存有关的首部字段名"},{"level":3,"title":"网页缓存过程","slug":"网页缓存过程"},{"level":3,"title":"Disk Cache（磁盘缓存）和Memory Cache（内存缓存）","slug":"disk-cache（磁盘缓存）和memory-cache（内存缓存）"},{"level":3,"title":"缓存新鲜度","slug":"缓存新鲜度"}],"relativePath":"docs/javascript/http-cache.md","lastUpdated":1742819970632.537}';var l={};const t=[i('<h3 id="http协议"><a class="header-anchor" href="#http协议" aria-hidden="true">#</a> HTTP协议</h3><ul><li><p>请求报文：请求行、请求报头、请求正文</p></li><li><p>响应报文：相应行、响应报头、响应正文</p></li><li><p>首部字段：报头中一些列的属性，如</p><div class="language-bash"><pre><code>Content-Type: text/javascript\n</code></pre></div><p>首部字段包含四种类型：</p><ul><li>通用首部字段（请求报头和响应报头都用到的首部）</li><li>请求首部字段（请求报头用到的首部）</li><li>响应首部字段（响应报头用到的首部）</li><li>实体首部字段（针对请求报头和响应报头实体部分使用的首部）</li></ul></li></ul><h3 id="与缓存有关的首部字段名"><a class="header-anchor" href="#与缓存有关的首部字段名" aria-hidden="true">#</a> 与缓存有关的首部字段名</h3><p>和强缓存有关的首部字段名主要是：Expires和Cache-control</p><ul><li><p>Expires</p><p>定义缓存过期的绝对时间，属于实体首部字段</p><div class="language-bash"><pre><code>Expires: Wed, <span class="token number">11</span> May <span class="token number">2022</span> 03:50:47 GMT\n</code></pre></div><p>因为Expires设置的缓存过期时间是一个绝对时间，受客户端时间的影响而变得不精准</p></li><li><p>Cache-control</p><p>定义控制缓存的行为，可以组合使用，属于通用首部字段</p><div class="language-bash"><pre><code>Cache-Control: max-age:3600, s-maxage<span class="token operator">=</span><span class="token number">3600</span>, public\nCache-Control: no-cache\n</code></pre></div><ul><li>max-age：缓存过期相对时间，单位秒，与Expires同时出现时，max-age优先级高</li><li>public：客户端和代理服务器都可缓存</li><li>private：客户端缓存、代理服务器不进行缓存，只有发出请求的浏览器才进行缓存，而一些中间的http代理服务器不进行缓存</li><li>no-cache：请求首部中出现时，表示告知服务器不直接使用缓存，要求向源服务器发起请求；响应首部出现时，表示客户端可以缓存资源，但每次使用缓存资源前，必须向服务器确认其有效性</li><li>no-store：不进行任何缓存</li></ul></li></ul><p>和协商缓存相关的首部字段名：Last-Modified、If-Modified-Since、Etag、If-None-Match</p><ul><li><p>Last-Modified与If-Modified-Since</p><p>Last-Modified响应首部字段，浏览器第一次收到服务端资源的Last-Modified值后，会将这个值存储，下次继续访问此资源时，会携带If-Modified-Since请求首部发送到服务器，用于验证资源是否过期</p><div class="language-bash"><pre><code>Last-Modified: Fri , <span class="token number">14</span> May <span class="token number">2021</span> <span class="token number">17</span>:23:13 GMT\nIf-Modified-Since: Fri , <span class="token number">14</span> May <span class="token number">2021</span> <span class="token number">17</span>:23:13 GMT\n</code></pre></div><p>如果在If-Modified-Since字段指定的事件后发生更新，服务器会将更新的资源发送到浏览器，并返回最新的Last-Modified值；如果未更新，则服务端会返回<code>304 Not Modified</code>状态码</p></li><li><p>Etag与If-None-Match</p><p>类似于Last-Modified和If-Modified-Since，不同之处在于Last-Modified记录最后需改时间，而Etag代表资源的唯一性标识（资源是否发生改变），资源发生改变则Etag更新，两者同时存在时只有Etag会生效</p><div class="language-bash"><pre><code>Etag: <span class="token string">&quot;29322-09SpAhH3nXWd8KIVqB10hSSz66&quot;</span>\nIf-None-Match: <span class="token string">&quot;29322-09SpAhH3nXWd8KIVqB10hSSz66&quot;</span>\n</code></pre></div></li><li><p>Etag和Last-Modified关系</p><ul><li>Last-Modified精确到秒，一秒之内的内容修改Etag才能检测到</li><li>内容不变，仅保存时修改时间会发生变化，此时如果使用Last-Modified时就不会走缓存</li><li>相辅相成：Etag可以弥补Last-Modified判断的精确性问题，而Last-Modified对静态资源的修改，只需要判断修改时间，对比每次生成Etag来说会快很多</li></ul></li></ul><p>强缓存失效后，浏览器携带缓存标识（If-none-match或If-modified-since）向服务器发起请求，由服务器根据缓存标识决定是否使用缓存</p><h3 id="网页缓存过程"><a class="header-anchor" href="#网页缓存过程" aria-hidden="true">#</a> 网页缓存过程</h3><p>当浏览器发起Http请求时获取资源时：</p><ol><li>向浏览器缓存询问是否有缓存该资源的数据，有的话直接使用</li><li>没有时向服务器发起请求，获取资源</li><li>将获取到的资源存储在浏览器缓存中</li></ol><h3 id="disk-cache（磁盘缓存）和memory-cache（内存缓存）"><a class="header-anchor" href="#disk-cache（磁盘缓存）和memory-cache（内存缓存）" aria-hidden="true">#</a> Disk Cache（磁盘缓存）和Memory Cache（内存缓存）</h3><ul><li>Memory Cache从内存中直接读取，读取速度块，但一旦关闭Tab页，Memory Cache就被释放了，下次进还是Disk Cache</li><li>Disk Cache硬盘中的缓存，容量大，但读取速度慢</li><li>Memory Cache比Disk Cache更快原因在于，磁盘缓存会有些许耗时，而内存缓存是及时性的，不存在耗时</li><li>浏览器会率先查找内存缓存，如果内存中存在则直接加载；不存在时会在磁盘中查找</li><li>大文件不会存储在内存中</li><li>base64是一串字符串，随着页面渲染而加载，浏览器解析会损耗一定性能，浏览器为了节约渲染开销，会把base64的图片塞进内存</li></ul><h3 id="缓存新鲜度"><a class="header-anchor" href="#缓存新鲜度" aria-hidden="true">#</a> 缓存新鲜度</h3><p>缓存新鲜度用于判断缓存是否过期：缓存新鲜度 &gt; 缓存使用期</p><div class="language-bash"><pre><code>缓存新鲜度 <span class="token operator">=</span> max-age <span class="token operator">||</span> <span class="token punctuation">(</span>expires - <span class="token function">date</span><span class="token punctuation">)</span>\n</code></pre></div><p>max-age存在时，缓存新鲜度直接等于它，缓存xxx秒，在这个时间段内都是新鲜的；而max-age不存在时，缓存新鲜度等于expires - date的值，expires绝对时间，表示缓存过期的时间，而date表示创建报文的日期时间（服务器返回新资源的时间），两者相减就可以计算出可以缓存的时间，即新鲜度</p>',17)];l.render=function(i,s,l,n,p,d){return e(),a("div",null,t)};export{s as __pageData,l as default};
