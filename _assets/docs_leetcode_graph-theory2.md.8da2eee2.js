import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 51：图论part2 岛屿问题","frontmatter":{"date":"2025-04-03","title":"跟着卡哥学算法Day 51：图论part2 岛屿问题","tags":["leetcode"],"describe":"图论part2 岛屿问题"},"headers":[{"level":2,"title":"99. 岛屿数量","slug":"_99-岛屿数量"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"99. 岛屿数量 广度优先搜索","slug":"_99-岛屿数量-广度优先搜索"},{"level":3,"title":"bfs 和 dfs 代码区别","slug":"bfs-和-dfs-代码区别"},{"level":2,"title":"岛屿的最大面积","slug":"岛屿的最大面积"},{"level":3,"title":"与岛屿数量的差异","slug":"与岛屿数量的差异"}],"relativePath":"docs/leetcode/graph-theory2.md","lastUpdated":1743653323544.1055}';var t={};const o=[a('<h2 id="_99-岛屿数量"><a class="header-anchor" href="#_99-岛屿数量" aria-hidden="true">#</a> 99. 岛屿数量</h2><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>题目描述：</p><p>给定一个由 1（陆地）和 0（水）组成的矩阵，你需要计算岛屿的数量。岛屿由水平方向或垂直方向上相邻的陆地连接而成，并且四周都是水域。你可以假设矩阵外均被水包围。</p><p>输入描述：</p><p>第一行包含两个整数 N, M，表示矩阵的行数和列数。</p><p>后续 N 行，每行包含 M 个数字，数字为 1 或者 0。</p><p>输出描述：</p><p>输出一个整数，表示岛屿的数量。如果不存在岛屿，则输出 0。</p><p>输入示例：</p><div class="language-text"><pre><code>4 5\n1 1 0 0 0\n1 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1\n</code></pre></div><p>输出示例：</p><p>3</p><p>提示信息</p><p><img src="https://file.kamacoder.com/pics/20240516111613.png" alt="alt"></p><p>根据测试案例中所展示，岛屿数量共有 3 个，所以输出 3。</p><p>数据范围：</p><ul><li>1 &lt;= N, M &lt;= 50</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>给定一个由&#39;1&#39;（陆地）和&#39;0&#39;（水）组成的二维网格，需要计算其中岛屿的数量。岛屿的定义是被水包围的、通过水平或垂直方向相邻连接的陆地区域</p><p>所有连在一起的&#39;1&#39;算作一个岛屿，而单独的&#39;1&#39;或者被&#39;0&#39;分隔开的&#39;1&#39;群各自算作不同的岛屿</p><p>好的，我现在要解决“岛屿数量”这个问题。首先，我得弄清楚题目要求。题目是给定一个由&#39;1&#39;（陆地）和&#39;0&#39;（水）组成的二维网格，需要计算其中岛屿的数量。岛屿的定义是被水包围的、通过水平或垂直方向相邻连接的陆地区域。也就是说，所有连在一起的&#39;1&#39;算作一个岛屿，而单独的&#39;1&#39;或者被&#39;0&#39;分隔开的&#39;1&#39;群各自算作不同的岛屿。</p><p>首先，我需要想怎么遍历这个二维网格。常见的做法是使用深度优先搜索（DFS）或者广度优先搜索（BFS）。这两种方法都能遍历整个网格，当遇到一个&#39;1&#39;时，就将所有与之相连的&#39;1&#39;都标记为已访问，这样就不会重复计算同一个岛屿。</p><p>比如，上述图片中，共有三个岛屿：</p><ul><li>左上角的四个&#39;1&#39;组成一个岛屿</li><li>中间的一个&#39;1&#39;是一个岛屿</li><li>右下角的两个&#39;1&#39;是第三个岛屿</li></ul><p>使用深搜或广搜：当遇到一个&#39;1&#39;时，计数器加一，再将所有与之相连的&#39;1&#39;都标记为已访问，这样就不会重复计算同一个岛屿</p><p><strong>方法思路</strong></p><ol><li>遍历网格：逐个检查每个格子</li><li>发现陆地：当遇到&#39;1&#39;时，表示发现一个新岛屿，计数器加 1</li><li>标记已访问：通过 DFS 将当前岛屿的所有相连陆地标记，当遇到已标记过的陆地节点和海洋节点直接跳过（避免重复计数）</li><li>递归边界：确保搜索时行和列不越界，且仅处理未被访问的陆地</li></ol><p>需要初始化地图，然后使用深度优先搜索（DFS）或广度优先搜索（BFS）来遍历</p><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">numIslands</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>grid<span class="token operator">?.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n\n  <span class="token keyword">const</span> rows <span class="token operator">=</span> grid<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> cols <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n\n  <span class="token keyword">const</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n  <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 用于标记哪些节点已经访问过，避免重复访问</span>\n\n  <span class="token keyword">let</span> isLandCount <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token comment">// 递归访问当前节点的所有相邻陆地节点</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 每次递归调用时，标记当前节点为已访问</span>\n    visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">]</span> <span class="token keyword">of</span> directions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> nextX <span class="token operator">=</span> dx <span class="token operator">+</span> x\n      <span class="token keyword">const</span> nextY <span class="token operator">=</span> dy <span class="token operator">+</span> y\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        nextX <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n        nextX <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span>\n        nextY <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n        nextY <span class="token operator">&lt;</span> cols <span class="token operator">&amp;&amp;</span>\n        <span class="token operator">!</span>visited<span class="token punctuation">[</span>nextX<span class="token punctuation">]</span><span class="token punctuation">[</span>nextY<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>\n        grid<span class="token punctuation">[</span>nextX<span class="token punctuation">]</span><span class="token punctuation">[</span>nextY<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;1&#39;</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">dfs</span><span class="token punctuation">(</span>nextX<span class="token punctuation">,</span> nextY<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        isLandCount<span class="token operator">++</span>\n        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> isLandCount\n<span class="token punctuation">}</span>\n</code></pre></div><p>ACM 格式</p><div class="language-js"><pre><code><span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;readline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdin <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 创建readline接口</span>\n<span class="token keyword">let</span> iter <span class="token operator">=</span> r1<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 创建异步迭代器</span>\n<span class="token keyword">const</span> <span class="token function-variable function">readline</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">await</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value\n\n<span class="token keyword">let</span> graph\n<span class="token keyword">let</span> <span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">M</span>\n<span class="token keyword">let</span> visited\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">const</span> dir <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// 读取输入，初始化地图</span>\n<span class="token keyword">const</span> <span class="token function-variable function">initGraph</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>\n  graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    line <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @description: 从节点x,y开始深度优先遍历\n * @param {*} graph 是地图，也就是一个二维数组\n * @param {*} visited 标记访问过的节点，不要重复访问\n * @param {*} x 表示开始搜索节点的下标\n * @param {*} y 表示开始搜索节点的下标\n * @return {*}\n */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">graph<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> nextx <span class="token operator">=</span> x <span class="token operator">+</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> nexty <span class="token operator">=</span> y <span class="token operator">+</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nextx <span class="token operator">&gt;=</span> <span class="token constant">N</span> <span class="token operator">||</span> nexty <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nexty <span class="token operator">&gt;=</span> <span class="token constant">M</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>nextx<span class="token punctuation">]</span><span class="token punctuation">[</span>nexty<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>nextx<span class="token punctuation">]</span><span class="token punctuation">[</span>nexty<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      visited<span class="token punctuation">[</span>nextx<span class="token punctuation">]</span><span class="token punctuation">[</span>nexty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> nextx<span class="token punctuation">,</span> nexty<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 读取输入，初始化地图</span>\n  <span class="token keyword">await</span> <span class="token function">initGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 统计岛屿数</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 标记已访问</span>\n        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n\n        <span class="token comment">// 遇到没访问过的陆地，+1</span>\n        result<span class="token operator">++</span>\n\n        <span class="token comment">// 深度优先遍历，将相邻陆地标记为已访问</span>\n        <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="_99-岛屿数量-广度优先搜索"><a class="header-anchor" href="#_99-岛屿数量-广度优先搜索" aria-hidden="true">#</a> 99. 岛屿数量 广度优先搜索</h2><p>将上述问题改为广搜，主要在于 bfs 函数的改动</p><p>广搜和深搜的核心目标是相同的：找到所有相连的陆地并标记为已访问</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">bfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>curX<span class="token punctuation">,</span> curY<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">]</span> <span class="token keyword">of</span> directions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> nextX <span class="token operator">=</span> curX <span class="token operator">+</span> dx\n      <span class="token keyword">const</span> nextY <span class="token operator">=</span> curY <span class="token operator">+</span> dy\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        nextX <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n        nextX <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span>\n        nextY <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n        nextY <span class="token operator">&lt;</span> cols <span class="token operator">&amp;&amp;</span>\n        <span class="token operator">!</span>visited<span class="token punctuation">[</span>nextX<span class="token punctuation">]</span><span class="token punctuation">[</span>nextY<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>\n        grid<span class="token punctuation">[</span>nextX<span class="token punctuation">]</span><span class="token punctuation">[</span>nextY<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;1&#39;</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nextX<span class="token punctuation">,</span> nextY<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        visited<span class="token punctuation">[</span>nextX<span class="token punctuation">]</span><span class="token punctuation">[</span>nextY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>bfs 函数用于从当前节点开始，广度优先搜索所有相邻的陆地节点</li><li>使用队列存储当前需要访问的节点</li><li>每次从队列中取出一个节点，检查其四个方向的邻接节点</li><li>如果邻接节点是未访问的陆地，将其加入队列并标记为已访问</li></ul><h3 id="bfs-和-dfs-代码区别"><a class="header-anchor" href="#bfs-和-dfs-代码区别" aria-hidden="true">#</a> bfs 和 dfs 代码区别</h3><p>以示例为例</p><ul><li><p>DFS：</p><ul><li>从起始点出发，优先沿着一个方向深入搜索，直到无法继续，再回溯到上一个节点</li><li>搜索路径：(0,0) → (0,1) → (1,1) → (1,0)</li></ul></li><li><p>BFS：</p><ul><li>从起始点出发，按层次逐步扩展搜索范围</li><li>搜索路径：(0,0) → (0,1) → (1,0) → (1,1)</li></ul></li></ul><h2 id="岛屿的最大面积"><a class="header-anchor" href="#岛屿的最大面积" aria-hidden="true">#</a> 岛屿的最大面积</h2><p>之前已经计算出岛屿数量，现在需要进一步找到其中最大的岛屿面积</p><p>可以在计算岛屿数量的基础上稍作调整，核心思路保持一致，主要新增面积统计功能</p><h3 id="与岛屿数量的差异"><a class="header-anchor" href="#与岛屿数量的差异" aria-hidden="true">#</a> 与岛屿数量的差异</h3><ol><li><p>新增面积统计：每次发现一个岛屿时，需计算其面积，并更新最大面积</p></li><li><p>逻辑调整</p><ul><li>初始化当前岛屿面积 count = 0</li><li>每扩展一个相邻陆地节点，面积加 1</li><li>完成一个岛屿的遍历后，比较并更新全局最大值</li></ul></li></ol><p>其余部分（如网格遍历、队列操作、边界检查、标记已访问节点）与原问题完全一致</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>grid <span class="token operator">||</span> grid<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n\n  <span class="token keyword">const</span> rows <span class="token operator">=</span> grid<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> cols <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 右</span>\n    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 下</span>\n    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 左</span>\n    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 上</span>\n  <span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> maxArea <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token comment">// 深度优先搜索函数</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">&gt;=</span> rows <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&gt;=</span> cols <span class="token operator">||</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n\n    grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 标记为已访问</span>\n    <span class="token keyword">let</span> area <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 当前节点的面积为 1</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">]</span> <span class="token keyword">of</span> directions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      area <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> dx<span class="token punctuation">,</span> y <span class="token operator">+</span> dy<span class="token punctuation">)</span> <span class="token comment">// 累加相邻陆地的面积</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> area\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 遍历整个网格</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> area <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment">// 计算当前岛屿的面积</span>\n        maxArea <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxArea<span class="token punctuation">,</span> area<span class="token punctuation">)</span> <span class="token comment">// 更新最大面积</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> maxArea\n<span class="token punctuation">}</span>\n</code></pre></div>',48)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
