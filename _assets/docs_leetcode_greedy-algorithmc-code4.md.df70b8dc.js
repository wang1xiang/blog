import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"跟着卡哥学算法Day 30：贪心算法part4","frontmatter":{"date":"2025-03-13","title":"跟着卡哥学算法Day 30：贪心算法part4","tags":["leetcode"],"describe":"贪心算法part4"},"headers":[{"level":2,"title":"452. 用最少数量的箭引爆气球 🌟🌟","slug":"_452-用最少数量的箭引爆气球-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":2,"title":"435. 无重叠区间 🌟🌟","slug":"_435-无重叠区间-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"763.划分字母区间 🌟🌟","slug":"_763-划分字母区间-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"}],"relativePath":"docs/leetcode/greedy-algorithmc-code4.md","lastUpdated":1742205571282.0386}';var p={};const o=[a('<h2 id="_452-用最少数量的箭引爆气球-🌟🌟"><a class="header-anchor" href="#_452-用最少数量的箭引爆气球-🌟🌟" aria-hidden="true">#</a> 452. 用最少数量的箭引爆气球 🌟🌟</h2><p><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p><p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p><p>给你一个数组 points ，其中 points[i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。</p><p>示例 1：</p><ul><li>输入：points = [[10,16],[2,8],[1,6],[7,12]]</li><li>输出：2</li><li>解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</li></ul><p>示例 2：</p><ul><li>输入：points = [[1,2],[3,4],[5,6],[7,8]]</li><li>输出：4</li></ul><p>示例 3：</p><ul><li>输入：points = [[1,2],[2,3],[3,4],[4,5]]</li><li>输出：2</li></ul><p>示例 4：</p><ul><li>输入：points = [[1,2]]</li><li>输出：1</li></ul><p>示例 5：</p><ul><li>输入：points = [[2,3],[2,3]]</li><li>输出：1</li></ul><p>提示：</p><ul><li>0 &lt;= points.length &lt;= 10^4</li><li>points[i].length == 2</li><li>-2^31 &lt;= xstart &lt; xend &lt;= 2^31 - 1</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>题意：有很多气球，每个气球占据的区间用 xstart 和 xend 表示。如果一支箭射到位置 x，那么所有 xstart ≤ x ≤ xend 的气球都会被引爆（<strong>如一个在[1,3]，另一个在[2,4]，那么射在 2 或者 3 的位置，可以同时引爆这两个</strong>）。问最少需要多少支箭才能把所有气球射爆。</p><p>如何使用最少的弓箭射爆所有气球？</p><ul><li><strong>局部最优：当气球重叠时，一起射穿</strong></li><li><strong>全局最优：射穿所有气球，用的弓箭最少</strong></li></ul><p><strong>为了让气球尽可能的重叠，需要对数组进行排序</strong></p><ol><li>按照起始位置从小到大排序</li><li>从前向后遍历，<strong>如果气球重叠了，重叠气球中右边边界的最小值 之间的区间一定需要一只弓箭</strong></li></ol><p><img src="/blog/_assets/greedy-algorithmc-code41.8933f614.png" alt="greedy-algorithmc-code41"></p><p>题解：</p><ol><li>按起始点从小到大排序</li><li>初始化弓箭数为 1（至少需要一支箭）</li><li>遍历气球，如果当前气球的起始点 &gt; 前一个气球的结束点；需要新增一支箭</li><li>如果不大于时，说明两个气球重叠了，合并区间，更新当前气球的结束点为当前气球结束点和前一个气球结束点的最小值</li></ol><p>假设输入为 [[10,16],[2,8],[1,6],[7,12]]：</p><ol><li>按起始点排序后得到 [[1,6], [2,8], [7,12], [10,16]]</li><li>从第 2 个气球起开始遍历气球</li><li>第 2 个气球的起始点 <code>2</code> 不大于 前一个气球的结束点 <code>6</code>，合并区间，更新当前气球的结束点为 <code>6</code>，即 <code>[2,6]</code></li><li>遍历第 3 个气球，起始点 <code>7</code> 大于 前一个气球的结束点 <code>6</code>，新增一支箭</li><li>遍历第 4 个气球，起始点 <code>10</code> 不于 前一个气球的结束点 <code>12</code>，合并区间</li><li>最终箭数为 2</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">findMinArrowShots</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">points</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 按气球的起始点生序排序</span>\n  points<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 初始化需要一只弓箭</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> points<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> point <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">const</span> prePoint <span class="token operator">=</span> points<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token comment">// 当前气球的起始点 &gt; 前一个气球的结束点：需要新增一支箭</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> prePoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token operator">++</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 否则合并区间，更新当前气球的结束点为最小的值</span>\n      point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prePoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_435-无重叠区间-🌟🌟"><a class="header-anchor" href="#_435-无重叠区间-🌟🌟" aria-hidden="true">#</a> 435. 无重叠区间 🌟🌟</h2><p><a href="https://leetcode.cn/problems/non-overlapping-intervals/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p><p>注意: 可以认为区间的终点总是大于它的起点。 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</p><p>示例 1:</p><ul><li>输入: [ [1,2], [2,3], [3,4], [1,3] ]</li><li>输出: 1</li><li>解释: 移除 [1,3] 后，剩下的区间没有重叠。</li></ul><p>示例 2:</p><ul><li>输入: [ [1,2], [1,2], [1,2] ]</li><li>输出: 2</li><li>解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</li></ul><p>示例 3:</p><ul><li>输入: [ [1,2], [2,3] ]</li><li>输出: 0</li><li>解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</li></ul><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p>类似 <a href="#452-%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83-">452. 用最少数量的箭引爆气球</a></p><p><strong>将移除区间的最小数量转换为保留区间的最大数量</strong></p><p>解题思路：</p><ol><li>按区间的起始位置从小到大排序</li><li>初始 count 为 1（至少保留第一个区间），end 记录当前区间左边界，初始化为最后一个区间的左边界</li><li>从后往前遍历：从倒数第二个区间开始遍历，若当前区间的右边界 &lt;= end，</li><li>返回结果：总区间数减去保留的区间数即为需要移除的最少数量</li></ol><p><strong>局部最优：倒序遍历优先选择左边界较大的区间，要求当前区间的右边界 ≤ 前一个选中区间的左边界</strong><strong>全局最优：移除区间数最小</strong></p><p>如：[[2,3], [4,6], [1,5], [7,8]]</p><ol><li>排序[[1,5], [2,3], [4,6], [7,8]]</li><li>end 记录当前区间左边界，初始为 7</li><li>遍历：倒数第二个元素是[4,6]，其右边界 <code>6</code> &lt;= end <code>7</code>，count++，end 调整为 4</li><li>倒数第三元素是[2,3]，右边界 <code>3</code> &lt;= end <code>4</code>， count++，end 调整为 2</li><li>第一个元素[1,5]，右边界 <code>5</code> &gt; end <code>2</code>，跳过</li><li>count=3，总长度 4-3=1。正确。</li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">eraseOverlapIntervals</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">intervals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 按左边界升序排序</span>\n  intervals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 记录最大非重叠区间数即保留区间</span>\n  <span class="token keyword">let</span> end <span class="token operator">=</span> intervals<span class="token punctuation">[</span>intervals<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 初始化为最后一个区间的左边界</span>\n  <span class="token comment">// 倒序遍历</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> intervals<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 当前区间的右边界 ≤ 前一个区间的左边界</span>\n      count<span class="token operator">++</span>\n      end <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 更新前一个区间的左边界</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 需移除的区间数 = 总区间数 - 非重叠区间数</span>\n  <span class="token keyword">return</span> intervals<span class="token punctuation">.</span>length <span class="token operator">-</span> count\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_763-划分字母区间-🌟🌟"><a class="header-anchor" href="#_763-划分字母区间-🌟🌟" aria-hidden="true">#</a> 763.划分字母区间 🌟🌟</h2><p><a href="https://leetcode.cn/problems/partition-labels/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p><p>示例：</p><ul><li>输入：S = &quot;ababcbacadefegdehijhklij&quot;</li><li>输出：[9,7,8] 解释： 划分结果为 &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;。 每个字母最多出现在一个片段中。 像 &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; 的划分是错误的，因为划分的片段数较少。</li></ul><p>提示：</p><ul><li>S 的长度在[1, 500]之间。</li><li>S 只包含小写字母 &#39;a&#39; 到 &#39;z&#39; 。</li></ul><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><p>如何将同一个字母都圈在同一个区间？</p><p>遍历字符串过程中，不断找每一个字母的边界，<strong>如果找到之前遍历过的所有字母的最远边界，说明这个边界就是分割点。</strong></p><ol><li>遍历字符串，记录每个字符最后一次出现的索引位置</li><li>初始化 start 和 end 为 0，表示当前子串的起始和结束位置</li><li>再次遍历字符串，不断更新结束位置 end 为当前字符的最后位置和当前 end 的最大值</li><li>当遍历到 end 时，表示当前子串可以分割，记录长度，重置 start</li></ol><p>返回结果：所有子串的长度列表即为最终结果。</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">partitionLabels</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> lastPos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 记录每个字符的最后出现位置</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">S</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    lastPos<span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    end <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前子串的起始和结束位置</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">S</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> lastPos<span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 更新当前子串的结束位置</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 当前遍历位置等于结束位置，分割子串</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 重置起始位置为下一个字符</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div>',65)];p.render=function(a,t,p,e,l,c){return n(),s("div",null,o)};export{t as __pageData,p as default};
