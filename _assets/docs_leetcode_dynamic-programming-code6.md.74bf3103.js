import{f as n,g as a,J as s}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 38：动态规划part6","frontmatter":{"date":"2025-03-21","title":"跟着卡哥学算法Day 38：动态规划part6","tags":["leetcode"],"describe":"动态规划part6"},"headers":[{"level":2,"title":"322. 零钱兑换 🌟🌟","slug":"_322-零钱兑换-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":3,"title":"注意","slug":"注意"},{"level":2,"title":"279.完全平方数 🌟🌟","slug":"_279-完全平方数-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":2,"title":"139.单词拆分 🌟🌟","slug":"_139-单词拆分-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":3,"title":"代码","slug":"代码-3"},{"level":2,"title":"01 背包对比完全背包","slug":"_01-背包对比完全背包"},{"level":3,"title":"01 背包问题","slug":"_01-背包问题"},{"level":3,"title":"完全背包问题","slug":"完全背包问题"},{"level":3,"title":"总结","slug":"总结"}],"relativePath":"docs/leetcode/dynamic-programming-code6.md","lastUpdated":1743134640802.3127}';var t={};const o=[s('<h2 id="_322-零钱兑换-🌟🌟"><a class="header-anchor" href="#_322-零钱兑换-🌟🌟" aria-hidden="true">#</a> 322. 零钱兑换 🌟🌟</h2><p><a href="https://leetcode.cn/problems/coin-change/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回  -1。</p><p>你可以认为每种硬币的数量是无限的。</p><p>示例  1：</p><ul><li>输入：coins = [1, 2, 5], amount = 11</li><li>输出：3</li><li>解释：11 = 5 + 5 + 1</li></ul><p>示例 2：</p><ul><li>输入：coins = [2], amount = 3</li><li>输出：-1</li></ul><p>示例 3：</p><ul><li>输入：coins = [1], amount = 0</li><li>输出：0</li></ul><p>示例 4：</p><ul><li>输入：coins = [1], amount = 1</li><li>输出：1</li></ul><p>示例 5：</p><ul><li>输入：coins = [1], amount = 2</li><li>输出：2</li></ul><p>提示：</p><ul><li>1 &lt;= coins.length &lt;= 12</li><li>1 &lt;= coins[i] &lt;= 2^31 - 1</li><li>0 &lt;= amount &lt;= 10^4</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p><strong>装满这个背包，最少物品是多少？</strong></p><p>题意可得：每种硬币数量是无限的，典型的完全背包问题</p><p>动规五部曲：</p><ol><li><p>确定 dp 数组及下标的含义</p><p>dp[j]凑足总额为 j 所使用的最少钱币个数</p></li><li><p>确定递推公式</p><ul><li>凑足总额为 j - coins[i]的钱币最少个数为 dp[j - coins[i]]</li><li>所以凑足 dp[j] 通过 dp[j - coins[i]] + 1（只需要一个钱币 coins[i]）</li><li>dp[j]要取所有的 dp[j - coins[i]] + 1 中最小的</li></ul><div class="language-js"><pre><code><span class="token comment">// 递推公式为</span>\ndp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>dp 数组初始化</p><ul><li><code>dp[0] = 0</code>，凑足总额为 0 的钱币最少个数为 0</li><li><code>dp[j] = Infinity</code>, 其余位置必须初始化为最大值，否则在 Math.min(dp[j], dp[j - coins[i]] + 1)时会被覆盖</li></ul></li><li><p>确定遍历顺序</p><ul><li>本题求组合数，所以外层遍历物品，内层遍历背包</li><li>完全背包问题：内层 for 循环正序遍历</li></ul></li><li><p>举例推导 dp 数组</p><p>以 coins = [1, 2, 5]，amount = 5 为例：</p><div class="language-js"><pre><code>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n</code></pre></div></li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">coinChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>amount<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>\n\n  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> coin <span class="token operator">=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> coin<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coin<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="注意"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ul><li><strong>如果求组合数就是外层 for 循环遍历物品，内层 for 遍历背包。</strong></li><li><strong>如果求排列数就是外层 for 遍历背包，内层 for 循环遍历物品。</strong></li></ul><p>如零钱兑换：coins = [1, 2], amount = 3</p><ul><li>求<strong>组合数</strong>：1+1+1 和 1+2（共 2 种，顺序无关）</li><li>求<strong>排列数</strong>：1+1+1、1+2、2+1（共 3 种，顺序不同视为不同方案）</li></ul><ol><li><p>求组合数（外层遍历物品，内层遍历背包）</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> coin <span class="token operator">=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> coin<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coin<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>外层遍历硬币：确保每个硬币的处理是独立的</li><li>内层遍历金额：更新金额时只基于当前及之前处理过的硬币</li></ul><p>例如，计算 dp[3] 时：</p><ul><li>处理硬币 2 时，dp[3] 通过 1+2 更新</li><li>硬币的顺序固定（始终先处理 1 后处理 2），不会出现 2+1 的情况</li><li>结果为组合数 2</li></ul></li><li><p>求排列数（外层遍历背包，内层遍历物品）</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> coin <span class="token operator">=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> coin<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coin<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>外层遍历金额：对每个金额 j，考虑所有可能的硬币</li><li>内层遍历硬币：允许不同顺序的组合</li></ul><p>例如，计算 dp[3] 时：</p><ul><li>使用 1：继承 dp[2]（包含 1+1 和 2）</li><li>使用 2：继承 dp[1]（包含 1）</li><li>此时，1+2 和 2+1 被视为不同方案，结果为排列数 3</li></ul></li></ol><h2 id="_279-完全平方数-🌟🌟"><a class="header-anchor" href="#_279-完全平方数-🌟🌟" aria-hidden="true">#</a> 279.完全平方数 🌟🌟</h2><p><a href="https://leetcode.cn/problems/perfect-squares/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定正整数  n，找到若干个完全平方数（比如  1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。</p><p>给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。</p><p>完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。</p><p>示例  1：</p><ul><li>输入：n = 12</li><li>输出：3</li><li>解释：12 = 4 + 4 + 4</li></ul><p>示例 2：</p><ul><li>输入：n = 13</li><li>输出：2</li><li>解释：13 = 4 + 9</li></ul><p>提示：</p><ul><li>1 &lt;= n &lt;= 10^4</li></ul><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p>题意：<strong>完全平方数就是物品（可无限使用），凑成正整数 n 就是背包，问凑满这个背包最少有多少物品</strong></p><p>动规五部曲：</p><ol><li><p>确定 dp 数组及下标的含义</p><p>dp[j]表示和为 j 的完全平方数的最少数量为 dp[j]</p></li><li><p>确定递推公式</p><ul><li>dp[j]由 <code>dp[j - i * i]</code> 推出，<code>dp[j - i * i] + 1</code> 就可以凑出 dp[j]</li><li>需要选择最小的 dp[j]</li></ul><div class="language-js"><pre><code>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> i <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>dp 数组初始化</p><ul><li>根据递推公式，需要初始化 <code>dp[0] = 0</code>（和为 0 的完全平方数的最小数量），这样才能推导出其他</li><li>其他位置初始化为 <code>Infinity</code></li></ul></li><li><p>确定遍历顺序</p><p>先遍历物品，再遍历背包</p></li><li><p>举例推导 dp 数组</p><p>假设 n = 5：</p><div class="language-js"><pre><code>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n</code></pre></div></li></ol><h4 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h4><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">numSquares</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>\n  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> i <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_139-单词拆分-🌟🌟"><a class="header-anchor" href="#_139-单词拆分-🌟🌟" aria-hidden="true">#</a> 139.单词拆分 🌟🌟</h2><p><a href="https://leetcode.cn/problems/word-break/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定  s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p>说明：</p><p>拆分时可以重复使用字典中的单词。</p><p>你可以假设字典中没有重复的单词。</p><p>示例 1：</p><ul><li>输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]</li><li>输出: true</li><li>解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</li></ul><p>示例 2：</p><ul><li>输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]</li><li>输出: true</li><li>解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。</li><li>注意你可以重复使用字典中的单词。</li></ul><p>示例 3：</p><ul><li>输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</li><li>输出: false</li></ul><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><p><strong>单词类比为物品，字符串 s 就是背包，单词能否组成字符串，即物品能不能把背包装满。</strong></p><p>动规五部曲：</p><ol><li><p>确定 dp 数组及下标的含义</p><p>dp[i]：字符串长度为 i 时，dp[i]为 true，表示可以拆分为一个或多个在字典中出现的单词</p></li><li><p>确定递推公式</p></li><li><p>初始化 dp 数组</p></li><li><p>确定遍历顺序</p></li><li><p>举例推导 dp 数组</p></li></ol><h3 id="代码-3"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code>\n</code></pre></div><h2 id="_01-背包对比完全背包"><a class="header-anchor" href="#_01-背包对比完全背包" aria-hidden="true">#</a> 01 背包对比完全背包</h2><h3 id="_01-背包问题"><a class="header-anchor" href="#_01-背包问题" aria-hidden="true">#</a> 01 背包问题</h3><h4 id="定义"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h4><ul><li>特点：每个物品只能选择 0 次或 1 次</li><li>问题模型：在背包容量限制下，求最大价值或组合数</li><li>状态定义：<code>dp[j]</code> 表示容量为 <code>j</code> 的背包能装的最大价值（或组合数）</li></ul><h4 id="状态转移方程"><a class="header-anchor" href="#状态转移方程" aria-hidden="true">#</a> 状态转移方程</h4><div class="language-js"><pre><code>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 求最大价值</span>\n<span class="token comment">// 或</span>\ndp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">// 求组合数（如目标和问题）</span>\n</code></pre></div><h4 id="初始化"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h4><ul><li>求最大价值：<code>dp</code> 数组初始化为 0</li><li>求组合数：<code>dp[0] = 1</code>（表示空背包有一种方式），其余初始化为 0</li></ul><h4 id="遍历顺序"><a class="header-anchor" href="#遍历顺序" aria-hidden="true">#</a> 遍历顺序</h4><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span>物品 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>容量 j <span class="token operator">=</span> maxWeight<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 倒序遍历</span>\n    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="典型例题"><a class="header-anchor" href="#典型例题" aria-hidden="true">#</a> 典型例题</h4><ul><li><a href="https://leetcode.com/problems/partition-equal-subset-sum/" target="_blank" rel="noopener noreferrer">分割等和子集</a></li><li><a href="https://leetcode.com/problems/target-sum/" target="_blank" rel="noopener noreferrer">目标和</a></li></ul><h3 id="完全背包问题"><a class="header-anchor" href="#完全背包问题" aria-hidden="true">#</a> 完全背包问题</h3><h4 id="定义-2"><a class="header-anchor" href="#定义-2" aria-hidden="true">#</a> 定义</h4><ul><li>特点：每个物品可以选无限次</li><li>问题模型：在背包容量限制下，求装满背包的组合数或最小物品数</li><li>状态定义：<code>dp[j]</code> 表示容量为 <code>j</code> 的背包的组合数或最小物品数</li></ul><h4 id="状态转移方程-2"><a class="header-anchor" href="#状态转移方程-2" aria-hidden="true">#</a> 状态转移方程</h4><div class="language-js"><pre><code>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 求最大价值</span>\ndp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">// 求组合数（如零钱兑换 II）</span>\ndp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 求最小物品数（如零钱兑换）</span>\n</code></pre></div><h4 id="初始化-2"><a class="header-anchor" href="#初始化-2" aria-hidden="true">#</a> 初始化</h4><ul><li>求组合数：<code>dp[0] = 1</code>，其余初始化为 0</li><li>求最小物品数：<code>dp[0] = 0</code>，其余初始化为 <code>Infinity</code></li></ul><h4 id="遍历顺序-2"><a class="header-anchor" href="#遍历顺序-2" aria-hidden="true">#</a> 遍历顺序</h4><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span>物品 i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>容量 j <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> maxWeight<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 正序遍历</span>\n    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 组合数</span>\n    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最小物品数</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="典型例题-2"><a class="header-anchor" href="#典型例题-2" aria-hidden="true">#</a> 典型例题</h4><ul><li><a href="https://leetcode.com/problems/coin-change-ii/" target="_blank" rel="noopener noreferrer">零钱兑换 II</a></li><li><a href="https://leetcode.com/problems/perfect-squares/" target="_blank" rel="noopener noreferrer">完全平方数</a></li></ul><h3 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>01 背包：物品唯一，倒序遍历容量，解决“是否选择”的问题</li><li>完全背包：物品无限，正序遍历容量，解决“多次选择”的问题</li><li>核心技巧：根据问题特点选择遍历顺序，区分组合数或最值问题的初始化方式</li></ul>',91)];t.render=function(s,p,t,e,c,l){return n(),a("div",null,o)};export{p as __pageData,t as default};
