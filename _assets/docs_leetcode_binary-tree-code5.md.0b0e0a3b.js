import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 18：二叉树常见题目6","frontmatter":{"date":"2025-03-01","title":"跟着卡哥学算法Day 18：二叉树常见题目6","tags":["leetcode"],"describe":"二叉树常见题目6"},"headers":[{"level":2,"title":"530.二叉搜索树的最小绝对差 🌟","slug":"_530-二叉搜索树的最小绝对差-🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":2,"title":"501.二叉搜索树中的众数 🌟","slug":"_501-二叉搜索树中的众数-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":2,"title":"236. 二叉树的最近公共祖先 🌟🌟","slug":"_236-二叉树的最近公共祖先-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"}],"relativePath":"docs/leetcode/binary-tree-code5.md","lastUpdated":1742891324508.5225}';var t={};const o=[a('<h2 id="_530-二叉搜索树的最小绝对差-🌟"><a class="header-anchor" href="#_530-二叉搜索树的最小绝对差-🌟" aria-hidden="true">#</a> 530.二叉搜索树的最小绝对差 🌟</h2><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p><p>示例 ：</p><p><img src="/blog/_assets/minimum-difference.bbed9965.png" alt="minimum-difference"></p><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><ol><li>利用中序遍历，得到一个有序数组</li><li>求有序数组，相邻元素的最小差值</li></ol><p>时间复杂度和空间复杂度都是 O(n)</p><p>优化： 不需要存储整个数组，而是在中序遍历的过程中，记录前一个节点的值，然后每次计算当前节点与前一个节点的差值，并维护一个最小值</p><h4 id="递归"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h4><p>递归三部曲：</p><ol><li><p>明确递归函数的参数和返回值</p><ul><li>参数 1：根节点</li><li>返回值：不需要返回值，实时更新最小值</li></ul></li><li><p>明确终止条件</p><ul><li>节点不存在时，终止</li></ul></li><li><p>确定单层递归逻辑</p><ul><li><p>递归左子树</p></li><li><p>处理中间节点逻辑</p><div class="language-js"><pre><code><span class="token comment">// 前一个节点值</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  minDiff <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minDiff<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val <span class="token operator">-</span> prev<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nprev <span class="token operator">=</span> node<span class="token punctuation">.</span>val\n</code></pre></div></li><li><p>递归右子树</p></li></ul></li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">getMinimumDifference</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> minDiff <span class="token operator">=</span> <span class="token number">Infinity</span>\n  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> minDiff <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minDiff<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val <span class="token operator">-</span> prev<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    prev <span class="token operator">=</span> root\n    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> minDiff\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="迭代"><a class="header-anchor" href="#迭代" aria-hidden="true">#</a> 迭代</h4><ul><li>初始化战，先将所有左子节点入栈</li><li>依次弹出节点处理，处理完当前节点后转向右子树</li><li>同样维护 prev 和 minDiff，实时计算相邻节点差值</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">getMinimumDifference</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> curr <span class="token operator">=</span> root\n  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> minDiff <span class="token operator">=</span> <span class="token number">Infinity</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span>\n      curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>left\n    <span class="token punctuation">}</span>\n    curr <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      minDiff <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minDiff<span class="token punctuation">,</span> curr<span class="token punctuation">.</span>val <span class="token operator">-</span> prev<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    prev <span class="token operator">=</span> curr<span class="token punctuation">.</span>val\n    curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>right\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> minDiff\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_501-二叉搜索树中的众数-🌟"><a class="header-anchor" href="#_501-二叉搜索树中的众数-🌟" aria-hidden="true">#</a> 501.二叉搜索树中的众数 🌟</h2><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p><p>假定 BST 有如下定义：</p><ul><li>结点左子树中所含结点的值小于等于当前结点的值</li><li>结点右子树中所含结点的值大于等于当前结点的值</li><li>左子树和右子树都是二叉搜索树</li></ul><p>例如：</p><p>给定 BST [1,null,2,2],</p><div class="language-js"><pre><code><span class="token comment">//       1</span>\n<span class="token comment">//        \\</span>\n<span class="token comment">//        2</span>\n<span class="token comment">//       /</span>\n<span class="token comment">//      2</span>\n</code></pre></div><p>返回[2].</p><p>提示：如果众数超过 1 个，不需考虑输出顺序</p><p>进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</p><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><h4 id="递归-2"><a class="header-anchor" href="#递归-2" aria-hidden="true">#</a> 递归</h4><p>如果不是二叉搜索树，遍历树节点，用 map 统计频率</p><p>如果是二叉搜索树，中序遍历时统计当前值的出现次数，每访问一个节点，比较节点值和 currentVal。如果相同，currentCount 加 1；否则，重置 currentVal 和 currentCount 为 1</p><p>递归三部曲：</p><ol><li><p>确定递归函数的参数和返回值</p><ul><li>参数：根节点</li><li>返回值：不需要</li></ul></li><li><p>确定终止条件</p><p>遇到空节点返回</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>\n</code></pre></div></li><li><p>确定单层递归逻辑</p><ul><li>递归处理左子树</li><li>中间节点处理逻辑 <ul><li>当前值 currentVal 等于 root.val 时，当前节点的频率 currentCount++</li><li>否则重置 currentCount=1，currentVal=root.val</li><li></li><li>比较当前节点的频率和最大频率 maxCount <ul><li>相同，将当前节点加入结果数组；</li><li>大于最大频率，更新最大频率和结果数组</li></ul></li></ul></li><li>递归处理右子树</li></ul></li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">findMode</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> maxCount <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> currentVal <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> currentCount <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">inOrderTraverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">===</span> currentVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      currentCount<span class="token operator">++</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      currentVal <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token comment">// 发现新数值</span>\n      currentCount <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 重置计数器</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">&gt;</span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      maxCount <span class="token operator">=</span> currentCount <span class="token comment">// 刷新最高纪录</span>\n      result <span class="token operator">=</span> <span class="token punctuation">[</span>currentVal<span class="token punctuation">]</span> <span class="token comment">// 清空旧结果</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">===</span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentVal<span class="token punctuation">)</span> <span class="token comment">// 并列众数加入</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="迭代-2"><a class="header-anchor" href="#迭代-2" aria-hidden="true">#</a> 迭代</h4><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">findMode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> currentVal <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> currentCount <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> maxCount <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> node <span class="token operator">=</span> root\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 深入左子树</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left\n    <span class="token punctuation">}</span>\n\n    node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 取出当前节点</span>\n\n    <span class="token comment">// 统计频率</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">===</span> currentVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      currentCount<span class="token operator">++</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      currentVal <span class="token operator">=</span> node<span class="token punctuation">.</span>val\n      currentCount <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 更新结果</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">&gt;</span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      maxCount <span class="token operator">=</span> currentCount\n      result <span class="token operator">=</span> <span class="token punctuation">[</span>currentVal<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">===</span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentVal<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 转向右子树</span>\n    node <span class="token operator">=</span> node<span class="token punctuation">.</span>right\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_236-二叉树的最近公共祖先-🌟🌟"><a class="header-anchor" href="#_236-二叉树的最近公共祖先-🌟🌟" aria-hidden="true">#</a> 236. 二叉树的最近公共祖先 🌟🌟</h2><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]</p><p>示例:</p><div class="language-js"><pre><code><span class="token comment">//        3</span>\n<span class="token comment">//       / \\</span>\n<span class="token comment">//      5   1</span>\n<span class="token comment">//     / \\ / \\</span>\n<span class="token comment">//    6  2 0 8</span>\n<span class="token comment">//      / \\</span>\n<span class="token comment">//     7  4</span>\n</code></pre></div><p>示例 1: 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 输出: 3 解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</p><p>示例  2: 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 输出: 5 解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</p><p>说明:</p><ul><li>所有节点的值都是唯一的。</li><li>p、q 为不同节点且均存在于给定的二叉树中</li></ul><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><p><strong>二叉树中两个节点的公共祖先可能有多个（比如，根节点肯定是所有节点的公共祖先。），但最近的那个就是离他们最近的共同父节点。</strong></p><p>采用后序遍历</p><h4 id="递归-3"><a class="header-anchor" href="#递归-3" aria-hidden="true">#</a> 递归</h4><p>递归三部曲：</p><ol><li><p>确定递归函数的参数和返回值</p><ul><li>参数 1：根节点</li><li>参数 2：p</li><li>参数 3：q</li><li>返回值：找到 p 或 q 就返回</li></ul></li><li><p>确定终止条件</p><p>如果 root 为 null 或者找到数值了，返回 root</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> node <span class="token operator">===</span> q <span class="token operator">||</span> root <span class="token operator">===</span> p<span class="token punctuation">)</span> <span class="token keyword">return</span> root\n</code></pre></div></li><li><p>确定单层递归逻辑</p><ul><li>递归遍历左子树</li><li>递归遍历右子树</li><li>处理中间逻辑 <ul><li>如果左右都不为 null，则说明 q 和 p 分别在左子树和右子树中找到了，当前 root 节点就是要找的最近公共祖先</li><li>如果单侧找到目标，则返回找到结果</li></ul></li></ul></li></ol><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 递归终止条件：空节点或找到目标节点</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> root <span class="token operator">===</span> p <span class="token operator">||</span> root <span class="token operator">===</span> q<span class="token punctuation">)</span> <span class="token keyword">return</span> root\n\n  <span class="token comment">// 递归查找左右子树</span>\n  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>\n\n  <span class="token comment">// 情况判断</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> root <span class="token comment">// 当前节点为LCA</span>\n  <span class="token keyword">return</span> left <span class="token operator">||</span> right <span class="token comment">// 返回非空子节点</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',57)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
