import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"基于 Vite 的组件库工程化实战","frontmatter":{"date":"2022-08-17","title":"基于 Vite 的组件库工程化实战","tags":["vite"],"describe":"跟着然叔一起学习组件库的搭建"},"headers":[{"level":2,"title":"vite搭建开发环境","slug":"vite搭建开发环境"},{"level":3,"title":"包管理工具","slug":"包管理工具"},{"level":3,"title":"开发Vue组件","slug":"开发vue组件"},{"level":3,"title":"JSX组件","slug":"jsx组件"},{"level":3,"title":"库文件封装","slug":"库文件封装"}],"relativePath":"docs/vite/componentLibrary.md","lastUpdated":1742819970887.5364}';var p={};const o=[a('<h2 id="vite搭建开发环境"><a class="header-anchor" href="#vite搭建开发环境" aria-hidden="true">#</a> vite搭建开发环境</h2><h3 id="包管理工具"><a class="header-anchor" href="#包管理工具" aria-hidden="true">#</a> 包管理工具</h3><ul><li><p>pnpm优势</p><ol><li>优秀的管理机制，安装依赖迅速且节省空间 当使用npm或者yarn时，多个项目依赖同一个包，每个项目都会创建一次，而pnpm，依赖项将存储在一个内容可寻址的仓库中，所有文件都会从同一位置创建硬链接，不会占用额外的磁盘空间，允许跨项目共享同一版本依赖。</li><li>pnpm拥有良好的workspace功能可以很好完成monorepo风格的项目管理 pnpm内置了对monorepo的支持，只需在工作空间的根目录创建pnpm-workspace.yaml和.npmrc配置文件，同时还支持多种配置，相比较lerna和yarn workspace，pnpm解决monorepo的同时，也解决了传统方案引入的问题。</li></ol></li><li><p>项目搭建步骤</p><ol><li>使用pnpm初始化项目</li></ol><div class="language-csharp"><pre><code>pnpm init\n</code></pre></div><ol start="2"><li>安装vite作为开发工具</li></ol><div class="language-kotlin"><pre><code>pnpm i <span class="token label symbol">vite@</span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">7</span> <span class="token operator">-</span>D\n</code></pre></div><ol start="3"><li>创建index.html用于测试</li></ol></li></ul><h3 id="开发vue组件"><a class="header-anchor" href="#开发vue组件" aria-hidden="true">#</a> 开发Vue组件</h3><ul><li><p>安装vue3.0</p><div class="language-kotlin"><pre><code>pnpm i <span class="token label symbol">vue@</span><span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">37</span>\n</code></pre></div></li><li><p>创建index.ts，并在index.html中引入</p></li><li><p>创建button/index.tsx用于创建button组件</p></li><li><p>vue3.0默认不支持模板编译，所以不能使用template语法，需要安装plugin-vue插件以支持单文件组件的编译</p><ol><li><p>安装vite的vue插件</p><div class="language-kotlin"><pre><code>pnpm i <span class="token label symbol">@vitejs</span><span class="token operator">/</span>plugin<span class="token operator">-</span>vue <span class="token operator">-</span>D\n</code></pre></div></li><li><p>添加vite.config.ts，配置plugin</p><div class="language-ts"><pre><code><span class="token comment">// vite.config.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-vue&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// https://vitejs.dev/config/</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>创建vue组件测试 引用时如果不添加模块类型定义，会导致引入vue组件时报错</p><div class="language-ts"><pre><code><span class="token comment">// src/shims-vue.d.ts</span>\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*.vue&quot;</span> <span class="token punctuation">{</span>\n <span class="token keyword">import</span> <span class="token punctuation">{</span> DefineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n <span class="token keyword">const</span> component<span class="token operator">:</span> DefineComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n <span class="token keyword">export</span> <span class="token keyword">default</span> component<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol></li></ul><h3 id="jsx组件"><a class="header-anchor" href="#jsx组件" aria-hidden="true">#</a> JSX组件</h3><p>想要支持JSX语法，就必须通过babel转义工具的支持</p><ul><li>安装插件</li></ul><div class="language-kotlin"><pre><code>pnpm i <span class="token label symbol">@vitejs</span><span class="token operator">/</span>plugin<span class="token operator">-</span>vue<span class="token operator">-</span><span class="token label symbol">jsx@</span><span class="token string-literal singleline"><span class="token string">&quot;2.0.0&quot;</span></span> <span class="token operator">-</span>D\n</code></pre></div><ul><li><p>配置vite.config.ts，添加plugins的JSX插件</p></li><li><p>直接使用jsx语法会报错，找不到名称“React”，这是不支持JSX语法造成的，而不是需要安装React，只需要配置tsconfig.json对jsx语法的支持</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">/* 生成相关的 &#39;.d.ts&#39; 文件。 */</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;declarationDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/types&quot;</span> <span class="token comment">/* &#39;.d.ts&#39; 文件输出目录 */</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;preserve&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./**/*.*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./shims-vue.d.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token string">&quot;true&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h3 id="库文件封装"><a class="header-anchor" href="#库文件封装" aria-hidden="true">#</a> 库文件封装</h3><p>一般像Element这种组件库都支持两种方式引入组件</p><ul><li><p>完整引入，以vue插件的形式</p><div class="language-ts"><pre><code><span class="token keyword">import</span> Element <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span>\n\n<span class="token comment">// 完整引入</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  Select<span class="token punctuation">,</span>\n  Button\n  <span class="token comment">// ...</span>\n\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span>\n\n<span class="token comment">// 按需引入</span>\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>Select<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Select<span class="token punctuation">)</span>\n</code></pre></div></li><li><p>按需引入，导出单个文件，使用<code>vue.component</code>注册</p></li></ul><p>所以组件库需要包含两个要求：</p><ol><li>默认导出为Vue插件</li><li>每个组件可以单独导出</li></ol><h4 id="封装过程"><a class="header-anchor" href="#封装过程" aria-hidden="true">#</a> 封装过程</h4><ol><li><p>设计入口</p><ul><li>导出全部组件</li><li>实现一个Vue插件，插件种编写install方法，将所有组件安装到vue实例中</li></ul><div class="language-ts"><pre><code><span class="token comment">// src/entry.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> MyButton <span class="token keyword">from</span> <span class="token string">&#39;./button&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> SFCButton <span class="token keyword">from</span> <span class="token string">&#39;./button/SFCButton.vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> JSXButton <span class="token keyword">from</span> <span class="token string">&#39;./button/JSXButton&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 导出单独组件 以支持按需引入</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> MyButton<span class="token punctuation">,</span> SFCButton<span class="token punctuation">,</span> JSXButton <span class="token punctuation">}</span>\n\n<span class="token comment">// 编写一个插件，实现一个install方法</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>MyButton<span class="token punctuation">.</span>name<span class="token punctuation">,</span> MyButton<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>SFCButton<span class="token punctuation">.</span>name<span class="token punctuation">,</span> SFCButton<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>JSXButton<span class="token punctuation">.</span>name<span class="token punctuation">,</span> JSXButton<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>配置vite.config.ts，以支持库文件的封装</p><div class="language-ts"><pre><code> <span class="token keyword">const</span> rollupOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n\n   external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vue-router&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n   output<span class="token operator">:</span> <span class="token punctuation">{</span>\n     globals<span class="token operator">:</span> <span class="token punctuation">{</span>\n       vue<span class="token operator">:</span> <span class="token string">&quot;Vue&quot;</span><span class="token punctuation">,</span>\n     <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\n   <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  \n\n   <span class="token comment">// 添加库模式配置</span>\n\n   build<span class="token operator">:</span> <span class="token punctuation">{</span>\n     rollupOptions<span class="token punctuation">,</span>\n     minify<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>\n     lib<span class="token operator">:</span> <span class="token punctuation">{</span>\n       entry<span class="token operator">:</span> <span class="token string">&quot;./src/entry.ts&quot;</span><span class="token punctuation">,</span>\n       name<span class="token operator">:</span> <span class="token string">&quot;SmartyUI&quot;</span><span class="token punctuation">,</span>\n       fileName<span class="token operator">:</span> <span class="token string">&quot;smarty-ui&quot;</span><span class="token punctuation">,</span>\n       <span class="token comment">// 导出模块格式</span>\n       formats<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;esm&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;umd&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;iife&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n     <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre></div></li><li><p>package.json中添加build命令，打包库文件</p></li><li><p>引入在demo文件中进行测试</p></li></ol>',17)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
