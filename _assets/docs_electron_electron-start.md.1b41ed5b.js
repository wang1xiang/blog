import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"Electron基础及常用到的点","frontmatter":{"date":"2023-06-01","title":"Electron基础及常用到的点","tags":["electron"],"describe":"electron-start"},"headers":[{"level":2,"title":"介绍","slug":"介绍"},{"level":2,"title":"Electron 的工作流程","slug":"electron-的工作流程"},{"level":3,"title":"主进程","slug":"主进程"},{"level":3,"title":"渲染进程","slug":"渲染进程"},{"level":3,"title":"Preload 脚本","slug":"preload-脚本"},{"level":3,"title":"进程间通信 IPC","slug":"进程间通信-ipc"},{"level":2,"title":"两种进程都可以使用的模块","slug":"两种进程都可以使用的模块"},{"level":3,"title":"Shell","slug":"shell"},{"level":2,"title":"Electron 环境搭建","slug":"electron-环境搭建"},{"level":2,"title":"打包","slug":"打包"},{"level":3,"title":"package","slug":"package"},{"level":3,"title":"make","slug":"make"},{"level":3,"title":"publish","slug":"publish"},{"level":2,"title":"为什么主进程到渲染进程没有双向通信","slug":"为什么主进程到渲染进程没有双向通信"},{"level":2,"title":"调试主进程代码","slug":"调试主进程代码"},{"level":2,"title":"如何添加 Vue.js devTools 等浏览器插件","slug":"如何添加-vue-js-devtools-等浏览器插件"},{"level":3,"title":"使用 electron-devtools-installer 安装浏览器插件","slug":"使用-electron-devtools-installer-安装浏览器插件"},{"level":3,"title":"手动加载浏览器插件","slug":"手动加载浏览器插件"}],"relativePath":"docs/electron/electron-start.md","lastUpdated":1714992260220.0205}';var t={};const o=[a('<h2 id="介绍"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>Electron 是构建桌面应用程序的框架，将 Chromium（支持最新特性的浏览器）和 Node.js 整合到一个运行环境之中，允许我们使用 JavaScript、HTML 和 CSS 来构建桌面运行程序，并且可以使用它所提供的 API 去访问 Windows、MacOS 或 Linux 上的操作系统功能，集成了跨平台的 Native 方案与操作系统进行通信，如操作系统的系统通知等，最终生成一个跨平台并且兼容性极好的桌面应用。</p><h2 id="electron-的工作流程"><a class="header-anchor" href="#electron-的工作流程" aria-hidden="true">#</a> Electron 的工作流程</h2><p>Electron 继承 Chromium 的多进程架构，Chrome 页签、扩展等都有自己的渲染进程，避免单进程崩溃不影响整个浏览器，浏览器控制这些标签页的渲染进程，以及整个应用程序的生命周期。</p><p>Electron 类似于上述 Chrome 的架构，包含主进程 Main Process 和渲染进程 Renderer Process，类似于 Chrome 的浏览器和渲染进程。</p><h3 id="主进程"><a class="header-anchor" href="#主进程" aria-hidden="true">#</a> 主进程</h3><ul><li><p>每当启动一个 App 时，就会启动一个主进程。</p></li><li><p>每个 Electron 应用都有且只能有一个单一的主进程，作为应用程序的入口，对应 package.json 文件中的 <code>main</code> 属性。</p></li><li><p>主进程运行在 Node 环境，可以调用任何 node 模块、操作本地文件等。</p></li><li><p>只有主进程能够操作 Native API。</p></li><li><p>管理所有的窗口和 WebContents，以及管理应用程序的生命周期。</p></li><li><p>主进程创建窗口，通过窗口加载界面，生成渲染进程 Renderer Process</p></li></ul><h4 id="窗口管理"><a class="header-anchor" href="#窗口管理" aria-hidden="true">#</a> 窗口管理</h4><p>主进程创建完毕后，会在其内部创建一个或多个 <a href="https://www.electronjs.org/zh/docs/latest/api/browser-window" target="_blank" rel="noopener noreferrer">BrowserWindow</a> 模块，创建和管理应用程序窗口。</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> BrowserWindow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">// x y 用于设置窗口显示的位置</span>\n  <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 默认情况下创建一个窗口对象之后就会显示，设置为false 就不会显示了</span>\n  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token comment">// 设置窗口的宽高</span>\n  <span class="token literal-property property">maxHeight</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">maxWidth</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">minHeight</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">minWidth</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token comment">// 可以通过 min max 来设置当前应用窗口的最大和最小尺寸</span>\n  <span class="token literal-property property">resizable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许缩放应用的窗口大小</span>\n  <span class="token literal-property property">frame</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 用于自定义 menu ，设置为 false 可以将默认的菜单栏隐藏</span>\n  <span class="token literal-property property">autoHideMenuBar</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动隐藏菜单栏</span>\n  <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">&#39;logo.ico&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 设置一个图片路径，可以自定义当前应用的显示图标</span>\n  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;测试&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 自定义当前应用的显示标题</span>\n  <span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">webviewTag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">preload</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;preload.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nwin<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">&#39;https://github.com&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li><p>优雅显示窗口</p><p>通过设置 show 属性为 false，可以隐藏窗口，然后再通过 win.show() 方法显示窗口，参考<a href="https://www.electronjs.org/zh/docs/latest/api/browser-window#%E4%BC%98%E9%9B%85%E5%9C%B0%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3" target="_blank" rel="noopener noreferrer">优雅地显示窗口</a>。</p></li><li><p>Node.js 集成</p><p>通过设置 webPreferences 可以在渲染进程中使用 Node.js API</p><div class="language-js"><pre><code><span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 用于控制窗口加载的网页是否集成 node.js 环境</span>\n  <span class="token literal-property property">nodeIntegration</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">enableRemoteModule</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>此时想要在渲染进程中创建窗口，可以使用 electron 的 remote 进行创建：</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> remote <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>\n\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> oBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span>\n  oBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> indexMin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">remote<span class="token punctuation">.</span>BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    indexMin<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>出于安全考虑，<strong><a href="https://www.electronjs.org/zh/docs/latest/tutorial/security#2-%E4%B8%8D%E8%A6%81%E4%B8%BA%E8%BF%9C%E7%A8%8B%E5%86%85%E5%AE%B9%E5%90%AF%E7%94%A8-nodejs-%E9%9B%86%E6%88%90" target="_blank" rel="noopener noreferrer">不要为远程内容启用 Node.js 集成</a></strong></p></li></ul><p>可以在主进程中通过窗口的 <a href="https://www.electronjs.org/zh/docs/latest/api/web-contents" target="_blank" rel="noopener noreferrer">webContent</a> 对象与网页内容进行交互。</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> BrowserWindow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nwin<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">&#39;https://github.com&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> contents <span class="token operator">=</span> win<span class="token punctuation">.</span>webContents\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>\n</code></pre></div><h4 id="应用程序生命周期"><a class="header-anchor" href="#应用程序生命周期" aria-hidden="true">#</a> 应用程序生命周期</h4><p>主进程可以通过 Electron 的 <a href="https://www.electronjs.org/zh/docs/latest/api/app" target="_blank" rel="noopener noreferrer">app</a> 模块控制当前应用程序的生命周期，即在相应的时间点执行需要的动作。</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 在最后一个窗口被关闭时退出应用</span>\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;window-all-closed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">!==</span> <span class="token string">&#39;darwin&#39;</span><span class="token punctuation">)</span> app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Electron 的生命周期包括以下阶段：</p><ul><li><p>ready</p><p>当 Electron 完成初始化时，发出一次，用于加载窗口的初始化操作 createWindow</p></li><li><p>dom-ready</p><p>当前窗体中的文本加载完成后触发，这个事件通常用于开始 DOM 操作</p></li><li><p>did-finish-load</p><p>导航完成时触发。这个事件会在页面内容完全加载后触发，适合用来做页面的后置处理。</p></li><li><p>window-all-closed</p><p>当所有窗口都被关闭时触发，未监听此事件时，所有窗口关闭后会自动退出应用，并且 <code>before-quit</code> 和 <code>will-quit</code> 两个事件不会生效；监听时需要自己控制是否需要退出应用</p></li><li><p>before-quit</p><p>在关闭窗口之前触发，即将关闭最后一个打开的窗口时被触发</p></li><li><p>will-quit</p><p>在窗口关闭并且应用退出时触发，可以执行清理工作的逻辑</p></li><li><p>quit</p><p>在应用程序退出时发出</p></li><li><p>closed</p><p>当窗口被关闭时触发，此时应删除窗口引用避免内存泄露，设置为 null 即可</p></li></ul><p>我们可以使用以下代码进行测试：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> mainWin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  mainWin<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>\n\n  mainWin<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;dom-ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2---&gt;dom-ready&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  mainWin<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;did-finish-load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3---&gt;did-finish-load&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  mainWin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;closed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;8---&gt;window-closed&#39;</span><span class="token punctuation">)</span>\n    mainWin <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1---&gt;ready&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;window-all-closed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;4---&gt;window-all-closed&#39;</span><span class="token punctuation">)</span>\n  app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;before-quit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;5---&gt;before-quit&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;will-quit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;6---&gt;will-quit&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;quit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;7---&gt;quit&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>输出结果如下所示： <img src="/blog/_assets/electron-life-cycle.a3e90f10.png" alt="electron-life-cycle"></p><h4 id="自定义菜单"><a class="header-anchor" href="#自定义菜单" aria-hidden="true">#</a> 自定义菜单</h4><p>process.platform</p><h4 id="自定义右键菜单"><a class="header-anchor" href="#自定义右键菜单" aria-hidden="true">#</a> 自定义右键菜单</h4><h4 id="dialog-对话框"><a class="header-anchor" href="#dialog-对话框" aria-hidden="true">#</a> Dialog 对话框</h4><p>showOpenDialogSync showOpenDialog</p><h4 id="native-api"><a class="header-anchor" href="#native-api" aria-hidden="true">#</a> Native API</h4><p>为了使 Electron 的功能不仅仅限于对网页内容的封装，主进程也添加了自定义的 API 来与用户的作业系统进行交互。 Electron 有着多种控制原生桌面功能的模块，例如菜单、对话框以及托盘图标。</p><h3 id="渲染进程"><a class="header-anchor" href="#渲染进程" aria-hidden="true">#</a> 渲染进程</h3><p>一个应用有多个渲染进程，通过 BrowserWindow 打开的页面都是一个渲染进程，不能使用 Node 相关的 API 和模块。</p><p>每个渲染进程都是独立的，各自运行在自己的沙箱环境当中，但不同的窗口之间可能存在交互，因此 Electron 通过 <a href="https://www.electronjs.org/zh/docs/latest/tutorial/ipc" target="_blank" rel="noopener noreferrer">IPC</a> 来实现进程间的通信。</p><h3 id="preload-脚本"><a class="header-anchor" href="#preload-脚本" aria-hidden="true">#</a> Preload 脚本</h3><p>使主进程和渲染进程桥接在一起。</p><p>在渲染进程加载之前执行的脚本，可以访问 Node.js API，并且可以访问 Window 对象，通过 Preload 脚本在全局 window 中暴露任意 API，在渲染进程中使用。</p><p>由于安全问题，在 Preload 脚本中直接设置<code>window.xxx = &#39;xxx&#39;</code>时，获取到的<code>window.xxx</code>是 undefined，需要通过 <a href="https://www.electronjs.org/zh/docs/latest/api/context-bridge" target="_blank" rel="noopener noreferrer">contextBridge</a> 来实现交互。</p><div class="language-js"><pre><code><span class="token comment">// preload.js</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> contextBridge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>\n\ncontextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;IS_MAC&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&#39;darwin&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>在渲染进程中，就可以使用<code>window.IS_MAC</code>来判断环境。</p><p><img src="/blog/_assets/electron-render-main.186e8aac.png" alt="electron-render-main"></p><h3 id="进程间通信-ipc"><a class="header-anchor" href="#进程间通信-ipc" aria-hidden="true">#</a> 进程间通信 IPC</h3><p>主进程和渲染进程各司其职，意味着主进程没法访问 DOM 元素，渲染进程无法访问 Node.js API。</p><p>使用进程间通信 IPC 可以解决。Electron 提供 <code>ipcMain</code>（从主进程到渲染进程的异步通信） 模块和 <code>ipcRenderer</code>（从渲染器进程到主进程的异步通信） 模块实现 IPC 以在两种进程之间传输任意信息，例如从 UI 调用原生 API 或从原生菜单触发 Web 内容的更改。</p><h4 id="主进程到渲染进程"><a class="header-anchor" href="#主进程到渲染进程" aria-hidden="true">#</a> 主进程到渲染进程</h4><h4 id="渲染进程到主进程"><a class="header-anchor" href="#渲染进程到主进程" aria-hidden="true">#</a> 渲染进程到主进程</h4><p>异步 send 同步 sendSync</p><p>实现在渲染进程中调用主进程的 API，渲染进程中使用 ipcRenderer.send 发送消息，在主进程中使用 ipcMain.on 监听渲染进程的事件用来接收消息，类似于发布订阅</p><h4 id="渲染进程到渲染进程"><a class="header-anchor" href="#渲染进程到渲染进程" aria-hidden="true">#</a> 渲染进程到渲染进程</h4><h5 id="主进程-2"><a class="header-anchor" href="#主进程-2" aria-hidden="true">#</a> 主进程</h5><h5 id="localstorage"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h5><h2 id="两种进程都可以使用的模块"><a class="header-anchor" href="#两种进程都可以使用的模块" aria-hidden="true">#</a> 两种进程都可以使用的模块</h2><h3 id="shell"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> Shell</h3><h2 id="electron-环境搭建"><a class="header-anchor" href="#electron-环境搭建" aria-hidden="true">#</a> Electron 环境搭建</h2><p>按照<a href="https://www.electronjs.org/zh/docs/latest/tutorial/quick-start#%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener noreferrer">官方教程</a>一步步搭建，这里不在赘述</p><p>或者可以参考我的项目</p><h2 id="打包"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h2><p>electron-forge 构建步骤：package、make、publish</p><p>依赖前一个输出结果：publish 依赖 make、make 依赖 package</p><p><img src="/blog/_assets/electron-pmp.84411272.png" alt="electron-pmp.png"></p><h3 id="package"><a class="header-anchor" href="#package" aria-hidden="true">#</a> package</h3><p>将 electron 应用打包为特定平台的可执行包，例如（windows 上的.exe，mac 上的.app，M1M2 芯片的.dmg），会打包到/out/文件夹中，<code>--arch</code>代表要打包的目标架构</p><div class="language-bash"><pre><code>electron-forge package --arch<span class="token operator">=</span>arm64\nelectron-forge package --arch<span class="token operator">=</span>x64\n</code></pre></div><p>需要处理：</p><ol><li>macOS 上应用程序分发有两层安全技术：<code>代码签名</code>和<code>公证</code></li></ol><ul><li><p>代码签名</p><p>是一种安全技术，用于证明应用程序是本人创建</p></li><li><p>公证</p></li></ul><h3 id="make"><a class="header-anchor" href="#make" aria-hidden="true">#</a> make</h3><p>将通过 forge 配置和传入的参数，为 electron 应用制作可分发文件</p><p>可执行包（Executable Package）：通过 Electron 打包工具构建的最终应用程序。通常是一个可执行文件（如 .exe、.app 或 .dmg 文件），可直接运行。这个可执行包包含了应用的源代码、依赖库、资源文件等一切必要的内容，以便用户能够在其计算机上运行应用。</p><p>分发包（Distribution Package）：将可执行包分发给最终用户的打包版本。分发包可能包含了额外的文件，如安装向导、许可协议、应用图标等。它的目的是将应用程序交付给最终用户，以便他们能够方便地安装和使用你的应用。</p><p>总结起来，可执行包是你实际构建的应用程序，而分发包是包含了可执行包及其他用于分发和展示的资源的打包版本。分发包可以用于在不同平台上分发你的应用，并确保用户能够顺利安装和使用它。</p><h3 id="publish"><a class="header-anchor" href="#publish" aria-hidden="true">#</a> publish</h3><p>执行 package 打包，执行 make 制作 Forge 应用程序并将其发布到 Forge 配置中定义的发布目标。</p><h2 id="为什么主进程到渲染进程没有双向通信"><a class="header-anchor" href="#为什么主进程到渲染进程没有双向通信" aria-hidden="true">#</a> 为什么主进程到渲染进程没有双向通信</h2><p>Electron 选择了一种主进程到渲染进程单向通信的架构，主要基于以下原因：</p><p>安全性和隔离：渲染进程通常运行应用程序的界面部分，而主进程则处理底层系统交互。将主进程到渲染进程的通信限制为单向可以更好地隔离不同层次的操作，防止渲染进程直接访问可能会影响系统稳定性和安全性的功能。</p><p>控制和稳定性： 将主进程作为中心控制点可以更好地管理应用程序的整体状态。如果允许主进程直接访问渲染进程，可能会导致难以预测的交互，从而影响应用程序的稳定性。</p><p>开发者体验： 限制通信方向可以简化通信模型，使开发者更容易理解和处理通信。如果允许双向通信，可能会引入更多的复杂性，增加代码编写和调试的难度。</p><p>尽管主进程到渲染进程的通信是单向的，但 Electron 提供了一种名为 &quot;ipcRenderer&quot; 的机制，允许渲染进程向主进程发送异步消息，然后主进程可以通过 &quot;ipcMain&quot; 监听这些消息并做出响应。这种机制允许渲染进程请求主进程执行特定的操作，同时通过限制通信方向来保持架构的稳定性和安全性。</p><h2 id="调试主进程代码"><a class="header-anchor" href="#调试主进程代码" aria-hidden="true">#</a> 调试主进程代码</h2><p>添加文件 <code>.vscode/launch.json</code>，设置如下代码：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token comment">// 使用 IntelliSense 了解相关属性。</span>\n  <span class="token comment">// 悬停以查看现有属性的描述。</span>\n  <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Electron: MainOnly&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;runtimeExecutable&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceFolder}/node_modules/.bin/electron&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;runtimeArgs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;-r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ts-node/register&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;${relativeFile}&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceFolder}/src/main/main.ts&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;sourceMaps&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;stopOnEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// if true it will break in a unknown file</span>\n      <span class="token property">&quot;outputCapture&quot;</span><span class="token operator">:</span> <span class="token string">&quot;std&quot;</span><span class="token punctuation">,</span> <span class="token comment">// for console.log to be displayed in debugger console</span>\n      <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;inspector&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Electron Main&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;runtimeExecutable&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceFolder}/node_modules/@electron-forge/cli/script/vscode.sh&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;windows&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;runtimeExecutable&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceFolder}/node_modules/.bin/electron-forge-vscode-win.cmd&quot;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;runtimeArgs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceFolder}&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>接着，在 VS Code 中，点击 Debug -&gt; Start Debugging 即可。</p><p><img src="/blog/_assets/electron-debug.05b84665.png" alt="electron-debug"></p><h2 id="如何添加-vue-js-devtools-等浏览器插件"><a class="header-anchor" href="#如何添加-vue-js-devtools-等浏览器插件" aria-hidden="true">#</a> 如何添加 Vue.js devTools 等浏览器插件</h2><p><a href="https://www.electronjs.org/zh/docs/latest/tutorial/devtools-extension" target="_blank" rel="noopener noreferrer">官方文档</a>提供了两种安装方式：</p><h3 id="使用-electron-devtools-installer-安装浏览器插件"><a class="header-anchor" href="#使用-electron-devtools-installer-安装浏览器插件" aria-hidden="true">#</a> 使用 <a href="https://github.com/MarshallOfSound/electron-devtools-installer" target="_blank" rel="noopener noreferrer">electron-devtools-installer</a> 安装浏览器插件</h3><h3 id="手动加载浏览器插件"><a class="header-anchor" href="#手动加载浏览器插件" aria-hidden="true">#</a> 手动加载浏览器插件</h3>',85)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
