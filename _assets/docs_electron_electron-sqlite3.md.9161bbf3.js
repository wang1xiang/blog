import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"Electron Sqlite3数据库文件存储优化方案","frontmatter":{"date":"2024-02-10","title":"Electron Sqlite3数据库文件存储优化方案","tags":["electron"],"describe":"Electron Sqlite3数据库文件存储优化方案"},"headers":[{"level":2,"title":"前方案","slug":"前方案"},{"level":2,"title":"问题","slug":"问题"},{"level":2,"title":"原因","slug":"原因"},{"level":2,"title":"优化方","slug":"优化方"}],"relativePath":"docs/electron/electron-sqlite3.md","lastUpdated":1743558905234.9429}';var p={};const o=[a('<h2 id="前方案"><a class="header-anchor" href="#前方案" aria-hidden="true">#</a> 前方案</h2><p>数据库文件【sqlite3.db】存于代码层次根目录下，数据库初始化时通过 app.getAppPath()指定根目录下的数据文件</p><h2 id="问题"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>研发中使用 sqlite3 时，sqlite3.db 数据库文件内容会被改变，git 提交时也会识别到这个文件，并会提交到 git，当这个文件出现错误时，之后发布的版本都会影响到</p><h2 id="原因"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h2><p>认识不足，sqlite3.db 应该储存于用户本地目录而不是代码层次，每个用户的 sqlite3.db 应该都是独立的</p><h2 id="优化方"><a class="header-anchor" href="#优化方" aria-hidden="true">#</a> 优化方</h2><p>前提：Electron 是一个使用 JavaScript, HTML 和 CSS 构建跨平台桌面应用程序的框架。它允许开发者使用 Web 技术来创建原生的桌面应用程序，同时能够访问底层操作系统的功能。</p><p>方案：采用 node 的内置的 fs 模块，在数据库初始化时在用户目录下创建对应的数据库文件 sqlite3.db，并使用该文件初始化数据库</p><p>代码：</p><div class="language-js"><pre><code><span class="token comment">// fs 方法</span>\n<span class="token comment">/** 文件是否存在 */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fileIsExist</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">dir</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> fs<span class="token punctuation">.</span>constants<span class="token punctuation">.</span><span class="token constant">F_OK</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/** 创建文件 */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">writeLocalFile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">dir</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// sqlite 方法</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;electron&#39;</span>\n<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>\n<span class="token comment">/** 1、用户数据目录 */</span>\n<span class="token keyword">const</span> <span class="token constant">LOCAL_USER_DIR</span> <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token string">&#39;userData&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">/** 2、需要创建的数据库文件路径 */</span>\n<span class="token keyword">const</span> <span class="token literal-property property">db_path</span><span class="token operator">:</span> string <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">LOCAL_USER_DIR</span><span class="token punctuation">,</span> <span class="token string">&#39;sqlite3.db&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">/** 3、 判断文件是否存在以及是否需要创建文件，文件存在触发sqlite3数据库初始化*/</span>\n<span class="token keyword">function</span> <span class="token function">connectDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fileIsExist</span><span class="token punctuation">(</span>db_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">isExist</span><span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">info_logger</span><span class="token punctuation">(</span>db_path <span class="token operator">+</span> <span class="token string">&#39;目标文件是否存在&#39;</span> <span class="token operator">+</span> isExist<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isExist<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">onInitDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">writeLocalFile</span><span class="token punctuation">(</span>db_path<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">err</span><span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">error_logger</span><span class="token punctuation">(</span>db_path <span class="token operator">+</span> <span class="token string">&#39;目标文件写入失败&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token function">info_logger</span><span class="token punctuation">(</span>db_path <span class="token operator">+</span> <span class="token string">&#39;目标文件写入成功&#39;</span><span class="token punctuation">)</span>\n          <span class="token function">onInitDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/** 4、sqlite3数据库初始化 */</span>\n<span class="token keyword">function</span> <span class="token function">onInitDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sqlite3<span class="token punctuation">.</span>Database</span><span class="token punctuation">(</span>db_path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">err</span><span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">error_logger</span><span class="token punctuation">(</span><span class="token string">&#39;🙅sqlite3连接失败：&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">info_logger</span><span class="token punctuation">(</span><span class="token string">&#39;✅sqlite3连接成功！&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',12)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
