import{f as n,g as a,J as s}from"./common-03e46d7f.js";const p='{"title":"keep-alive路由踩坑","frontmatter":{"date":"2020-09-15","title":"keep-alive路由踩坑","tags":["vue"],"describe":"记录使用keep-alive遇到的问题"},"headers":[{"level":3,"title":"keep-alive 存在问题","slug":"keep-alive-存在问题"},{"level":3,"title":"解决","slug":"解决"},{"level":3,"title":"多级路由嵌套keepAlive失败","slug":"多级路由嵌套keepalive失败"},{"level":3,"title":"替代 keepAlive","slug":"替代-keepalive"}],"relativePath":"docs/vue/keepAlive.md","lastUpdated":1742177050627.4597}';var t={};const e=[s('<h3 id="keep-alive-存在问题"><a class="header-anchor" href="#keep-alive-存在问题" aria-hidden="true">#</a> keep-alive 存在问题</h3><div class="language-js"><pre><code><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive <span class="token operator">:</span>include<span class="token operator">=</span><span class="token string">&quot;keepAlive&quot;</span> <span class="token operator">:</span>exclude<span class="token operator">=</span><span class="token string">&quot;exclude&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>\n<span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">keepAlive</span><span class="token operator">:</span> <span class="token string">&#39;getKeepAlive&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>这里的 keepAlive 为状态管理中存的一份数据(路由名称)，如果某个路由被删除，单单从状态管理中删除是无用的，在 vue-devtool 中还可以看到路由的缓存，如果一直点下去，最终会导致崩溃</p></blockquote><h3 id="解决"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h3><blockquote><p>那么，在判断数据中不存在这个路由时，就可以销毁它，销毁组件使用 this.$destory(&#39;componentName&#39;)，代码为：</p></blockquote><div class="language-js"><pre><code><span class="token keyword">const</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span>\n <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n   <span class="token literal-property property">routePath</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>routePath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>name\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">visitedViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>keepAlive\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">visitedViews</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>routePath<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n   <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> mixin\n</code></pre></div><blockquote><p>最后使用 mixins 混入到每个 keepAlive 缓存的页面上，查看 vue-devtool 可以看到删除路由时销毁组件，并没有被缓存了</p></blockquote><h3 id="多级路由嵌套keepalive失败"><a class="header-anchor" href="#多级路由嵌套keepalive失败" aria-hidden="true">#</a> 多级路由嵌套keepAlive失败</h3><blockquote><p>如果项目根组件下有</p></blockquote><div class="language-js"><pre><code><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>route<span class="token operator">-</span>view <span class="token operator">:</span>include<span class="token operator">=</span><span class="token string">&quot;include&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>route<span class="token operator">-</span>view<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>\n</code></pre></div><blockquote><p>当A组件中又包含<code>&lt;route-view&gt;</code>时，就会生成多级路由，假设A组件下包含B、C组件，当A不缓存，只缓存B、C时，如果仅仅是B、C之间跳转，那么缓存是没有问题的，但是如果跳转到A组件外的路由时，B、C组件的缓存会失效；而如果缓存A组件时，B、C组件的销毁只F会在B、C组件之间有效，如果从A组件外的路由跳转到B、C组件时，keepAlive状态依然存在。 导致这种问题的原因只要因为多级路由嵌套，那么只存在一个<code>&lt;router-view&gt;&lt;/router-view&gt;</code>时，就不会有这个问题。 所以可以将菜单和路由分开，菜单只是提供使用者方便点击想要的功能，菜单保留多级，但是显示的路由只保留一级，这样就能解决。</p></blockquote><h3 id="替代-keepalive"><a class="header-anchor" href="#替代-keepalive" aria-hidden="true">#</a> 替代 keepAlive</h3><blockquote><p>keepAlive 本质上会将组件中的数据和 dom 树都缓存下来，但是这样在页面打开很多时，仍然会占用较大的内存，所以可以考虑使用 vuex 将单个组件中用到的数据都缓存下来，打开某个页面时，再重新渲染页面。</p></blockquote>',13)];t.render=function(s,p,t,o,c,l){return n(),a("div",null,e)};export{p as __pageData,t as default};
