import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 43：动态规划part10","frontmatter":{"date":"2025-03-26","title":"跟着卡哥学算法Day 43：动态规划part10","tags":["leetcode"],"describe":"动态规划part10"},"headers":[{"level":2,"title":"300.最长递增子序列 🌟🌟","slug":"_300-最长递增子序列-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"674. 最长连续递增序列 🌟","slug":"_674-最长连续递增序列-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"与最长递增子序列（LIS）的区别","slug":"与最长递增子序列（lis）的区别"},{"level":2,"title":"718. 最长重复子数组 🌟🌟","slug":"_718-最长重复子数组-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":3,"title":"代码","slug":"代码-3"},{"level":3,"title":"为什么是 nums1[i-1] 和 nums2[j-1]，而不是 num1[i] 和 nums2[j]？","slug":"为什么是-nums1-i-1-和-nums2-j-1-，而不是-num1-i-和-nums2-j-？"},{"level":3,"title":"滚动数组","slug":"滚动数组"}],"relativePath":"docs/leetcode/dynamic-programming-code10.md","lastUpdated":1743134640802.3127}';var t={};const o=[a('<h2 id="_300-最长递增子序列-🌟🌟"><a class="header-anchor" href="#_300-最长递增子序列-🌟🌟" aria-hidden="true">#</a> 300.最长递增子序列 🌟🌟</h2><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><p>示例 1：</p><ul><li>输入：nums = [10,9,2,5,3,7,101,18]</li><li>输出：4</li><li>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</li></ul><p>示例 2：</p><ul><li>输入：nums = [0,1,0,3,2,3]</li><li>输出：4</li></ul><p>示例 3：</p><ul><li>输入：nums = [7,7,7,7,7,7,7]</li><li>输出：1</li></ul><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 2500</li><li>-10^4 &lt;= nums[i] &lt;= 104</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><ul><li>子序列：<strong>由数组派生而来的序列（子数组），删除（或不删除）数组中的元素而不改变其余元素的顺序</strong></li><li>自增子序列：<strong>子序列中的元素是递增的</strong></li></ul><p>子序列问题是动态规划解决的经典问题，当前下标 i 的递增子序列长度，和 i 之前的下标为 0...i-1 的子序列长度有关系。</p><p>动规五部曲：</p><ol><li><p>确定 dp 数组及下标的含义</p><p>dp[i] 表示 i 之前（包括 i），以 nums[i]为结尾的最长递增子序列长度</p><ul><li>❌ 误解：<code>dp[i]</code> 表示从 <code>nums[0]</code> 到 <code>nums[i]</code> 的数组中的最长递增子序列长度</li><li>✅ 正解：<code>dp[i]</code> 表示 <strong>以 <code>nums[i]</code> 为结尾</strong> 的所有递增子序列中，最长子序列的长度</li></ul><p><strong>核心思想</strong>：</p><ul><li>每个位置 <code>i</code> 的 <code>dp[i]</code> 仅关注以 <code>nums[i]</code> 结尾的子序列</li><li>必须满足 <code>nums[i] &gt; nums[j]</code>，才能将 <code>nums[i]</code> 追加到以 <code>nums[j]</code> 结尾的子序列后，形成更长的子序列</li></ul></li><li><p>确定递推公式</p><p><strong>位置 i 的最长递增子序列等于 j 从 0 到 i-1 各个位置的最长递增子序列+1 的最大值</strong></p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>若 nums[i] &gt; nums[j]，说明可将 nums[i] 接在以 nums[j] 结尾的子序列后，形成更长的子序列</li><li>取 max 是为了找到 j 从 0 到 i-1 所有可能的最大值</li></ul></li><li><p>dp 数组初始化</p><p><code>dp[i] = 1</code>：每个位置的初始长度为 1（单独一个元素本身就是一个长度为 1 的子序列）</p></li><li><p>确定遍历顺序</p><p>dp[i]由 dp[i-1]推导出，遍历 i 一定从前往后</p><p>j 遍历 0 到 i-1，从前往后或从后往前都可以，只要全遍历就行</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>为什么需要两层循环？</strong></p><ul><li>外层循环：遍历每个元素 nums[i]，作为当前子序列的结尾</li><li>内层循环：遍历所有 j &lt; i，检查是否可以将 nums[i] 追加到以 nums[j] 结尾的子序列中</li><li>关键：子序列的最后一个元素 nums[j] 是该子序列的最大值，因此只需比较 nums[j] 和 nums[i]</li></ul></li><li><p>举例推导 dp 数组</p><p>以示例 <code>nums = [10,9,2,5,3,7,101,18]</code> 逐步分析：</p><ol><li><p>初始化：<code>dp = [1,1,1,1,1,1,1,1]</code></p></li><li><p>计算过程：</p><ul><li><p><code>i=0</code>：无 <code>j</code>，保持 <code>dp[0]=1</code></p></li><li><p><code>i=1</code>：<code>nums[1]=9</code>，所有 <code>j &lt; 1</code> 的数都比 9 大，无法追加 → <code>dp[1]=1</code></p></li><li><p><code>i=2</code>：<code>nums[2]=2</code>，前面没有更小的数 → <code>dp[2]=1</code></p></li><li><p><code>i=3</code>：<code>nums[3]=5</code></p><ul><li><code>j=2</code>：<code>nums[2]=2 &lt;5</code> → <code>dp[3] = dp[2]+1 = 2</code></li></ul></li><li><p><code>i=4</code>：<code>nums[4]=3</code></p><ul><li><code>j=2</code>：<code>nums[2]=2 &lt;3</code> → <code>dp[4] = dp[2]+1 = 2</code></li></ul></li><li><p><code>i=5</code>：<code>nums[5]=7</code></p><ul><li><code>j=2</code>：<code>nums[2]=2 &lt;7</code> → <code>dp[5]=dp[2]+1=2</code></li><li><code>j=3</code>：<code>nums[3]=5 &lt;7</code> → <code>dp[5]=dp[3]+1=3</code></li><li><code>j=4</code>：<code>nums[4]=3 &lt;7</code> → <code>dp[5]=dp[4]+1=3</code><br> → 最终 <code>dp[5]=3</code></li></ul></li><li><p><code>i=6</code>：<code>nums[6]=101</code></p><ul><li>遍历所有 <code>j &lt;6</code>，最长子序列来自 <code>j=5</code> → <code>dp[6]=dp[5]+1=4</code></li></ul></li><li><p><code>i=7</code>：<code>nums[7]=18</code></p><ul><li>最长子序列来自 <code>j=5</code>（<code>7 &lt;18</code>）→ <code>dp[7]=dp[5]+1=4</code></li></ul></li></ul></li><li><p>最终 <code>dp</code> 数组：<code>[1,1,1,2,2,3,4,4]</code> → 最大值为 4。</p></li></ol></li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length\n  <span class="token comment">// 初始各个位置最长递增子序列都是1</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// j是从0到i-1各个位置</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果nums[i] &gt; nums[j] 则可以追加nums[i] 形成更长的递增子序列</span>\n      <span class="token comment">// 找出从0到i-1中最长的一个</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n    result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_674-最长连续递增序列-🌟"><a class="header-anchor" href="#_674-最长连续递增序列-🌟" aria-hidden="true">#</a> 674. 最长连续递增序列 🌟</h2><p><a href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。</p><p>连续递增的子序列 可以由两个下标 l 和 r（l &lt; r）确定，如果对于每个 l &lt;= i &lt; r，都有 nums[i] &lt; nums[i + 1] ，那么子序列 [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] 就是连续递增子序列。</p><p>示例 1：</p><ul><li>输入：nums = [1,3,5,4,7]</li><li>输出：3</li><li>解释：最长连续递增序列是 [1,3,5], 长度为 3。尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。</li></ul><p>示例 2：</p><ul><li>输入：nums = [2,2,2,2,2]</li><li>输出：1</li><li>解释：最长连续递增序列是 [2], 长度为 1。</li></ul><p>提示：</p><ul><li>0 &lt;= nums.length &lt;= 10^4</li><li>-10^9 &lt;= nums[i] &lt;= 10^9</li></ul><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p>在<a href="#300%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97-">300.最长递增子序列</a>的基础上，增加了<strong>连续</strong>的限制</p><p>动规五部曲：</p><ol><li><p>确定 dp 数组及下标的含义</p><p>dp[i]表示以下标 i 为结尾的连续最长递增子序列长度</p></li><li><p>确定递推公式</p><p>与<a href="#300%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97-">300.最长递增子序列</a>的递推公式不同，此处<strong>只需与前一个元素比较</strong>：</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">//  断开连续，重新开始计数</span>\n  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>连续递增要求子序列在原数组中连续，因此只需检查 nums[i] 是否比 nums[i-1] 大</li><li>若满足条件，则当前长度继承前一个位置的长度加 1</li><li>否则重置为 1</li></ul></li><li><p>dp 数组初始化</p><p><code>dp[i] = 1</code> ：每个位置的初始长度为 1（单独一个元素本身就是一个长度为 1 的子序列）</p></li><li><p>确定遍历顺序</p><p>从前往后遍历，只需要一层 for 循环，比较当前和前一个值的大小</p><p><strong>每次只需检查当前元素与前一个元素的关系，无需遍历更早的历史状态</strong></p></li><li><p>举例推导 dp 数组</p><p>以 nums = [1,3,5,4,1] 为例，得到的 dp 数组为：</p><div class="language-js"><pre><code>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n</code></pre></div><p>最后取 dp[i]中的最大值，即为最长连续递增子序列长度</p></li></ol><h4 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h4><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">findLengthOfLCIS</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 只需要与前一个数比较</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 大于就追加</span>\n      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>dp<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="与最长递增子序列（lis）的区别"><a class="header-anchor" href="#与最长递增子序列（lis）的区别" aria-hidden="true">#</a> 与最长递增子序列（LIS）的区别</h3><table><thead><tr><th>特性</th><th>LIS（非连续）</th><th>LCIS（连续）</th></tr></thead><tbody><tr><td>子序列要求</td><td>元素递增，可不连续</td><td>元素递增且必须连续</td></tr><tr><td>状态定义</td><td>dp[i]：以 nums[i] 结尾的最长递增子序列长度</td><td>dp[i]：以 nums[i] 结尾的最长连续递增子序列长度</td></tr><tr><td>状态转移复杂度</td><td>O(n²)（需要两层循环）</td><td>O(n)（只需比较前一个元素）</td></tr></tbody></table><h2 id="_718-最长重复子数组-🌟🌟"><a class="header-anchor" href="#_718-最长重复子数组-🌟🌟" aria-hidden="true">#</a> 718. 最长重复子数组 🌟🌟</h2><p><a href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给两个整数数组  A  和  B ，返回两个数组中公共的、长度最长的子数组的长度。</p><p>示例：</p><p>输入：</p><ul><li>A: [1,2,3,2,1]</li><li>B: [3,2,1,4,7]</li><li>输出：3</li><li>解释：长度最长的公共子数组是 [3, 2, 1] 。</li></ul><p>提示：</p><ul><li>1 &lt;= len(A), len(B) &lt;= 1000</li><li>0 &lt;= A[i], B[i] &lt; 100</li></ul><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><p>二维 dp 数组</p><p>第一个数组到 i - 1 位置，第二个数组到 j - 1 位置，最长的重复子数组长度为 dp[i][j]</p><p>动规五部曲：</p><ol><li><p>确定 dp 数组及下标的含义</p><p>dp[i][j]表示以 nums1[i-1] 和 nums2[j-1] 为结尾的最长公共连续子数组的长度 <strong>（注：索引从 1 开始，便于处理边界条件）</strong></p></li><li><p>确定递归公式</p><p>根据 dp[i][j]的定义，dp[i][j]的状态只能由 dp[i - 1][j - 1]推导而来</p><p>即当 nums1[i - 1]等于 nums2[j - 1]时：</p><div class="language-js"><pre><code>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>\n</code></pre></div></li><li><p>dp 数组初始化</p><p>创建一个二维数组 dp，大小为 <strong>(nums1.length+1) × (nums2.length+1)</strong>，初始值为 0</p><p>dp[i][j] 表示以 nums1[i-1] 和 nums2[j-1] 结尾的最长公共子数组长度，则：</p><ul><li>i 和 j 的取值范围为 [1, nums1.length] 和 [1, nums2.length]，对应原数组 nums1 和 nums2 的索引 [0, length-1]，所以需要额外加一行一列</li><li><strong>通过增加一行一列，统一处理边界条件，避免索引越界</strong></li></ul><p>dp[i][0] 和 dp[0][j] 都初始化为 0，因为当一个数组长度为 0 时，最长公共子数组长度也为 0</p></li><li><p>确定遍历顺序</p><p>外层 for 循环遍历 nums1，内层 for 循环遍历 nums2</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n\n    result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>举例推导 dp 数组</p><p>拿示例 1 中，nums1: [1,2,3,2,1]，nums2: [3,2,1,4,7]为例，得到 dp 数组：</p><div class="language-js"><pre><code>dp <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre></div></li></ol><h3 id="代码-3"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">findLength</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> n2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 遇到A[i - 1] === B[j - 1]，则更新dp数组</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span>\n      result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="为什么是-nums1-i-1-和-nums2-j-1-，而不是-num1-i-和-nums2-j-？"><a class="header-anchor" href="#为什么是-nums1-i-1-和-nums2-j-1-，而不是-num1-i-和-nums2-j-？" aria-hidden="true">#</a> 为什么是 nums1[i-1] 和 nums2[j-1]，而不是 num1[i] 和 nums2[j]？</h3><h4 id="简化初始化逻辑"><a class="header-anchor" href="#简化初始化逻辑" aria-hidden="true">#</a> 简化初始化逻辑</h4><ul><li><p>定义为 nums1[i-1]时，初始化时全为 0，额外加一行一列，<strong>无需额外代码处理 i=0 或 j=0 的边界情况</strong></p></li><li><p>定义为 nums1[i] 时，第一行第一列需要初始化，即当 nums1[i]和 nums2[0]相同时，对应的 dp[i][0]需要初始化为 1</p><div class="language-js"><pre><code><span class="token comment">// 要对第一行，第一列经行初始化</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><h4 id="避免索引越界"><a class="header-anchor" href="#避免索引越界" aria-hidden="true">#</a> 避免索引越界</h4><p>当 nums1[i-1] == nums2[j-1] 时，状态转移方程为：</p><div class="language-js"><pre><code>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>\n</code></pre></div><ul><li><p>定义为 nums1[i-1] 和 nums2[j-1]，无需判断 i-1 是否越界</p></li><li><p>如果定义为 nums1[i] 和 nums2[j]，则需要判断 i-1 和 j-1 是否越界</p><div class="language-js"><pre><code><span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> and j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token operator">:</span>\n</code></pre></div></li></ul><h3 id="滚动数组"><a class="header-anchor" href="#滚动数组" aria-hidden="true">#</a> 滚动数组</h3><p>dp[i][j]只和 dp[i-1][j-1]有关，可以使用滚动数组优化空间</p><p>dp[j]只能由 dp[j-1]推出，也就是可以把上一层 dp[i-1][j]拷贝到下一层 dp[i][j]来继续用</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">findLength</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> n1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n    n2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> n2<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span>\n      res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre></div>',66)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
