import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 9：字符串常见题目2","frontmatter":{"date":"2025-02-20","title":"跟着卡哥学算法Day 9：字符串常见题目2","tags":["leetcode"],"describe":"字符串常见题目2"},"headers":[{"level":2,"title":"151.翻转字符串里的单词 🌟🌟","slug":"_151-翻转字符串里的单词-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"右旋字符串 🌟🌟","slug":"右旋字符串-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"代码","slug":"代码-2"},{"level":2,"title":"28. 找出字符串中第一个匹配项的下标 🌟","slug":"_28-找出字符串中第一个匹配项的下标-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"KMP 算法","slug":"kmp-算法"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":3,"title":"代码","slug":"代码-3"}],"relativePath":"docs/leetcode/string-code1.md","lastUpdated":1742378302668.6067}';var t={};const o=[a('<h2 id="_151-翻转字符串里的单词-🌟🌟"><a class="header-anchor" href="#_151-翻转字符串里的单词-🌟🌟" aria-hidden="true">#</a> 151.翻转字符串里的单词 🌟🌟</h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/" target="_blank" rel="noopener noreferrer">力扣链接</a></p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定一个字符串，逐个翻转字符串中的每个单词。</p><p>示例 1：</p><div class="language-text"><pre><code>输入: &quot;the sky is blue&quot;\n输出: &quot;blue is sky the&quot;\n</code></pre></div><p>示例 2：</p><div class="language-text"><pre><code>输入: &quot;  hello world!  &quot;\n输出: &quot;world! hello&quot;\n</code></pre></div><p>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</p><p>示例 3：</p><div class="language-text"><pre><code>输入: &quot;a good   example&quot;\n输出: &quot;example good a&quot;\n</code></pre></div><p>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个</p><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><h4 id="什么时候不能使用库函数？"><a class="header-anchor" href="#什么时候不能使用库函数？" aria-hidden="true">#</a> 什么时候不能使用库函数？</h4><p>本题如果使用库函数 <code>split</code> 分割字符串，然后定义新的字符串，将单词倒叙添加到新字符串，那么也就失去了算法的意义，这时候就不能使用库函数。</p><p>不能使用库函数的几种场景：</p><ol><li>明确提出使用某种特定算法，如使用快排等</li><li>库函数很简单就能解出答案，如本题</li><li>库函数隐藏性能问题，如</li></ol><h4 id="解题步骤"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h4><ul><li><p>移除多余空格</p><p>整体思路按照<a href="./array-code.md/#27-移除元素-">移除元素</a>快慢指针</p></li><li><p>整个字符串反转</p><p>整体思路按照<a href="./string-code.md/#344反转字符串-">反转字符串</a>左右指针</p></li><li><p>字符串中的每个单词反转</p><p>左右指针</p></li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;the sky is blue &#39;</span>\n<span class="token comment">// 移除多余空格</span>\ns <span class="token operator">=</span> <span class="token string">&#39;the sky is blue&#39;</span>\n<span class="token comment">// 字符串反转</span>\ns <span class="token operator">=</span> <span class="token string">&#39;eulb si yks eht&#39;</span>\n<span class="token comment">// 单词反转</span>\ns <span class="token operator">=</span> <span class="token string">&#39;blue is sky the&#39;</span>\n</code></pre></div><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} s\n * @return {string}\n */</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">reverseWords</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> strArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n\n  <span class="token comment">// 移除多余空格</span>\n  <span class="token function">removeExtraSpaces</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span>\n  <span class="token comment">// 反转</span>\n  <span class="token function">reverse</span><span class="token punctuation">(</span>strArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> strArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token comment">// 对单个单词反转</span>\n\n  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> strArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>strArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39; &#39;</span> <span class="token operator">||</span> i <span class="token operator">===</span> strArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">reverse</span><span class="token punctuation">(</span>strArr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> strArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">removeExtraSpaces</span><span class="token punctuation">(</span><span class="token parameter">strArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> strArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>strArr<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39; &#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fast <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> strArr<span class="token punctuation">[</span>fast <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fast<span class="token operator">++</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      strArr<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> strArr<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>\n      slow<span class="token operator">++</span>\n      fast<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 上面操作末尾还会剩余一个空格</span>\n  strArr<span class="token punctuation">.</span>length <span class="token operator">=</span> strArr<span class="token punctuation">[</span>slow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39; &#39;</span> <span class="token operator">?</span> slow <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> slow\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">strArr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> left <span class="token operator">=</span> start\n  <span class="token keyword">let</span> right <span class="token operator">=</span> end\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">;</span><span class="token punctuation">[</span>strArr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> strArr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>strArr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> strArr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span>\n    left<span class="token operator">++</span>\n    right<span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="右旋字符串-🌟🌟"><a class="header-anchor" href="#右旋字符串-🌟🌟" aria-hidden="true">#</a> 右旋字符串 🌟🌟</h2><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>字符串的右旋转操作是把字符串尾部的若干个字符转移到字符串的前面。给定一个字符串 s 和一个正整数 k，请编写一个函数，将字符串中的后面 k 个字符移到字符串的前面，实现字符串的右旋转操作。</p><p>例如，对于输入字符串 &quot;abcdefg&quot; 和整数 2，函数应该将其转换为 &quot;fgabcde&quot;。</p><p>输入：输入共包含两行，第一行为一个正整数 k，代表右旋转的位数。第二行为字符串 s，代表需要旋转的字符串。</p><p>输出：输出共一行，为进行了右旋转操作后的字符串。</p><p>样例输入：</p><div class="language-js"><pre><code><span class="token number">2</span>\nabcdefg\n</code></pre></div><p>样例输出：</p><div class="language-js"><pre><code>fgabcde\n</code></pre></div><p>数据范围：1 &lt;= k &lt; 10000, 1 &lt;= s.length &lt; 10000;</p><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p>依然反转字符串</p><div class="language-js"><pre><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;abcdefg&#39;</span>\n<span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">2</span>\n</code></pre></div><ul><li>首先反转 0 ～ s.length - 1 - k 字符 <code>edcbafg</code></li><li>反转 arr.length - 1 - k + 1 ～ s.length - 1 字符 <code>edcbagf</code></li><li>最后整体反转 <code>fgabcde</code></li></ul><h3 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">rightTurnStr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">)</span>\n  <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">strArr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">;</span><span class="token punctuation">[</span>strArr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> strArr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>strArr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> strArr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span>\n    start<span class="token operator">++</span>\n    end<span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_28-找出字符串中第一个匹配项的下标-🌟"><a class="header-anchor" href="#_28-找出字符串中第一个匹配项的下标-🌟" aria-hidden="true">#</a> 28. 找出字符串中第一个匹配项的下标 🌟</h2><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/" target="_blank" rel="noopener noreferrer">力扣链接</a></p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>实现 strStr() 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从 0 开始)。如果不存在，则返回 -1。</p><div class="language-text"><pre><code>示例 1: 输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot; 输出: 2\n\n示例 2: 输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot; 输出: -1\n</code></pre></div><p>说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。</p><h3 id="kmp-算法"><a class="header-anchor" href="#kmp-算法" aria-hidden="true">#</a> KMP 算法</h3><h4 id="什么是-kmp-算法"><a class="header-anchor" href="#什么是-kmp-算法" aria-hidden="true">#</a> 什么是 KMP 算法</h4><p>因为是由这三位学者发明的：Knuth，Morris 和 Pratt，所以取了三位学者名字的首字母。所以叫做 KMP</p><h4 id="kmp-用来做什么"><a class="header-anchor" href="#kmp-用来做什么" aria-hidden="true">#</a> KMP 用来做什么</h4><p>KMP主要应用在字符串匹配上。</p><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><ul><li></li></ul><h3 id="代码-3"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">replaceNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> z <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">isStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> a <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> z\n\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    n <span class="token operator">+=</span> <span class="token function">isStr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">6</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStr</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;r&#39;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;e&#39;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;m&#39;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;u&#39;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;n&#39;</span>\n      i <span class="token operator">-=</span> <span class="token number">5</span>\n    <span class="token punctuation">}</span>\n    index<span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> newArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',55)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
