import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"vue3项目配置按需自动导入API、组件库、图标","frontmatter":{"date":"2024-06-20","title":"vue3项目配置按需自动导入API、组件库、图标","tags":["vue"],"describe":"vue3项目配置按需"},"headers":[{"level":2,"title":"自动导入 API unplugin-auto-import","slug":"自动导入-api-unplugin-auto-import"},{"level":2,"title":"使用步骤","slug":"使用步骤"},{"level":3,"title":"1. 安装依赖","slug":"_1-安装依赖"},{"level":3,"title":"2. 配置","slug":"_2-配置"},{"level":2,"title":"自动导入组件库","slug":"自动导入组件库"},{"level":2,"title":"自动导入 Icon 图标","slug":"自动导入-icon-图标"},{"level":3,"title":"iconify 插件","slug":"iconify-插件"}],"relativePath":"docs/vue/unplugin-auto-import.md","lastUpdated":1743400723198.4114}';var t={};const o=[a('<h2 id="自动导入-api-unplugin-auto-import"><a class="header-anchor" href="#自动导入-api-unplugin-auto-import" aria-hidden="true">#</a> 自动导入 API unplugin-auto-import</h2><p><a href="https://github.com/unplugin" target="_blank" rel="noopener noreferrer">unplugin</a></p><p>按需自动导入 API，支持 Vue、react 等流行框架</p><h2 id="使用步骤"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h2><h3 id="_1-安装依赖"><a class="header-anchor" href="#_1-安装依赖" aria-hidden="true">#</a> 1. 安装依赖</h3><div class="language-bash"><pre><code><span class="token function">npm</span> i -D unplugin-auto-import\n</code></pre></div><h3 id="_2-配置"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2. 配置</h3><p>可以在 Vite、Webpack、Rspack、Rollup 和 esbuild 中进行配置</p><div class="language-js"><pre><code><span class="token comment">// vite.config.ts</span>\n<span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">&#39;unplugin-auto-import/vite&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 自动导入 Vue 3 相关函数，比如：ref, reactive, toRefs 等</span>\n      <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token comment">// 自动导入目录</span>\n      <span class="token literal-property property">dirs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./src/hooks&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./src/store&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token comment">// 生成 `auto-imports.d.ts` 声明文件</span>\n      <span class="token literal-property property">dts</span><span class="token operator">:</span> <span class="token string">&#39;src/auto-imports.d.ts&#39;</span><span class="token punctuation">,</span>\n      <span class="token comment">// 使用 ESLint 插件的设置</span>\n      <span class="token literal-property property">eslintrc</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">enabled</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 false</span>\n        <span class="token literal-property property">filepath</span><span class="token operator">:</span> <span class="token string">&#39;./.eslintrc-auto-import.json&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 &#39;./.eslintrc-auto-import.json&#39;</span>\n        <span class="token literal-property property">globalsPropValue</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 true</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="import"><a class="header-anchor" href="#import" aria-hidden="true">#</a> import</h4><p>指定需要自动导入的库或框架，比如 Vue 和 Vue Router，这样就能自动导入 Vue 的 ref、reactive 等函数，不必在使用时再引入</p><div class="language-js"><pre><code><span class="token comment">// 未使用前</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 使用插件后</span>\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre></div><p>import 导入分为三类：</p><ol><li><p>基本导入</p><p>类似上述的基本导入，比如：vue、vue-router 等，直接使用全量 API</p></li><li><p>自定义导入</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n   <span class="token string-property property">&#39;vue&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n     <span class="token string">&#39;createVNode&#39;</span><span class="token punctuation">,</span>\n     <span class="token string">&#39;render&#39;</span>\n   <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token string-property property">&#39;vue-router&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n     <span class="token string">&#39;createRouter&#39;</span><span class="token punctuation">,</span>\n     <span class="token string">&#39;createWebHistory&#39;</span><span class="token punctuation">,</span>\n     <span class="token string">&#39;createWebHashHistory&#39;</span><span class="token punctuation">,</span>\n     <span class="token string">&#39;useRouter&#39;</span><span class="token punctuation">,</span>\n     <span class="token string">&#39;useRoute&#39;</span>\n   <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token string-property property">&#39;uuid&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n     <span class="token punctuation">[</span><span class="token string">&#39;v4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;uuidv4&#39;</span><span class="token punctuation">]</span>\n   <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token comment">// 全局使用 _.xxxx()</span>\n   <span class="token string-property property">&#39;lodash-es&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n     <span class="token comment">// default imports</span>\n     <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span> <span class="token comment">// import { * as _ } from &#39;lodash-es&#39;,</span>\n   <span class="token punctuation">]</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><ul><li><code>[&#39;v4&#39;, &#39;uuidv4&#39;]</code>：将 uuid 库中的 v4 函数导入为 uuidv4，相当于<code>import { v4 as uuidv4 } from &#39;uuid&#39;</code></li><li><code>[&#39;*&#39;, &#39;_&#39;]</code>: 将 lodash-es 库中的所有导出绑定到 _ 对象上，这相当于 <code>import { \\* as _ } from &#39;lodash-es&#39;</code></li></ul></li><li><p>类型导入</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;VNode&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;ComponentPublicInstance&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;ComponentPublicInstanceCostom&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;ComponentInternalInstance&#39;</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">{</span>\n  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;RouteRecordRaw&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;RouteLocationRaw&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;LocationQuery&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;RouteParams&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;RouteLocationNormalizedLoaded&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;RouteRecordName&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;NavigationGuard&#39;</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这部分配置用于自动导入类型声明，使 TypeScript 能够识别这些类型，从而提供更好的类型检查和自动完成功能。</p></li></ol><h4 id="dirs"><a class="header-anchor" href="#dirs" aria-hidden="true">#</a> dirs</h4><p>指定需要自动导入的目录，比如自定义的 hooks 和 store。通过指定这些目录，unplugin-auto-import 插件会自动扫描这些目录下的文件，并自动导入其中导出的内容。</p><div class="language-js"><pre><code><span class="token comment">// src/hooks/useExample.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><p>在可以直接使用 useExample 函数，无需手动导入。插件会自动将这些函数导入到你的组件中。</p><h4 id="dts"><a class="header-anchor" href="#dts" aria-hidden="true">#</a> dts</h4><p>指定生成的 TypeScript 类型声明文件的位置</p><p>自动生成的 TypeScript 声明文件</p><p>当你运行项目时，unplugin-auto-import 会在 src 目录下生成一个 auto-imports.d.ts 文件，声明自动导入的类型。</p><h4 id="eslintrc"><a class="header-anchor" href="#eslintrc" aria-hidden="true">#</a> eslintrc</h4><p>生成 ESLint 配置文件，避免未使用导入报错</p><p>为了确保 ESLint 不会因为自动导入的变量未定义而报错，你需要在 ESLint 配置中引入自动生成的 .eslintrc-auto-import.json 文件：</p><h4 id="include"><a class="header-anchor" href="#include" aria-hidden="true">#</a> include</h4><p>include 是一个配置选项，用于指定哪些文件或文件夹应当包含在自动导入扫描范围内。</p><div class="language-js"><pre><code><span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;./src/**/*.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 包含 src 目录下的所有 .js 文件</span>\n    <span class="token string">&#39;./components/**/*.vue&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 包含 components 目录下的所有 .vue 文件</span>\n    <span class="token operator">/</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>tj<span class="token punctuation">]</span>sx<span class="token operator">?</span>$<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token comment">// 包含所有 .ts, .tsx, .js, .jsx 文件</span>\n    <span class="token operator">/</span>\\<span class="token punctuation">.</span>vue\\<span class="token operator">??</span><span class="token operator">/</span> <span class="token comment">// 所有vue文件</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="vuetemplate"><a class="header-anchor" href="#vuetemplate" aria-hidden="true">#</a> vueTemplate</h4><p>vueTemplate 选项是一个布尔值，用于指定是否在 Vue 组件的 <code> &lt;template&gt;</code> 部分启用自动导入功能。</p><h4 id="resolvers"><a class="header-anchor" href="#resolvers" aria-hidden="true">#</a> resolvers</h4><h2 id="自动导入组件库"><a class="header-anchor" href="#自动导入组件库" aria-hidden="true">#</a> 自动导入组件库</h2><p>搭配 unplugin-vue-components 实现 element-plus 等组件库的自动导入。</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>\n<span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">&#39;unplugin-auto-import/vite&#39;</span>\n<span class="token keyword">import</span> Components <span class="token keyword">from</span> <span class="token string">&#39;unplugin-vue-components/vite&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ElementPlusResolver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;unplugin-vue-components/resolvers&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@vueuse/core&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">resolvers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">vueTemplate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">directoryAsNamespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 使用目录作为命名空间</span>\n      <span class="token literal-property property">collapseSamePrefixes</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 折叠相同前缀的组件名</span>\n      <span class="token literal-property property">resolvers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Components 插件: 自动注册组件，使用 ElementPlusResolver 来自动导入和注册 Element Plus 组件。</p><ul><li><p>directoryAsNamespace</p><p>这个选项用于将目录名作为命名空间前缀。这样可以避免组件名冲突，并且在项目结构复杂时，更容易理解组件的来源。</p><div class="language-bash"><pre><code>src/\ncomponents/\n  common/\n    Button.vue\n  admin/\n    Button.vue\n</code></pre></div><p>启用 directoryAsNamespace: true 后，自动导入的组件名将会包含目录名，变为 CommonButton 和 AdminButton。</p></li><li><p>collapseSamePrefixes</p><p>这个选项用于折叠具有相同前缀的组件名。这样可以避免在目录结构中重复前缀的麻烦。</p></li></ul><p>以上两种自动导入配置完成后，在启动项目时会生成以下三个文件：</p><p><img src="/blog/_assets/unplugin-auto-import.90a1a806.png" alt="unplugin-auto-import"></p><ul><li><p>.eslintrc-auto-import.json</p><p>这个文件包含了自动导入的配置，主要用于 ESLint。它帮助 ESLint 识别哪些 API 是自动导入的，从而避免标记为未定义的错误。</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;globals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;ref&quot;</span><span class="token operator">:</span> <span class="token string">&quot;readonly&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;reactive&quot;</span><span class="token operator">:</span> <span class="token string">&quot;readonly&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;computed&quot;</span><span class="token operator">:</span> <span class="token string">&quot;readonly&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;defineComponent&quot;</span><span class="token operator">:</span> <span class="token string">&quot;readonly&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>auto-imports.d.ts</p><p>这个文件是 TypeScript 的声明文件，包含了自动导入的 API 的类型声明。它帮助 TypeScript 识别这些自动导入的 API，从而提供正确的类型检查和代码补全。</p><div class="language-ts"><pre><code><span class="token comment">// Generated by &#39;unplugin-auto-import&#39;</span>\n<span class="token keyword">declare</span> global <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;ref&#39;</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> reactive<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;reactive&#39;</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> computed<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;computed&#39;</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> defineComponent<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;defineComponent&#39;</span><span class="token punctuation">]</span>\n  <span class="token comment">// more auto-imports...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>components.d.ts</p><p>这个文件也是 TypeScript 的声明文件，包含了自动导入的 Vue 组件的类型声明。它帮助 TypeScript 识别这些自动导入的组件，从而提供正确的类型检查和代码补全。</p><div class="language-ts"><pre><code><span class="token comment">// Generated by &#39;unplugin-vue-components&#39;</span>\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;vue&#39;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalComponents</span> <span class="token punctuation">{</span>\n    ElButton<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;element-plus/es&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;ElButton&#39;</span><span class="token punctuation">]</span>\n    ElInput<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;element-plus/es&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;ElInput&#39;</span><span class="token punctuation">]</span>\n    <span class="token comment">// more components...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p>通过这三个文件更好地管理和使用自动导入的 API 和组件。这些文件提供了类型声明和 ESLint 配置，从而改善开发体验。</p><h2 id="自动导入-icon-图标"><a class="header-anchor" href="#自动导入-icon-图标" aria-hidden="true">#</a> 自动导入 Icon 图标</h2><h3 id="iconify-插件"><a class="header-anchor" href="#iconify-插件" aria-hidden="true">#</a> iconify 插件</h3><p>Iconify 是一个开源的图标集和图标管理工具。它提供了一个庞大的图标库，包含数千个常用图标，涵盖了各种主题和风格，如 Material Design、Font Awesome、Feather 等。这些图标可以以矢量格式（SVG）使用，适用于各种项目，如网站、移动应用、桌面应用等。</p><p><a href="https://iconify.design/docs/icon-components/vue/" target="_blank" rel="noopener noreferrer">Iconify for Vue 官方文档</a></p><p><a href="https://icon-sets.iconify.design/ep/" target="_blank" rel="noopener noreferrer">Iconify 内的 element-plus 图标</a></p><p><a href="https://github.com/unplugin/unplugin-icons" target="_blank" rel="noopener noreferrer">unplugin-icons</a></p><h4 id="安装依赖"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h4><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @iconify/vue\n</code></pre></div><h4 id="配置"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h4><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> UnpluginIcons <span class="token keyword">from</span> <span class="token string">&#39;unplugin-icons/vite&#39;</span>\n<span class="token keyword">import</span> IconsResolver <span class="token keyword">from</span> <span class="token string">&#39;unplugin-icons/resolver&#39;</span>\n<span class="token operator">...</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">directoryAsNamespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">collapseSamePrefixes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">resolvers</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token function">IconsResolver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;AutoIcon&#39;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">importStyle</span><span class="token operator">:</span> <span class="token string">&#39;sass&#39;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">// Auto use Iconify icon</span>\n      <span class="token function">UnpluginIcons</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">autoInstall</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">compiler</span><span class="token operator">:</span> <span class="token string">&#39;vue3&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">defaultStyle</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">defaultClass</span><span class="token operator">:</span> <span class="token string">&#39;unplugin-icon&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre></div><p>在 vue 页面中引入组件</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Icon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@iconify/vue&#39;</span>\n<span class="token punctuation">;</span><span class="token operator">&lt;</span>Icon icon<span class="token operator">=</span><span class="token string">&quot;mdi-light:home&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre></div><p>通过 UnoCSS 可以像 css 那样使用图标</p><p><a href="https://zhuanlan.zhihu.com/p/507462743?utm_id=0" target="_blank" rel="noopener noreferrer">Vue3！Element Plus 如何像 Element UI 一样使用 Icon?</a><a href="https://unocss.dev/presets/icons" target="_blank" rel="noopener noreferrer">Icons preset</a></p>',54)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
