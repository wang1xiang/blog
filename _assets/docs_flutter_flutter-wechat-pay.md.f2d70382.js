import{f as n,g as a,J as s}from"./common-03e46d7f.js";const t='{"title":"flutter项目相关","frontmatter":{"date":"2024-07-15","title":"flutter项目相关","tags":["flutter"],"describe":"flutter项目相关"},"headers":[{"level":2,"title":"切换源","slug":"切换源"},{"level":2,"title":"fvm 版本管理工具","slug":"fvm-版本管理工具"},{"level":3,"title":"安装","slug":"安装"},{"level":3,"title":"常用命令","slug":"常用命令"},{"level":2,"title":"工具包","slug":"工具包"},{"level":3,"title":"wechat_kit","slug":"wechat-kit"},{"level":2,"title":"dependency_overrides","slug":"dependency-overrides"},{"level":3,"title":"案例","slug":"案例"},{"level":3,"title":"注意事项","slug":"注意事项"},{"level":2,"title":"代码部分","slug":"代码部分"},{"level":3,"title":"lib 目录","slug":"lib-目录"},{"level":3,"title":"组件库 common-lib","slug":"组件库-common-lib"},{"level":3,"title":"WidgetsFlutterBinding.ensureInitialized()","slug":"widgetsflutterbinding-ensureinitialized"},{"level":3,"title":"await SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp, DeviceOrientation.portraitDown])","slug":"await-systemchrome-setpreferredorientations-deviceorientation-portraitup-deviceorientation-portraitdown"},{"level":3,"title":"await Sp().init();","slug":"await-sp-init"},{"level":3,"title":"init","slug":"init"},{"level":3,"title":"runApp","slug":"runapp"},{"level":3,"title":"home","slug":"home"}],"relativePath":"docs/flutter/flutter-wechat-pay.md","lastUpdated":1742176929928.5967}';var e={};const p=[s('<h2 id="切换源"><a class="header-anchor" href="#切换源" aria-hidden="true">#</a> 切换源</h2><p>使用国内镜像源</p><div class="language-bash"><pre><code><span class="token comment"># 1. ~/.zshrc 文件下添加以下环境变量</span>\n<span class="token comment"># flutter国内镜像站点</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">FLUTTER_STORAGE_BASE_URL</span><span class="token operator">=</span>https://storage.flutter-io.cn\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">PUB_HOSTED_URL</span><span class="token operator">=</span>https://pub.flutter-io.cn\n\n<span class="token comment"># 2. 使环境变量生效</span>\n<span class="token builtin class-name">source</span> ~/.zshrc\n</code></pre></div><h2 id="fvm-版本管理工具"><a class="header-anchor" href="#fvm-版本管理工具" aria-hidden="true">#</a> fvm 版本管理工具</h2><p><a href="https://fvm.app/" target="_blank" rel="noopener noreferrer">fvm</a> 用于切换不同版本的 flutter。</p><h3 id="安装"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash"><pre><code><span class="token comment"># install</span>\nbrew tap leoafarias/fvm\nbrew <span class="token function">install</span> fvm\n\n<span class="token comment"># uninstall</span>\nbrew uninstall fvm\nbrew untap leoafarias/fvm\n</code></pre></div><h3 id="常用命令"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><div class="language-bash"><pre><code><span class="token comment"># releases 查看远端最新15个已发布的flutter版本</span>\nfvm releases <span class="token operator">|</span> <span class="token function">tail</span> -15\n\n\n<span class="token comment"># install 安装指定版本的flutter</span>\nfvm <span class="token function">install</span> <span class="token number">3.16</span>.5\n\n<span class="token comment"># list 查看本机安装的flutter版本</span>\nfvm list\n\n<span class="token comment"># use 在某个工程中使用指定的flutter版本</span>\nfvm use <span class="token number">3.16</span>.5\n\n<span class="token comment"># remove 删除指定版本的flutter sdk</span>\nfvm remove <span class="token number">3.16</span>.5\n\n<span class="token comment"># global 全局切换flutter版本</span>\nfvm global <span class="token number">3.16</span>.5\n</code></pre></div><p>全局使用时，需要替换 PATH 变量为 fvm 的路径</p><p><img src="/blog/_assets/flutter-fvm-version.a3d91cb9.png" alt="flutter-fvm-version"></p><p>通过 which flutter 打印出的路径是否正确</p><p><img src="/blog/_assets/flutter-fvm-path.55c650d2.png" alt="flutter-fvm-path"></p><h2 id="工具包"><a class="header-anchor" href="#工具包" aria-hidden="true">#</a> 工具包</h2><h3 id="wechat-kit"><a class="header-anchor" href="#wechat-kit" aria-hidden="true">#</a> wechat_kit</h3><p>wechat_kit 是一个 Flutter 插件，用于集成微信相关的功能，如微信登录、微信支付、分享、获取用户信息等。这个插件通常用于开发需要与微信进行交互的移动应用。</p><h4 id="功能介绍"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h4><p>wechat_kit 插件提供的主要功能包括：</p><ul><li>微信登录：通过微信授权登录，并获取用户的基本信息。</li><li>微信支付：集成微信支付功能，支持在应用内发起支付请求。</li><li>微信分享：支持将文字、图片、链接等内容分享到微信的朋友圈或聊天中。</li><li>获取用户信息：在授权成功后获取微信用户的详细信息。</li></ul><h4 id="使用步骤"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h4><ol><li><p><a href="https://pub.dev/packages/wechat_kit/install" target="_blank" rel="noopener noreferrer">依赖安装</a></p><div class="language-bash"><pre><code>flutter pub <span class="token function">add</span> wechat_kit\n</code></pre></div></li><li><p>配置</p><p>在 pubspec.yaml 文件中添加以下内容：</p><div class="language-yaml"><pre><code><span class="token key atrule">wechat_kit</span><span class="token punctuation">:</span>\n  <span class="token comment">#  ios: no_pay # 默认 pay</span>\n  <span class="token key atrule">app_id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>your wechat app id<span class="token punctuation">}</span>\n  <span class="token key atrule">universal_link</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>your applinks domain<span class="token punctuation">}</span>/universal_link/$<span class="token punctuation">{</span>example_app<span class="token punctuation">}</span>/wechat/\n</code></pre></div></li><li><p>使用</p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:wechat_kit/wechat_kit.dart&#39;</span></span><span class="token punctuation">;</span>\n\n <span class="token comment">// 示例：初始化微信 SDK</span>\n <span class="token class-name">Wechat</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">registerApp</span><span class="token punctuation">(</span>appId<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;your_wechat_app_id&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n <span class="token comment">// 示例：发起微信登录</span>\n <span class="token keyword">void</span> <span class="token function">loginWithWeChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n   <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Wechat</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span>scope<span class="token punctuation">:</span> <span class="token class-name">WechatScope</span><span class="token punctuation">.</span>SNSAPI_USERINFO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>isSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token comment">// 登录成功，处理用户信息</span>\n   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n     <span class="token comment">// 登录失败，处理错误</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre></div></li></ol><p><strong>注意事项</strong></p><ul><li>微信开发者账号：要使用微信的这些功能，必须注册微信开发者账号，并在微信开放平台上创建应用，获取 AppID 和 AppSecret。</li><li>平台配置：使用该插件时，还需要进行一些平台相关的配置，如在 iOS 和 Android 项目中配置微信 SDK。</li><li>Flutter 插件版本：请注意选择合适的插件版本，版本号应与项目的 Flutter SDK 兼容。</li></ul><p>通过 wechat_kit，开发者可以方便地将微信的功能集成到 Flutter 应用中，提升应用的用户体验和功能性。</p><h2 id="dependency-overrides"><a class="header-anchor" href="#dependency-overrides" aria-hidden="true">#</a> dependency_overrides</h2><p>pubspec.yaml 的配置项，可以用于覆盖依赖项的版本约束，可以解决一下问题：</p><ol><li>版本冲突：当依赖项的版本与当前项目版本不兼容时，可以使用 dependency_overrides 强制使用特定的版本来解决问题</li><li>使用未发布的版本</li><li>临时解决问题：在等待依赖项更新或者官方解决某些问题之前，开发者可能会暂时使用 dependency_overrides 来继续开发。</li></ol><h3 id="案例"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><p>假设有一个项目，依赖了两个库 package_a 和 package_b，而这两个库都依赖于 shared_package，但它们依赖的 shared_package 版本不同，从而导致冲突。我们可以使用 dependency_overrides 来解决这个问题。</p><div class="language-yaml"><pre><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">flutter</span><span class="token punctuation">:</span>\n    <span class="token key atrule">sdk</span><span class="token punctuation">:</span> flutter\n  <span class="token key atrule">package_a</span><span class="token punctuation">:</span> ^1.0.0\n  <span class="token key atrule">package_b</span><span class="token punctuation">:</span> ^2.0.0\n\n<span class="token key atrule">dependency_overrides</span><span class="token punctuation">:</span>\n  <span class="token key atrule">shared_package</span><span class="token punctuation">:</span> ^3.0.0\n</code></pre></div><h3 id="注意事项"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>慎重使用：dependency_overrides 会强制所有依赖项使用指定的版本，这可能会引发不兼容的问题。因此，建议仅在确实必要时使用。</li><li>尽量简化：如果可能的话，尝试通过调整依赖项的版本来解决冲突，而不是直接使用 dependency_overrides。</li><li>测试覆盖：在使用 dependency_overrides 后，务必对项目进行全面的测试，确保所有功能正常运行。</li></ul><h2 id="代码部分"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h2><h3 id="lib-目录"><a class="header-anchor" href="#lib-目录" aria-hidden="true">#</a> lib 目录</h3><div class="language-text"><pre><code>.\n├── app\n│   ├── dialog\n│   ├── im\n│   ├── im_cache\n│   ├── net\n│   ├── service\n│   └── ui\n│       ├── automatic_reply\n│       ├── big_company\n│       ├── business\n│       ├── certification_management\n│       ├── city_site\n│       ├── club\n│       ├── common_im\n│       ├── common_logic\n│       ├── common_ui\n│       ├── company\n│       ├── corpus\n│       ├── credit_score\n│       ├── guide\n│       ├── identification\n│       ├── im_file_preview\n│       ├── industry_dinner\n│       ├── knowledge_gallery\n│       ├── leave_message\n│       ├── login\n│       ├── mail_list\n│       ├── main\n│       ├── market_value_lib\n│       ├── mobile_email_manager\n│       ├── my_data\n│       ├── news\n│       ├── ogp\n│       ├── order_pay\n│       ├── org\n│       ├── perfect_information\n│       ├── person\n│       ├── project\n│       ├── recruit\n│       ├── report\n│       ├── roadshow\n│       ├── role_desc\n│       ├── school\n│       ├── search\n│       ├── share\n│       ├── splash\n│       ├── subscription_no\n│       ├── subscription_number\n│       ├── user_behavior\n│       ├── web\n│       ├── word\n│       └── route.dart\n├── link_constants.dart\n├── common_lib\n│   ├── ui\n│   ├── utils\n│   └── config.dart\n├── dependencies\n│   ├── assets_picker\n│   ├── cache_img\n│   ├── common_lib\n│   ├── connect\n│   ├── device_info\n│   ├── image_compress\n│   ├── image_cropper\n│   ├── jpush\n│   ├── lbs\n│   ├── package_info\n│   ├── path_provider\n│   ├── permission_handler\n│   ├── photo_view\n│   ├── pull_to_refresh\n│   ├── sentry\n│   ├── sp\n│   ├── umeng\n│   ├── url_launcher\n│   ├── vibrate\n│   ├── video_player\n│   ├── webview\n│   └── wechat_kit\n├── generated\n├── link_method_channel.dart\n└── main.dart\n</code></pre></div><h3 id="组件库-common-lib"><a class="header-anchor" href="#组件库-common-lib" aria-hidden="true">#</a> 组件库 common-lib</h3><p>flutter 提供的组件较为简单，需要自己封装项目组件库使用</p><h3 id="widgetsflutterbinding-ensureinitialized"><a class="header-anchor" href="#widgetsflutterbinding-ensureinitialized" aria-hidden="true">#</a> WidgetsFlutterBinding.ensureInitialized()</h3><p>WidgetsFlutterBinding.ensureInitialized() 方法用于确保 Flutter 框架在执行任何需要依赖 Flutter 框架的操作之前已经初始化好。它在需要进行异步初始化操作或在应用启动早期需要保证 Flutter 框架正确初始化时非常有用。</p><h3 id="await-systemchrome-setpreferredorientations-deviceorientation-portraitup-deviceorientation-portraitdown"><a class="header-anchor" href="#await-systemchrome-setpreferredorientations-deviceorientation-portraitup-deviceorientation-portraitdown" aria-hidden="true">#</a> await SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp, DeviceOrientation.portraitDown])</h3><p>指定应用程序的屏幕方向</p><ul><li>DeviceOrientation.portraitUp：表示竖屏方向，屏幕上方朝上。</li><li>DeviceOrientation.portraitDown：表示竖屏方向，屏幕上方朝下（即设备倒置）。</li></ul><h3 id="await-sp-init"><a class="header-anchor" href="#await-sp-init" aria-hidden="true">#</a> await Sp().init();</h3><div class="language-dart"><pre><code><span class="token keyword">await</span> <span class="token class-name">Sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  bool firstIn <span class="token operator">=</span> <span class="token class-name">Sp</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">SpConst</span><span class="token punctuation">.</span>spKeyFirstIn<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>firstIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SentryUtils</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>appRunner<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_startApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">_startApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><ul><li><p>初始化存储：在应用启动时，通常需要初始化本地存储库（如 Shared Preferences），以便后续可以安全地存取数据。</p></li><li><p>读取配置或状态：获取存储中的值可以用来决定应用的行为。例如，根据 firstIn 的值决定是否显示欢迎页面。</p></li></ul><p>Shared Preferences 是 Flutter 插件，用于简单的持久化和存取应用的本地数据 ，键值对保存，需要在 pubspec.yaml 文件中添加 shared_preferences 插件的依赖：</p><div class="language-dart"><pre><code><span class="token class-name">SentryUtils</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>appRunner<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_startApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>用于在 Flutter 应用程序中初始化 Sentry 的代码，将应用启动的逻辑传递给 appRunner，可以确保 Sentry 在应用启动之前完成初始化。这可以确保在应用程序启动过程中发生的任何错误都能被捕获并报告到 Sentry。</p><h3 id="init"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h3><h4 id="bool-debug-kreleasemode"><a class="header-anchor" href="#bool-debug-kreleasemode" aria-hidden="true">#</a> bool debug = !kReleaseMode;</h4><div class="language-dart"><pre><code>\n<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">initXLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> imId <span class="token operator">=</span> <span class="token class-name">Sp</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">SpConst</span><span class="token punctuation">.</span>spImId<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token class-name">XLog</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>remoteDir<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;seeapp&#39;</span></span><span class="token punctuation">,</span> fileName<span class="token punctuation">:</span> imId<span class="token punctuation">,</span> isAutoUpload<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">XLog</span><span class="token punctuation">.</span><span class="token function">setFetchSignUrl</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;https://oneapi.qmpoa.com/api/upload/getUploadSign&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Future</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  bool debug <span class="token operator">=</span> <span class="token operator">!</span>kReleaseMode<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>kDebugMode<span class="token punctuation">)</span> <span class="token keyword">await</span> <span class="token function">initXLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>kReleaseMode: 编译时常量，为 true 表示是 Release 版本</li><li>initXLog() 初始化日志记录功能</li></ul><p>Debug 模式下不需要完全的日志记录，Release 模式下需要日志记录</p><h4 id="paintingbinding-instance-imagecache-maximumsizebytes-1000-20"><a class="header-anchor" href="#paintingbinding-instance-imagecache-maximumsizebytes-1000-20" aria-hidden="true">#</a> PaintingBinding.instance.imageCache.maximumSizeBytes = 1000 &lt;&lt; 20;</h4><ul><li>PaintingBinding 是 Flutter 框架中处理绘制和渲染相关的类。通过 instance 属性访问 PaintingBinding 的单例实例</li><li>imageCache 是 PaintingBinding 中的一个属性，用于管理图像缓存。它是 ImageCache 类的实例，负责缓存已经加载的图像以提高性能。</li><li>maximumSizeBytes 是 ImageCache 类中的一个属性，用于设置缓存的最大大小（以字节为单位）。当缓存的大小超过这个值时，缓存中的图像将被逐出以释放内存。</li></ul><p>作用：增加图像缓存的大小可以提高性能，减少图像重新加载的次数。但这需要平衡内存使用，避免过度使用内存。</p><h4 id="weboffline-weboffline-weboffline"><a class="header-anchor" href="#weboffline-weboffline-weboffline" aria-hidden="true">#</a> WebOffline webOffline = WebOffline();</h4><div class="language-dart"><pre><code><span class="token class-name">WebOffline</span> webOffline <span class="token operator">=</span> <span class="token class-name">WebOffline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwebOffline<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>处理 Web 离线缓存或离线功能</p><h3 id="runapp"><a class="header-anchor" href="#runapp" aria-hidden="true">#</a> runApp</h3><h4 id="refreshconfiguration"><a class="header-anchor" href="#refreshconfiguration" aria-hidden="true">#</a> RefreshConfiguration</h4><div class="language-dart"><pre><code><span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">RefreshConfiguration</span><span class="token punctuation">(</span>\n    shouldFooterFollowWhenNotFull<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n</code></pre></div><ul><li>RefreshConfiguration 用于配置下拉刷新和上拉加载更多的行为</li><li>shouldFooterFollowWhenNotFull: (state) =&gt; false：列表没有填满屏幕时，底部加载更多控件不会跟随列表移动。</li></ul><h4 id="overlaysupport-global"><a class="header-anchor" href="#overlaysupport-global" aria-hidden="true">#</a> OverlaySupport.global(...)</h4><ul><li>OverlaySupport 提供全局覆盖功能的组件，通常用于显示全局通知或弹出层</li><li>OverlaySupport.global 包装器，允许在应用的根级别显示覆盖层内容</li></ul><h4 id="getmaterialapp"><a class="header-anchor" href="#getmaterialapp" aria-hidden="true">#</a> GetMaterialApp(...)</h4><div class="language-dart"><pre><code><span class="token class-name">GetMaterialApp</span><span class="token punctuation">(</span>\n  builder<span class="token punctuation">:</span> <span class="token class-name">FlutterSmartDialog</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> widget<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">(</span>\n      <span class="token comment">// 设置文字大小不随系统设置改变</span>\n      data<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>textScaleFactor<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> widget<span class="token operator">!</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  debugShowCheckedModeBanner<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  defaultTransition<span class="token punctuation">:</span> <span class="token class-name">Transition</span><span class="token punctuation">.</span>cupertino<span class="token punctuation">,</span>\n  navigatorObservers<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token class-name">CommonNavigatorObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">NavigatorObserversOfCommonState</span><span class="token punctuation">.</span>instance<span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  onReady<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//测试按钮</span>\n    <span class="token comment">// if (CommonLibConfig().commonUtilsParams.isDebug &amp;&amp; Get.overlayContext != null)</span>\n    <span class="token comment">//   CommonDebug().showDebugBtn(Get.overlayContext!);</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>kDebugMode <span class="token operator">&amp;&amp;</span> <span class="token class-name">Get</span><span class="token punctuation">.</span>overlayContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token class-name">CommonDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showDebugBtn</span><span class="token punctuation">(</span><span class="token class-name">Get</span><span class="token punctuation">.</span>overlayContext<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>GetMaterialApp GetX 提供的用于管理路由、状态和其他全局配置的 Material 设计应用程序的根 Widget</li><li>FlutterSmartDialog 用于显示对话框的库</li><li>defaultTransition: Transition.cupertino：设置全局默认的页面过渡效果为 cupertino，这是 iOS 风格的页面过渡动画</li><li>CommonNavigatorObserver 继承自 NavigatorObserver， 用于监听导航事件。通过扩展 NavigatorObserver 来实现自定义的导航行为和记录。</li><li>NavigatorObserversOfCommonState 是一个单例模式的 NavigatorObserver 实例，用于管理公共状态或全局功能。</li><li>onReady 是 GetX 的 GetMaterialApp 中的一个回调函数，用于在应用启动完成后执行初始化操作，如显示调试按钮。</li><li>kDebugMode 用于确定是否在调试模式下执行特定操作，这对于在生产环境中禁用调试功能是很有用的。</li><li>Overlay 是一个在应用上层显示的层，允许在应用中插入浮动的元素。Get.overlayContext 提供了当前的 Overlay 上下文。</li></ul><h3 id="home"><a class="header-anchor" href="#home" aria-hidden="true">#</a> home</h3><h4 id="initstate"><a class="header-anchor" href="#initstate" aria-hidden="true">#</a> initState</h4><div class="language-dart"><pre><code><span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">CommonOperate</span><span class="token punctuation">.</span><span class="token function">nextFrameRefresh</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token comment">/// 判断开屏广告显示</span>\n        bool isShow <span class="token operator">=</span> <span class="token class-name">SplashAdLogic</span><span class="token punctuation">.</span><span class="token function">showSplash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n      <span class="token comment">///判断登录</span>\n      <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token class-name">Sp</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">SpConst</span><span class="token punctuation">.</span>spKeyLoginUserToken<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      child <span class="token operator">=</span> <span class="token class-name">LinkRoute</span><span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// 获取开屏广告图片</span>\n    <span class="token class-name">SplashAdLogic</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><ul><li>CommonOperate.nextFrameRefresh 用于在下一帧更新中执行特定的操作</li><li>await Future.delayed(Duration(milliseconds: 300))： 如果需要显示广告，则等待 300 毫秒。这个延迟可能用于展示广告的时间。</li><li>LinkRoute.getRoot(uuid)： 根据获取的 uuid 决定跳转到应用的哪个根页面。LinkRoute.getRoot 是一个静态方法，返回根页面的 Widget。</li></ul><h4 id="buildlaunch"><a class="header-anchor" href="#buildlaunch" aria-hidden="true">#</a> <code>_buildLaunch</code></h4><div class="language-dart"><pre><code><span class="token class-name">Widget</span> <span class="token function">_buildLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">const</span> <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n        padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">safeBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;assets/images/3.0x/launch_bottom_image.png&#39;</span></span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">252</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>_buildLaunch</code> 可以用于创建启动页或引导页。通常，这个页面会在应用启动时显示，并可能包含应用名称、logo 或其他欢迎信息。</p>',75)];e.render=function(s,t,e,o,c,l){return n(),a("div",null,p)};export{t as __pageData,e as default};
