import{f as n,g as a,J as s}from"./common-03e46d7f.js";const e='{"title":"前后端项目部署指南","frontmatter":{"date":"2024-06-18","title":"前后端项目部署指南","tags":["work"],"describe":"前后端项目部署指南"},"headers":[{"level":2,"title":"1. 项目中","slug":"_1-项目中"},{"level":2,"title":"2. 服务器/hwdata/service/dnmp/nginx 路径拉下最新代码，保证 conf.d 中有刚刚添加的 conf 配置","slug":"_2-服务器-hwdata-service-dnmp-nginx-路径拉下最新代码，保证-conf-d-中有刚刚添加的-conf-配置"},{"level":2,"title":"3. 重启 nginx docker 部署的","slug":"_3-重启-nginx-docker-部署的"},{"level":2,"title":"4. bff 通过 CI 部署","slug":"_4-bff-通过-ci-部署"},{"level":3,"title":"项目对应 gitlab-ci","slug":"项目对应-gitlab-ci"},{"level":3,"title":"修改配置好的 runner","slug":"修改配置好的-runner"},{"level":3,"title":"部署","slug":"部署"},{"level":2,"title":"5. 前端通过 jenkins 部署","slug":"_5-前端通过-jenkins-部署"},{"level":3,"title":"创建 item","slug":"创建-item"}],"relativePath":"docs/work/server-deploy.md","lastUpdated":1742176684231.0264}';var t={};const p=[s('<h2 id="_1-项目中"><a class="header-anchor" href="#_1-项目中" aria-hidden="true">#</a> 1. 项目中</h2><p><a href="https://git.qmpoa.com/ops/qmp_ops_dnmp/-/commits/master" target="_blank" rel="noopener noreferrer">https://git.qmpoa.com/ops/qmp_ops_dnmp/-/commits/master</a> /services/nginx/conf.d 添加前端 nginx 域名和 bff nginx 接口 /services/nginx/prodconf.d 添加前端 nginx 域名和 bff nginx 接口</p><h2 id="_2-服务器-hwdata-service-dnmp-nginx-路径拉下最新代码，保证-conf-d-中有刚刚添加的-conf-配置"><a class="header-anchor" href="#_2-服务器-hwdata-service-dnmp-nginx-路径拉下最新代码，保证-conf-d-中有刚刚添加的-conf-配置" aria-hidden="true">#</a> 2. 服务器/hwdata/service/dnmp/nginx 路径拉下最新代码，保证 conf.d 中有刚刚添加的 conf 配置</h2><div class="language-bash"><pre><code><span class="token function">git</span> pull origin master\n</code></pre></div><h2 id="_3-重启-nginx-docker-部署的"><a class="header-anchor" href="#_3-重启-nginx-docker-部署的" aria-hidden="true">#</a> 3. 重启 nginx docker 部署的</h2><div class="language-bash"><pre><code><span class="token comment">#  校验语法是否正确</span>\n<span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> nginx122_c nginx -t\n<span class="token function">docker</span> <span class="token builtin class-name">exec</span> nginx122_c nginx -s reload\n</code></pre></div><h2 id="_4-bff-通过-ci-部署"><a class="header-anchor" href="#_4-bff-通过-ci-部署" aria-hidden="true">#</a> 4. bff 通过 CI 部署</h2><p>gitlab-runner 配置</p><div class="language-bash"><pre><code>gitlab-runner register --url https://git.qmpoa.com/ --registration-token 令牌 --executor <span class="token function">docker</span> --docker-volumes /var/run/docker.sock:/var/run/docker.sock --docker-privileged\n</code></pre></div><div class="language-bash"><pre><code><span class="token comment"># runner重启</span>\ngitlab-runner restart\ngitlab-runner status\n<span class="token comment"># 配置修改</span>\n<span class="token function">vim</span> /etc/gitlab-runner/config.toml\n</code></pre></div><p>保证https://git.qmpoa.com/fe/oneid_admin_bff/-/settings/ci_cd可用runners</p><p><img src="/_assets/bff-runners-status.75144bb3.png" alt="bff-runners-status"></p><h3 id="项目对应-gitlab-ci"><a class="header-anchor" href="#项目对应-gitlab-ci" aria-hidden="true">#</a> 项目对应 gitlab-ci</h3><div class="language-yml"><pre><code><span class="token key atrule">variables</span><span class="token punctuation">:</span>\n  <span class="token key atrule">VERSION</span><span class="token punctuation">:</span> <span class="token string">&#39;oneid_admin_bff&#39;</span>\n  <span class="token key atrule">OLDVERSION</span><span class="token punctuation">:</span> <span class="token string">&#39;oneid_admin_bff-temporary&#39;</span>\n  <span class="token key atrule">VERSION_PROD</span><span class="token punctuation">:</span> <span class="token string">&#39;oneid_admin_bff&#39;</span>\n  <span class="token key atrule">OLDVERSION_PROD</span><span class="token punctuation">:</span> <span class="token string">&#39;oneid_admin_bff-temporary&#39;</span>\n\n<span class="token key atrule">stages</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> deploy\n\n<span class="token comment"># image: node:16.19-slim</span>\n\n<span class="token key atrule">cache</span><span class="token punctuation">:</span>\n  <span class="token key atrule">paths</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> node_modules/\n    <span class="token punctuation">-</span> logs/\n\n<span class="token key atrule">build_image.oneid_admin_bff</span><span class="token punctuation">:</span>\n  <span class="token key atrule">image</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>dind\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy\n  <span class="token key atrule">only</span><span class="token punctuation">:</span>\n    <span class="token key atrule">refs</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> test\n    <span class="token comment"># changes:</span>\n    <span class="token comment">#   - .gitlab-ci.yml</span>\n  <span class="token key atrule">tags</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> test\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> echo &quot;=====start deploy======&quot;\n    <span class="token comment"># 重命名镜像</span>\n    <span class="token punctuation">-</span> <span class="token punctuation">&gt;</span><span class="token scalar string">\n      if [ $(docker image ls -aq --filter reference=$VERSION) ]; then\n        echo &quot;=====inline======&quot;\n        docker tag $VERSION $OLDVERSION\n        docker rmi $VERSION\n      fi</span>\n    <span class="token comment"># 通过Dockerfile生成镜像</span>\n    <span class="token punctuation">-</span> docker build <span class="token punctuation">-</span>t $VERSION .\n    <span class="token comment"># 删除已经在运行的容器，优雅停止</span>\n    <span class="token punctuation">-</span> <span class="token punctuation">&gt;</span><span class="token scalar string">\n      if [ $(docker ps -aq --filter name=oneid_admin_bff) ]; then\n        docker container stop oneid_admin_bff\n        docker rm oneid_admin_bff\n      fi</span>\n    <span class="token comment"># 通过镜像启动容器</span>\n    <span class="token punctuation">-</span> docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8528<span class="token punctuation">:</span>8528 <span class="token punctuation">-</span>e TZ=Asia/Shanghai <span class="token punctuation">-</span>v /hwdata/www/oneid_admin_bff/docker<span class="token punctuation">-</span>host.json<span class="token punctuation">:</span>/usr/src/docker<span class="token punctuation">-</span>host.json <span class="token punctuation">-</span><span class="token punctuation">-</span>restart=always <span class="token punctuation">-</span><span class="token punctuation">-</span>name oneid_admin_bff $VERSION\n\n    <span class="token comment"># 删除老镜像</span>\n    <span class="token punctuation">-</span> if <span class="token punctuation">[</span> $(docker image ls <span class="token punctuation">-</span>aq <span class="token punctuation">-</span><span class="token punctuation">-</span>filter reference=$OLDVERSION) <span class="token punctuation">]</span>; then docker image rmi $OLDVERSION;fi\n\n    <span class="token punctuation">-</span> echo &quot;=====end deploy======&quot;\n  <span class="token comment"># services:</span>\n  <span class="token comment">#   - docker:dind</span>\n\n<span class="token key atrule">build_image.oneid_admin_bff-prod</span><span class="token punctuation">:</span>\n  <span class="token key atrule">image</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>dind\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy\n  <span class="token key atrule">only</span><span class="token punctuation">:</span>\n    <span class="token key atrule">refs</span><span class="token punctuation">:</span>\n      <span class="token comment">#- merge_requests</span>\n      <span class="token punctuation">-</span> master\n    <span class="token comment"># changes:</span>\n    <span class="token comment">#   - .gitlab-ci.yml</span>\n  <span class="token key atrule">tags</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> prod\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> echo &quot;=====start deploy======&quot;\n    <span class="token comment"># 重命名镜像</span>\n    <span class="token punctuation">-</span> <span class="token punctuation">&gt;</span><span class="token scalar string">\n      if [ $(docker image ls -aq --filter reference=$VERSION_PROD) ]; then\n        docker tag $VERSION_PROD $OLDVERSION_PROD\n        docker rmi $VERSION_PROD\n      fi</span>\n    <span class="token comment"># 通过Dockerfile生成qmp_mobile_ddm镜像</span>\n    <span class="token punctuation">-</span> docker build <span class="token punctuation">-</span>t $VERSION_PROD .\n    <span class="token comment"># 删除已经在运行的容器，优雅停止</span>\n    <span class="token punctuation">-</span> <span class="token punctuation">&gt;</span><span class="token scalar string">\n      if [ $(docker ps -aq --filter name=oneid_admin_bff) ]; then\n        docker container stop oneid_admin_bff\n        docker rm oneid_admin_bff\n      fi</span>\n    <span class="token comment"># 通过镜像启动容器</span>\n    <span class="token punctuation">-</span> docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8528<span class="token punctuation">:</span>8528 <span class="token punctuation">-</span>e TZ=Asia/Shanghai <span class="token punctuation">-</span>v /hwdata/www/oneid_admin_bff/docker<span class="token punctuation">-</span>host.json<span class="token punctuation">:</span>/usr/src/docker<span class="token punctuation">-</span>host.json <span class="token punctuation">-</span><span class="token punctuation">-</span>restart=always <span class="token punctuation">-</span><span class="token punctuation">-</span>name oneid_admin_bff $VERSION_PROD\n\n    <span class="token comment"># 删除老镜像</span>\n    <span class="token punctuation">-</span> if <span class="token punctuation">[</span> $(docker image ls <span class="token punctuation">-</span>aq <span class="token punctuation">-</span><span class="token punctuation">-</span>filter reference=$OLDVERSION_PROD) <span class="token punctuation">]</span>; then docker image rmi $OLDVERSION_PROD;fi\n    <span class="token punctuation">-</span> echo &quot;=====end deploy======&quot;\n  <span class="token comment"># services:</span>\n  <span class="token comment"># - docker:dind</span>\n</code></pre></div><h3 id="修改配置好的-runner"><a class="header-anchor" href="#修改配置好的-runner" aria-hidden="true">#</a> 修改配置好的 runner</h3><p>tags 对应 <code>.gitlab-ci.yml</code> 的 tags</p><p><img src="/_assets/bff-runner-edit.33840670.png" alt="bff-runner-edit"></p><h3 id="部署"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h3><p>测试提交到 test、正式提交到 mater</p><h2 id="_5-前端通过-jenkins-部署"><a class="header-anchor" href="#_5-前端通过-jenkins-部署" aria-hidden="true">#</a> 5. 前端通过 jenkins 部署</h2><h3 id="创建-item"><a class="header-anchor" href="#创建-item" aria-hidden="true">#</a> 创建 item</h3><p>复制之前的项目，修改远程目录的路径即可</p><p><img src="/_assets/jenkins-admin.169aab6b.png" alt="jenkins-admin"></p>',23)];t.render=function(s,e,t,o,c,i){return n(),a("div",null,p)};export{e as __pageData,t as default};
