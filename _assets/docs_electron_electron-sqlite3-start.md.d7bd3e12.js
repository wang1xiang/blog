import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"Electron 中使用【SQLite】数据库","frontmatter":{"date":"2024-01-06","title":"Electron 中使用【SQLite】数据库","tags":["electron"],"describe":"Electron 中使用【SQLite】数据库"},"headers":[{"level":2,"title":"SQLite 介绍","slug":"sqlite-介绍"},{"level":3,"title":"创建表","slug":"创建表"},{"level":3,"title":"删除表","slug":"删除表"},{"level":3,"title":"查询数据中所有表","slug":"查询数据中所有表"},{"level":3,"title":"添加列","slug":"添加列"},{"level":3,"title":"删除列","slug":"删除列"},{"level":3,"title":"插入数据","slug":"插入数据"},{"level":3,"title":"更新数据","slug":"更新数据"},{"level":3,"title":"删除数据","slug":"删除数据"},{"level":3,"title":"查询数据","slug":"查询数据"},{"level":3,"title":"SQLite 占位符写法","slug":"sqlite-占位符写法"},{"level":2,"title":"Electron 中使用 SQLite","slug":"electron-中使用-sqlite"},{"level":3,"title":"Electron 中为什么要这样使用？","slug":"electron-中为什么要这样使用？"},{"level":3,"title":"sqlite3 使用步骤","slug":"sqlite3-使用步骤"},{"level":3,"title":"electron 使用步骤","slug":"electron-使用步骤"},{"level":3,"title":"完整代码","slug":"完整代码"}],"relativePath":"docs/electron/electron-sqlite3-start.md","lastUpdated":1743558905234.9429}';var t={};const o=[a('<h2 id="sqlite-介绍"><a class="header-anchor" href="#sqlite-介绍" aria-hidden="true">#</a> SQLite 介绍</h2><p><a href="https://github.com/TryGhost/node-sqlite3/wiki/API#database" target="_blank" rel="noopener noreferrer">SQLite</a> 是一个轻量级的数据库系统，通常用于嵌入式系统和桌面应用程序。</p><h3 id="创建表"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h3><p>CREATE TABLE 表名 (</p><p>列 1 数据类型,</p><p>列 2 数据类型,</p><p>列 3 数据类型,</p><p>...</p><p>);</p><div class="language-js"><pre><code>create table <span class="token function">users</span> <span class="token punctuation">(</span>\nid <span class="token constant">INTEGER</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token constant">AUTOINCREMENT</span><span class="token punctuation">,</span>\nname text<span class="token punctuation">,</span>\nage <span class="token constant">INTEGER</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>注：<strong>建表的时候确定不了该表是否存在</strong></p><div class="language-sql"><pre><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> users<span class="token punctuation">;</span>\n</code></pre></div><h3 id="删除表"><a class="header-anchor" href="#删除表" aria-hidden="true">#</a> 删除表</h3><p>DROP TABLE 表名;</p><div class="language-sql"><pre><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> users<span class="token punctuation">;</span>\n</code></pre></div><h3 id="查询数据中所有表"><a class="header-anchor" href="#查询数据中所有表" aria-hidden="true">#</a> 查询数据中所有表</h3><div class="language-sql"><pre><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sqlite_master <span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">&#39;table&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="添加列"><a class="header-anchor" href="#添加列" aria-hidden="true">#</a> 添加列</h3><p>ALTER TABLE 表名 ADD COLUMN 列名 数据类型;</p><div class="language-sql"><pre><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> users <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> age <span class="token keyword">INT</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="删除列"><a class="header-anchor" href="#删除列" aria-hidden="true">#</a> 删除列</h3><p>ALTER TABLE 表名 DROP COLUMN 列名;</p><div class="language-sql"><pre><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> users <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> age<span class="token punctuation">;</span>\n</code></pre></div><h3 id="插入数据"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h3><p>INSERT INTO 表名 (列 1, 列 2, 列 3, ...) VALUES (值 1, 值 2, 值 3, ...);</p><div class="language-sql"><pre><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;John3&#39;</span><span class="token punctuation">,</span> <span class="token number">325</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>注：<strong>不是数字的值需要单引号或双引号包括</strong></p><h3 id="更新数据"><a class="header-anchor" href="#更新数据" aria-hidden="true">#</a> 更新数据</h3><p>UPDATE 表名 SET 列 1=值 1, 列 2=值 2, ... WHERE 条件;</p><div class="language-sql"><pre><code><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> age<span class="token operator">=</span><span class="token number">26</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="删除数据"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h3><p>DELETE FROM 表名 WHERE 条件;</p><div class="language-sql"><pre><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="查询数据"><a class="header-anchor" href="#查询数据" aria-hidden="true">#</a> 查询数据</h3><ol><li><p>查询所有数据</p><p>SELECT * FROM 表名;</p><div class="language-sql"><pre><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users<span class="token punctuation">;</span>\n</code></pre></div></li><li><p>查询特定列的数据</p><p>SELECT 列名 1, 列名 2 FROM 表名;</p><div class="language-sql"><pre><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> age <span class="token keyword">FROM</span> users<span class="token punctuation">;</span>\n</code></pre></div></li><li><p>查询筛选条件数据</p><p>SELECT * FROM 表名 WHERE 条件;</p><div class="language-sql"><pre><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>分页查询</p><p>SELECT * FROM 要查询的表名 LIMIT 每页的行数 OFFSET 起始行号;</p><div class="language-sql"><pre><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">LIMIT</span> page_size <span class="token keyword">OFFSET</span> start_row<span class="token punctuation">;</span>\n</code></pre></div></li></ol><h3 id="sqlite-占位符写法"><a class="header-anchor" href="#sqlite-占位符写法" aria-hidden="true">#</a> SQLite 占位符写法</h3><div class="language-sql"><pre><code>db<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&quot;UPDATE tbl SET name = ? WHERE id = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndb<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&quot;UPDATE tbl SET name = ? WHERE id = ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndb<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&quot;UPDATE tbl SET name = $name WHERE id = $id&quot;</span><span class="token punctuation">,</span> { $id: <span class="token number">2</span><span class="token punctuation">,</span> $name: <span class="token string">&quot;bar&quot;</span>\n}<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="electron-中使用-sqlite"><a class="header-anchor" href="#electron-中使用-sqlite" aria-hidden="true">#</a> Electron 中使用 SQLite</h2><p>在 Electron 应用中，SQLite 数据库的逻辑通常写在主进程中，而不是渲染进程。</p><h3 id="electron-中为什么要这样使用？"><a class="header-anchor" href="#electron-中为什么要这样使用？" aria-hidden="true">#</a> Electron 中为什么要这样使用？</h3><ol><li><p>安全性</p><p>在 Electron 应用中，主进程和渲染进程通常具有不同的职责和安全性考虑。主进程负责管理应用的生命周期、创建和与数据库进行交互等任务，而渲染进程则负责显示用户界面和处理用户输入。将数据库逻辑放在主进程中可以增加安全性，因为主进程通常具有更严格的权限和访问控制。</p></li><li><p>资源管理</p><p>SQLite 数据库的连接和操作需要资源管理。将数据库逻辑放在主进程中可以更好地控制这些资源，避免在渲染进程中产生资源泄漏或竞争条件。</p></li><li><p>异步操作</p><p>SQLite 数据库操作通常是异步的，需要回调函数或 Promises 来处理结果。将数据库逻辑放在主进程中可以更好地处理这些异步操作，避免在渲染进程中产生阻塞或延迟。</p></li><li><p>简化应用结构</p><p>将数据库逻辑放在主进程中可以简化应用的结构，使代码更易于维护和调试。这样可以确保应用的不同部分（如渲染进程和主进程）能够更好地分离和独立工作。</p></li></ol><p>渲染进程中：通过主进程、渲染进程的 IPC 通信进行调用。</p><h3 id="sqlite3-使用步骤"><a class="header-anchor" href="#sqlite3-使用步骤" aria-hidden="true">#</a> sqlite3 使用步骤</h3><h4 id="安装依赖"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h4><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> sqlite3\n<span class="token comment"># or</span>\n<span class="token function">yarn</span> <span class="token function">install</span> sqlite3\n</code></pre></div><h4 id="数据库实例以及数据库本地文件"><a class="header-anchor" href="#数据库实例以及数据库本地文件" aria-hidden="true">#</a> 数据库实例以及数据库本地文件</h4><div class="language-js"><pre><code><span class="token comment">//　　实例</span>\n<span class="token keyword">let</span> db\n<span class="token comment">//　　数据库表本地文件</span>\n<span class="token keyword">const</span> db_path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">getAppPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;/db-config/sqlite3.db&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="连接数据库"><a class="header-anchor" href="#连接数据库" aria-hidden="true">#</a> 连接数据库</h4><div class="language-js"><pre><code><span class="token comment">//　　连接数据库（electron初始化完成时调用）</span>\ndb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sqlite3<span class="token punctuation">.</span>Database</span><span class="token punctuation">(</span>db_path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//　　err错误信息　　})</span>\n</code></pre></div><h4 id="运行-sql-语句"><a class="header-anchor" href="#运行-sql-语句" aria-hidden="true">#</a> 运行 SQL 语句</h4><p><code>run(sql [, param, ...] [, callback])</code> 参数运行 SQL 查询，然后调用回调</p><div class="language-js"><pre><code>db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>params <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">//　　err 错误信息</span>\n  <span class="token comment">//　　rows返回值</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><code>all(sql [, param, ...] [, callback])</code> 参数运行 SQL 查询，然后调用所有结果行的回调</p><div class="language-js"><pre><code>db<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>params <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">//　　err 错误信息</span>\n  <span class="token comment">//　　rows返回值</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="关闭数据库"><a class="header-anchor" href="#关闭数据库" aria-hidden="true">#</a> 关闭数据库</h4><div class="language-js"><pre><code><span class="token comment">//　　关闭数据库（electron应用程序开始关闭窗口时调用）</span>\ndb <span class="token operator">&amp;&amp;</span> db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="electron-使用步骤"><a class="header-anchor" href="#electron-使用步骤" aria-hidden="true">#</a> electron 使用步骤</h3><h4 id="preload-预加载"><a class="header-anchor" href="#preload-预加载" aria-hidden="true">#</a> preload 预加载</h4><p><code>ipcRenderer.invoke</code> 主要用于在渲染进程中发送消息给主进程，并接收主进程的返回结果。</p><p>它比传统的 ipcRenderer.send 和 ipcMain.on 方式更为方便，因为使用 invoke 可以直接收到主进程返回的信息，而不需要在主进程中再发送一个返回结果。</p><div class="language-js"><pre><code><span class="token comment">/** sqlite */</span>\n<span class="token function-variable function">onExecSQL</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">params</span><span class="token operator">:</span> SqliteType</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token constant">IPC_R2M2R</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;sqlite:execSQL&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="主进程"><a class="header-anchor" href="#主进程" aria-hidden="true">#</a> 主进程</h4><p><code>ipcMain.handle</code> 是 Electron 中主进程用来处理渲染进程发送过来的异步或同步消息的方法。这个方法可以接收一个事件和一个回调函数，事件是由渲染进程发送过来的消息，回调函数则是用来处理这个消息的函数。</p><p><code>ipcMain.handle</code> 方法支持异步，触发的方法是 ipcRenderer.invoke</p><div class="language-js"><pre><code>ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&#39;sqlite:execSQL&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">execSQL</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="渲染进程"><a class="header-anchor" href="#渲染进程" aria-hidden="true">#</a> 渲染进程</h4><div class="language-js"><pre><code>window<span class="token punctuation">.</span>electronIPC<span class="token punctuation">.</span><span class="token function">onExecSQL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">//　　res返回值</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="完整代码"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h3><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> onSplicingQuotation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SqlTypeMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/views/EDB/utils/variable&#39;</span>\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 日志\n * @Date: 2024/1/2 13:41\n */</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">errorger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">strs</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;【error】&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>strs<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: ERROR记录\n * @Date: 2024/1/2 16:04\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onCheckExecSQLRes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  fun<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n  <span class="token literal-property property">sql</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n  params<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">,</span>\n<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>electronIPC\n      <span class="token punctuation">.</span><span class="token function">onExecSQL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> status<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> res\n        status <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">errorger</span><span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">errorger</span><span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 创建表格\n * @Date: 2023/12/29 10:31\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onCreateTable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">table_name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span>\n    <span class="token string">&#39;CREATE TABLE IF NOT EXISTS &#39;</span> <span class="token operator">+</span>\n    table_name <span class="token operator">+</span>\n    <span class="token string">&#39; (id INT PRIMARY KEY, company TEXT);&#39;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 删除表格\n * @Date: 2023/12/29 10:31\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onDeleteTable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">table_name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;DROP TABLE &#39;</span> <span class="token operator">+</span> table_name <span class="token operator">+</span> <span class="token string">&#39;;&#39;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description:  查询数据库有哪些表\n * @Date: 2024/1/2 11:24\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onSelectTable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM sqlite_master WHERE type = &#39;table&#39;;&quot;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fun</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> sql <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description:\n * @Date: 2024/1/9 18:55\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onSelectTableColumn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">table_name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;PRAGMA table_info(&#39;</span> <span class="token operator">+</span> table_name <span class="token operator">+</span> <span class="token string">&#39;);&#39;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fun</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> sql <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 添加列，SQLite不支持批量\n * @Date: 2023/12/29 10:59\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onAddTableColumn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token parameter"><span class="token literal-property property">table_name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n  <span class="token literal-property property">column_name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n  <span class="token literal-property property">column_type</span><span class="token operator">:</span> string</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span>\n    <span class="token string">&#39;ALTER TABLE &#39;</span> <span class="token operator">+</span>\n    table_name <span class="token operator">+</span>\n    <span class="token string">&#39; ADD COLUMN &#39;</span> <span class="token operator">+</span>\n    column_name <span class="token operator">+</span>\n    <span class="token string">&#39; &#39;</span> <span class="token operator">+</span>\n    SqlTypeMap<span class="token punctuation">[</span>column_type <span class="token operator">||</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span>\n    <span class="token string">&#39;;&#39;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 删除列，SQLite不支持批量\n * @Date: 2024/1/2 09:48\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onDeleteTableColumn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token parameter"><span class="token literal-property property">table_name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n  <span class="token literal-property property">column_name</span><span class="token operator">:</span> string</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span>\n    <span class="token string">&#39;ALTER TABLE &#39;</span> <span class="token operator">+</span> table_name <span class="token operator">+</span> <span class="token string">&#39; DROP COLUMN &#39;</span> <span class="token operator">+</span> column_name <span class="token operator">+</span> <span class="token string">&#39;;&#39;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 添加表格数据\n * @Date: 2024/1/2 10:14\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onAddTableData</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token parameter"><span class="token literal-property property">table_name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n  <span class="token literal-property property">table_data</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;</span></span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">columns</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>table_data<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>columns<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">params</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>table_data<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">values</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span>\n    <span class="token string">&#39;INSERT INTO &#39;</span> <span class="token operator">+</span>\n    table_name <span class="token operator">+</span>\n    <span class="token string">&#39; (&#39;</span> <span class="token operator">+</span>\n    columns<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;) VALUES (&#39;</span> <span class="token operator">+</span>\n    values<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;);&#39;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql<span class="token punctuation">,</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 删除表格数据（id）\n * @Date: 2024/1/2 10:19\n */</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onDeleteTableData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">table_name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">row_id</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span>\n    <span class="token string">&#39;DELETE FROM &#39;</span> <span class="token operator">+</span>\n    table_name <span class="token operator">+</span>\n    <span class="token string">&#39; WHERE id = &#39;</span> <span class="token operator">+</span>\n    <span class="token function">onSplicingQuotation</span><span class="token punctuation">(</span>row_id<span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;;&#39;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 修改表格数据（id）\n * @Date: 2024/1/2 14:47\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onUpdateTableData</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token parameter"><span class="token literal-property property">table_name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n  <span class="token literal-property property">row_id</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n  <span class="token literal-property property">update_data</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;</span></span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">columns</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>update_data<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>columns<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">params</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>update_data<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">set_sql</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  columns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    set_sql<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39;= ?&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">sql</span><span class="token operator">:</span> string <span class="token operator">=</span>\n    <span class="token string">&#39;UPDATE &#39;</span> <span class="token operator">+</span>\n    table_name <span class="token operator">+</span>\n    <span class="token string">&#39; SET &#39;</span> <span class="token operator">+</span>\n    set_sql<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39; WHERE id = &#39;</span> <span class="token operator">+</span>\n    <span class="token function">onSplicingQuotation</span><span class="token punctuation">(</span>row_id<span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;;&#39;</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql<span class="token punctuation">,</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * @Author: LGJ\n * @Description: 运行指定sql\n * @Date: 2024/2/21 11:11\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">onRunAppointSql</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">sql</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">onCheckExecSQLRes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fun</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> sql <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',69)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
