import{f as e,g as s,J as n}from"./common-03e46d7f.js";const a='{"title":"前端抓包工具——Whistle环境快速搭建","frontmatter":{"date":"2022-09-10","title":"前端抓包工具——Whistle环境快速搭建","tags":["tool"],"describe":"记一次调试线上问题"},"headers":[{"level":2,"title":"whistle介绍","slug":"whistle介绍"},{"level":2,"title":"安装启动","slug":"安装启动"},{"level":2,"title":"whistle页面介绍","slug":"whistle页面介绍"},{"level":3,"title":"Network","slug":"network"},{"level":3,"title":"Rules","slug":"rules"},{"level":3,"title":"Values","slug":"values"},{"level":3,"title":"Plugins","slug":"plugins"}],"relativePath":"docs/tool/whistle.md","lastUpdated":1742177050388.4575}';var t={};const p=[n('<h2 id="whistle介绍"><a class="header-anchor" href="#whistle介绍" aria-hidden="true">#</a> whistle介绍</h2><p><a href="https://wproxy.org/whistle/" target="_blank" rel="noopener noreferrer">官网</a>、<a href="https://github.com/avwo/whistle" target="_blank" rel="noopener noreferrer">github</a></p><p>基于Node实现的web调试代理工具，对前端很友好</p><h2 id="安装启动"><a class="header-anchor" href="#安装启动" aria-hidden="true">#</a> 安装启动</h2><ol><li><p>如果没有node环境，先安装node</p></li><li><p>安裝whistle</p><div class="language-bash"><pre><code> <span class="token comment"># 全局安装whistle</span>\n <span class="token function">npm</span> i -g whistle\n\n <span class="token comment"># 启动 默认端口8899，可以通过-p指定 --init会为计算机安装证书</span>\n w2 start -p <span class="token number">8899</span> --init\n</code></pre></div><p>启动后，打开浏览器输入<a href="http://127.0.0.1:8899/#network" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8899/#network</a>访问</p></li><li><p>浏览器设置代理</p><p>google浏览器安装<a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener noreferrer">SwitchyOmega</a>插件，安装完成后需要配置proxy，将浏览器代理到8899端口（whistle的端口），如下图 <img src="/blog/_assets/whistleConfig.f44973ac.jpg" alt="whistleConfig.jpg"></p><p>设置好后一定要点击<code>应用选项</code>，否则不会生效<br> 点击whistle插件，选择刚刚设置的proxy<br><img src="/blog/_assets/whistleCrx.e659c54d.jpg" alt="whistleCrx.jpg"><br> 打开<a href="http://127.0.0.1:8899/#network" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8899/#network</a>，看到以下页面，就说明成功了 <img src="/blog/_assets/whistlePage.64368f8c.jpg" alt="whistle.jpg"></p></li><li><p><a href="https://wproxy.org/whistle/webui/https.html" target="_blank" rel="noopener noreferrer">开启捕获HTTPS请求</a>，一定得开，不然https请求不会正常被捕获</p></li></ol><h2 id="whistle页面介绍"><a class="header-anchor" href="#whistle页面介绍" aria-hidden="true">#</a> whistle页面介绍</h2><p>由顶部工具栏、左侧菜单栏和中间内容区域组成</p><h3 id="network"><a class="header-anchor" href="#network" aria-hidden="true">#</a> Network</h3><p>展示抓到的网络请求及详细信息</p><h3 id="rules"><a class="header-anchor" href="#rules" aria-hidden="true">#</a> Rules</h3><p>设置代理规则</p><ol><li><p>配置host</p><p>类似于修改全局host文件，为某个域名或具体的url指定ip，绕过dns解析过程，让请求直接到达指定的 ip <br></p><div class="language-bash"><pre><code><span class="token comment"># 为github配置域名解析</span>\n<span class="token number">140.82</span>.113.3  github.com\n</code></pre></div><p>本地启动一个vite服务，在rules中创建一个test文件 右键 -&gt; create -&gt; test，添加以下规则</p><div class="language-bash"><pre><code><span class="token comment"># 将百度代理本地vite项目上</span>\n<span class="token number">127.0</span>.0.1:5173  baidu.com\n</code></pre></div><p>规则反着写也是一样的</p><div class="language-bash"><pre><code>baidu.com  <span class="token number">127.0</span>.0.1:5173\n</code></pre></div><p>当访问baidu.com时就会跳到vite项目<br></p><p>可以在Network中查看这条请求的详情 <img src="/blog/_assets/baidu-proxy.d32525a8.jpg" alt="baidu-proxy.jpg"> 开发中就可以使用这种方式，将测试环境的域名代理到本地的 localhost，这样就能够在本地请求到测试环境的接口，类似于webpack和vite的proxy设置</p></li><li><p>替换html文件</p><p>将上述的test文件改为</p><div class="language-bash"><pre><code><span class="token comment"># 将线上环境的网页内容替换为本地</span>\nhttps://app-test.quickcep.com file://<span class="token variable">${projectPath}</span>/index.html\n</code></pre></div><p>此处的<code>projectPath</code>是在<a href="http://127.0.0.1:8899/#values%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8F%98%E9%87%8F%EF%BC%8C%E5%86%8D%E6%AC%A1%E6%89%93%E5%BC%80baidu.com%EF%BC%8C%E5%B0%B1%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%8F%98%E6%88%90%E4%BA%86%E6%9C%AC%E5%9C%B0index.html" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8899/#values中配置的变量，再次打开baidu.com，就会看到变成了本地index.html</a>中的内容了</p></li><li><p>替换静态资源</p><div class="language-bash"><pre><code> <span class="token comment"># 将百度代理本地vite项目上</span>\n <span class="token number">127.0</span>.0.1:3000 baidu.com\n\n <span class="token comment"># 将线上环境的网页内容替换为本地</span>\n <span class="token comment"># https://app-test.quickcep.com file://${projectPath}/index.html</span>\n\n <span class="token comment"># 将线上项目的js替换为本地资源进行调试</span>\n https://app-test.quickcep.com/config.js file://<span class="token variable">${projectPath}</span>/config.\n\n</code></pre></div><p>如果线上环境遇到bug时，可以将本地的静态资源通过代理取代线上环境的资源进行调试 <img src="/blog/_assets/jsresource.746f5605.jpg" alt="jsresource.jpg"></p></li><li><p>模拟接口报错</p><div class="language-bash"><pre><code><span class="token comment"># 通过修改statusCode 模拟接口报错</span>\nhttps://app-test.quickcep.com/store/user/getUserInfo statusCode://500\n</code></pre></div></li><li><p>模拟接口超时</p><div class="language-bash"><pre><code>https://app-test.quickcep.com/store/user/getUserInfo reqDelay://5000 enable://abort\n</code></pre></div></li><li><p>修改返回内容</p><div class="language-bash"><pre><code><span class="token comment"># 模拟接口返回</span>\nhttps://app-test.quickcep.com/store/user/getUserInfo resBody://<span class="token punctuation">{</span>getUserInfo.json<span class="token punctuation">}</span>\n\n</code></pre></div></li><li><p>解决跨域</p><div class="language-bash"><pre><code>www.baidu.com resCors://*\n</code></pre></div></li><li><p>插入js代码</p><div class="language-bash"><pre><code><span class="token comment"># 执行js代码  jsPrepend 允许我们对某个页面注入 JS 脚本</span>\nhttps://app-test.quickcep.com jsPrepend://<span class="token punctuation">{</span>reload.js<span class="token punctuation">}</span>\n</code></pre></div></li></ol><p>以上的所有代码整理</p><div class="language-bash"><pre><code><span class="token comment"># 将百度代理本地vite项目上</span>\n<span class="token number">127.0</span>.0.1:3000 baidu.com\n<span class="token comment"># 将线上环境的网页内容替换为本地</span>\n<span class="token comment"># https://app-test.quickcep.com file://${projectPath}/index.html</span>\n<span class="token comment"># 将线上项目的js替换为本地资源</span>\nhttps://app-test.quickcep.com/config.js file://<span class="token variable">${projectPath}</span>/config.js\n<span class="token comment"># 解决跨域</span>\nwww.baidu.com resCors://*\n<span class="token comment"># 模拟接口报错</span>\n<span class="token comment"># https://app-test.quickcep.com/store/user/getUserInfo statusCode://500</span>\n<span class="token comment"># 模拟接口超时 reqDelay://5000 5s超时时间</span>\nhttps://app-test.quickcep.com/store/user/getUserInfo reqDelay://5000 enable://abort\n<span class="token comment"># 模拟接口返回</span>\nhttps://app-test.quickcep.com/store/user/getUserInfo resBody://<span class="token punctuation">{</span>getUserInfo.json<span class="token punctuation">}</span>\n<span class="token comment"># 执行js代码  jsPrepend 允许我们对某个页面注入 JS 脚本</span>\nhttps://app-test.quickcep.com jsPrepend://<span class="token punctuation">{</span>reload.js<span class="token punctuation">}</span>\n</code></pre></div><h4 id="移动端调试"><a class="header-anchor" href="#移动端调试" aria-hidden="true">#</a> 移动端调试</h4><p>调试移动端的代码，可以查看<a href="https://wang1xiang.github.io/blog/docs/mobile/mobileDebugging.html" target="_blank" rel="noopener noreferrer">这篇文章</a></p><ol><li><p>注入vConsole whistle 可以通过jsPrepend 注入vConsole，下载<a href="https://cdn.jsdelivr.net/npm/vconsole@3.14.6/dist/vconsole.min.js" target="_blank" rel="noopener noreferrer">vConsole.min.js</a>，copy到Values中取名为vConsole.js，并添加实例化vConsole的<a href="https://gitee.com/Tencent/vConsole?utm_source=alading&amp;utm_campaign=repo" target="_blank" rel="noopener noreferrer">代码</a></p><div class="language-js"><pre><code><span class="token comment">// 此处省略vConsole.min.js的代码</span>\n<span class="token comment">// VConsole 默认会挂载到 `window.VConsole` 上</span>\n<span class="token keyword">var</span> vConsole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>VConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>在Rules中添加vConsole分类，并添加以下代码</p><div class="language-bash"><pre><code><span class="token comment"># 为baidu添加vConsole</span>\nhttps://www.baidu.com/ jsPrepend://<span class="token punctuation">{</span>vConsole.js<span class="token punctuation">}</span>\n</code></pre></div><p>重新打开百度，可以看到vConsole的标志</p></li><li><p>inspect插件 whistle提供了更方便的插件:</p><div class="language-bash"><pre><code><span class="token function">npm</span> i -g whistle.inspect\n</code></pre></div><p>安装完成后，需要重启</p><div class="language-bash"><pre><code>w2 restart\n</code></pre></div><p>配置rules</p><div class="language-bash"><pre><code><span class="token comment"># 为baidu添加vConsole</span>\nhttps://www.baidu.com/ whistle.inspect://\n</code></pre></div></li><li><p>使用 log 功能打印日志 除了使用vConsole，还可以开启日志打印</p><div class="language-bash"><pre><code>https://www.baidu.com/  log://\n</code></pre></div><p>重新打开百度，在 Network 的 Tools 下面的 Console 选项下面看到控制台打印的所有 log 信息 <img src="/blog/_assets/log.ff306905.jpg" alt="log.jpg"></p></li><li><p>手机代理原理：</p><ol><li>在 PC 启动一个服务，监听一个端口例如8899</li><li>手机连接统一局域网，配置网络代理，指向 PC 端的 IP 地址和 8899 端口</li><li>此时，手机上所有的网络通信都会被先转发到 PC 端的 8899 端口，就可以对数据包进行分析处理</li></ol></li><li><p>手机代理到 whistle</p><ul><li><p>手机电脑同一个wifi环境</p></li><li><p>点击whistle的online，查看ip地址<br><img src="/blog/_assets/whistleOnline.7bccf361.jpg" alt="whistleOnline.jpg"></p></li><li><p>手机进入wifi设置，代理设为手动，主机名为ip地址，端口填8899，保存（调试完记得改回去，避免手机上网异常）</p></li><li><p>配置rules</p><div class="language-bash"><pre><code> <span class="token comment"># 插件 m.baidu.com/为移动端</span>\n https://m.baidu.com/ whistle.inspect://\n <span class="token comment"># 添加log日志</span>\n <span class="token comment"># https://m.baidu.com/  log://</span>\n</code></pre></div></li></ul></li></ol><p>以上代码整理</p><div class="language-bash"><pre><code><span class="token comment"># 为baidu添加vConsole</span>\n<span class="token comment"># https://www.baidu.com/ jsPrepend://{vConsole.js}</span>\n<span class="token comment"># 插件 m.baidu.com/为移动端</span>\nhttps://m.baidu.com/ whistle.inspect://\n<span class="token comment"># 添加log日志</span>\n<span class="token comment"># https://www.baidu.com/  log://</span>\n</code></pre></div><h3 id="values"><a class="header-anchor" href="#values" aria-hidden="true">#</a> Values</h3><p>设置变量，供其他模块使用</p><h3 id="plugins"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> Plugins</h3><p><a href="https://wproxy.org/whistle/plugins.html" target="_blank" rel="noopener noreferrer">https://wproxy.org/whistle/plugins.html</a></p>',23)];t.render=function(n,a,t,o,l,c){return e(),s("div",null,p)};export{a as __pageData,t as default};
