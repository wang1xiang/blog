import{f as e,g as t,J as a}from"./common-03e46d7f.js";const l='{"title":"flutter环境搭建","frontmatter":{"date":"2024-05-01","title":"flutter环境搭建","tags":["flutter"],"describe":"flutter环境搭建"},"headers":[{"level":2,"title":"原生开发","slug":"原生开发"},{"level":2,"title":"跨平台技术","slug":"跨平台技术"},{"level":3,"title":"H5 + 原生：微信小程序","slug":"h5-原生：微信小程序"},{"level":3,"title":"Javascript 开发 + 原生渲染：React Native、Weex","slug":"javascript-开发-原生渲染：react-native、weex"},{"level":3,"title":"自绘 UI + 原生：Qt、Flutter","slug":"自绘-ui-原生：qt、flutter"},{"level":2,"title":"Flutter 基础了解","slug":"flutter-基础了解"},{"level":3,"title":"JIT、AOT","slug":"jit、aot"},{"level":3,"title":"为什么选择 Dart","slug":"为什么选择-dart"},{"level":3,"title":"Flutter 框架图","slug":"flutter-框架图"},{"level":2,"title":"Mac 环境搭建","slug":"mac-环境搭建"},{"level":3,"title":"1. 设置中国镜像","slug":"_1-设置中国镜像"},{"level":3,"title":"2.下载 Flutter SDK","slug":"_2-下载-flutter-sdk"},{"level":3,"title":"3. 安装 Xcode","slug":"_3-安装-xcode"},{"level":3,"title":"4. 安装 CocoaPods","slug":"_4-安装-cocoapods"},{"level":3,"title":"5. 安装 iOS 模拟器","slug":"_5-安装-ios-模拟器"},{"level":3,"title":"6. 安装 Android Studio","slug":"_6-安装-android-studio"},{"level":3,"title":"报错集锦","slug":"报错集锦"},{"level":3,"title":"结果","slug":"结果"},{"level":2,"title":"vsCode flutter 环境配置","slug":"vscode-flutter-环境配置"},{"level":2,"title":"第一个 flutter 应用","slug":"第一个-flutter-应用"},{"level":3,"title":"项目目录","slug":"项目目录"},{"level":3,"title":"运行项目","slug":"运行项目"}],"relativePath":"docs/flutter/flutter-start.md","lastUpdated":1742973716830.3682}';var r={};const s=[a('<h2 id="原生开发"><a class="header-anchor" href="#原生开发" aria-hidden="true">#</a> 原生开发</h2><p>安卓：Java、Kotlin 直接调用 Android SDK IOS：OC、Swift 直接调用 IOS SDK</p><p>优点：性能好、速度快、访问所有权限 缺点：开发周期长、开发成本高</p><h2 id="跨平台技术"><a class="header-anchor" href="#跨平台技术" aria-hidden="true">#</a> 跨平台技术</h2><h3 id="h5-原生：微信小程序"><a class="header-anchor" href="#h5-原生：微信小程序" aria-hidden="true">#</a> H5 + 原生：微信小程序</h3><p>通过原生网页加载 webview 控件来加载，通过 JsBridge 调用原生方法</p><h3 id="javascript-开发-原生渲染：react-native、weex"><a class="header-anchor" href="#javascript-开发-原生渲染：react-native、weex" aria-hidden="true">#</a> Javascript 开发 + 原生渲染：React Native、Weex</h3><p>React Native 的虚拟 DOM 会通过 JavaScriptCore 映射为原生组件</p><p>优点：原生控件渲染，想比于混合开发，性能好</p><h3 id="自绘-ui-原生：qt、flutter"><a class="header-anchor" href="#自绘-ui-原生：qt、flutter" aria-hidden="true">#</a> 自绘 UI + 原生：Qt、Flutter</h3><p>调用系统 API 渲染</p><h2 id="flutter-基础了解"><a class="header-anchor" href="#flutter-基础了解" aria-hidden="true">#</a> Flutter 基础了解</h2><p>Google 开源，跨平台、高性能，通过 Dart 语言开发的移动端开发框架。</p><p>使用高性能渲染引擎来绘制 Widget（组件）</p><h3 id="jit、aot"><a class="header-anchor" href="#jit、aot" aria-hidden="true">#</a> JIT、AOT</h3><p>JIT 即时编译：运行时实时将源码翻译为机器码 AOT 提前编译：执行前提前编译为机器码</p><h3 id="为什么选择-dart"><a class="header-anchor" href="#为什么选择-dart" aria-hidden="true">#</a> 为什么选择 Dart</h3><p>Dart 开发效率高</p><ol><li>基于 JIT 的快速开发周期：开发阶段使用 JIT，避免每次改动都需要重新编译</li><li>基于 AOT 的发布包：发布时通过 AOT 生成高效的机器码保证性能</li></ol><h3 id="flutter-框架图"><a class="header-anchor" href="#flutter-框架图" aria-hidden="true">#</a> Flutter 框架图</h3><p><img src="/blog/_assets/flutter-framework-three.ba3f6e17.png" alt="flutter-framework-three"></p><h4 id="框架层"><a class="header-anchor" href="#框架层" aria-hidden="true">#</a> 框架层</h4><p>Flutter Framework，纯 Dart 实现的 SDK，开发时基本都是和 Flutter Framework 打交道</p><ul><li><p>Foundation 和 Animation、Painting、Gestures</p><p>这两层合并为 Dart UI 层，对应的 Flutter 中的 <code>dart:ui</code> 包，是 Flutter Engine 暴露的底层 UI 库，提供动画、手势和绘制能力</p></li><li><p>Rendering</p><p>渲染层，依赖于 Dart UI 层，构建一颗由渲染对象组成的<strong>渲染树</strong>，动态更新时，会找出变化更新渲染。是 Flutter 框架最核心的部分，确定渲染对象的位置、大小以及绘制（调用 Dart UI 层）</p></li><li><p>Widgets</p><p>Flutter 提供的基础组件库，在此之上，Flutter 还提供了 Material 和 Cupertino 两种视觉风格的组件库，它们分别实现了 Material 和 iOS 设计规范</p></li></ul><h4 id="引擎层"><a class="header-anchor" href="#引擎层" aria-hidden="true">#</a> 引擎层</h4><p>Engine，核心，使用 C++实现，其中包括 Skia 引擎，Dart 运行时（Dart runtime）、文字排版引擎等。</p><p>代码调用 <code>dart:ui</code> 库时，最终会走到引擎层，实现真正的绘制和显示</p><h4 id="嵌入层"><a class="header-anchor" href="#嵌入层" aria-hidden="true">#</a> 嵌入层</h4><p>Embedder，潜入层，Flutter 最终渲染、交互需要依赖所在平台的操作系统 API，潜入层主要是将 Flutter 引擎安装到特定平台上。</p><p>嵌入层采用了当前平台的语言编写，例如 Android 使用的是 Java 和 C++， iOS 和 macOS 使用的是 Objective-C 和 Objective-C++</p><h2 id="mac-环境搭建"><a class="header-anchor" href="#mac-环境搭建" aria-hidden="true">#</a> Mac 环境搭建</h2><h3 id="_1-设置中国镜像"><a class="header-anchor" href="#_1-设置中国镜像" aria-hidden="true">#</a> 1. 设置中国镜像</h3><p>由于国内访问 Flutter 可能有问题，中国开发者需要切到临时镜像</p><div class="language-bash"><pre><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">PUB_HOSTED_URL</span><span class="token operator">=</span>https://pub.flutter-io.cn\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">FLUTTER_STORAGE_BASE_URL</span><span class="token operator">=</span>https://storage.flutter-io.cn\n</code></pre></div><p>复制上面两行，添加到系统环境变量</p><div class="language-bash"><pre><code><span class="token function">vim</span> ~./bash_profile\n<span class="token comment"># 复制上述两行到文件末尾</span>\n<span class="token builtin class-name">source</span> ~/.bash_profile\n</code></pre></div><h3 id="_2-下载-flutter-sdk"><a class="header-anchor" href="#_2-下载-flutter-sdk" aria-hidden="true">#</a> 2.下载 Flutter SDK</h3><p><a href="https://flutter.dev/docs/development/tools/sdk/releases" target="_blank" rel="noopener noreferrer">Flutter SDK</a></p><p>选择稳定版最新版本下载，看清 inter 芯片还是 m1 芯片：</p><p><img src="/blog/_assets/flutter-sdk-download.15cceaf0.png" alt="flutter-sdk-download"></p><p>下载完成后，记下当前的目录位置，添加到系统环境变量</p><div class="language-bash"><pre><code><span class="token function">vim</span> ~./bash_profile\n<span class="token comment"># 添加 export PATH=文件目录/flutter/bin:$PATH</span>\n<span class="token builtin class-name">source</span> ~/.bash_profile\n</code></pre></div><p>执行 <code>flutter -version</code> 报错，如下</p><p><img src="/blog/_assets/flutter-git-init.5fbb7a96.png" alt="flutter-git-init"></p><p>只需要在 flutter 目录下执行 <code>git init</code> 即可</p><p>再次执行 <code>flutter doctor</code> 来检查环境是否正确</p><div class="language-bash"><pre><code>flutter doctor\n</code></pre></div><p><img src="/blog/_assets/flutter-doctor.cd6aea9d.png" alt="flutter-doctor"></p><p>可以看到此时还有环境未正确配置</p><p><strong>上面如果有问题，可以使用 git clone <a href="https://github.com/flutter/flutter.git" target="_blank" rel="noopener noreferrer">https://github.com/flutter/flutter.git</a></strong></p><p>接着执行 <code>flutter doctor</code></p><p><img src="/blog/_assets/flutter-doctor1.e22863c6.png" alt="flutter-doctor1"></p><h3 id="_3-安装-xcode"><a class="header-anchor" href="#_3-安装-xcode" aria-hidden="true">#</a> 3. 安装 Xcode</h3><p>在 iOS 设备或模拟器上运行 Flutter 应用程序 从 App Store 安装 Xcode 最新版本，Xcode 用于调试和编译本机 Swift 或 ObjectiveC 代码，安装包括 Git 2.27 或更高版本来管理源代码。</p><p>安装好 Xcode 还需要设置 Xcode 的开发目录和签署许可协议， 执行下面命令，</p><div class="language-bash"><pre><code><span class="token function">sudo</span> <span class="token function">sh</span> -c <span class="token string">&#39;xcode-select -s /Applications/Xcode.app/Contents/Developer &amp;&amp; xcodebuild -runFirstLaunch&#39;</span>\n</code></pre></div><p>签署许可协议</p><div class="language-bash"><pre><code><span class="token function">sudo</span> xcodebuild -license\n</code></pre></div><h3 id="_4-安装-cocoapods"><a class="header-anchor" href="#_4-安装-cocoapods" aria-hidden="true">#</a> 4. 安装 CocoaPods</h3><p>当开发 iOS 应用时，会经常使用到很多第三方开源类库，比如 JSONKit，AFNetWorking 等等。可能某个类库又用到其他类库，所以要使用它，必须得另外下载其他类库，而其他类库又用到其他类库，手动一个个去下载所需类库十分麻烦。</p><p>CocoaPods 是 iOS 开发、macOS 开发中的包依赖管理工具，效果如 Java 中的 Maven，nodejs 的 npm。</p><p>CocoaPods 是一个开源的项目，源码是用 ruby 写的，源码地址在 GitHub 上。</p><div class="language-bash"><pre><code><span class="token comment"># 移除原有镜像源：</span>\ngem sources --remove https://rubygems.org/\n<span class="token comment"># 添加国内镜像源</span>\ngem sources --add https://gems.ruby-china.com\n<span class="token comment"># 安装</span>\n<span class="token function">sudo</span> gem <span class="token function">install</span> -n /usr/local/bin cocoapods\n</code></pre></div><p>需要最新版 ruby 环境支持</p><div class="language-bash"><pre><code><span class="token comment"># 安装 rbenv 和 ruby-build：</span>\nbrew <span class="token function">install</span> rbenv\nbrew <span class="token function">install</span> ruby-build\n<span class="token comment"># 配置 rbenv</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc\n<span class="token builtin class-name">echo</span> <span class="token string">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc\n<span class="token builtin class-name">source</span> ~/.zshrc\n<span class="token comment"># 安装最新的Ruby版本</span>\nrbenv <span class="token function">install</span> -l\nrbenv <span class="token function">install</span> <span class="token number">3.3</span>.2\nrbenv global <span class="token number">3.3</span>.2\n\n<span class="token comment"># 查看所有ruby版本</span>\nrbenv versions\n<span class="token comment"># 卸载某个版本</span>\nrbenv uninstall <span class="token number">3.3</span>.2\n<span class="token comment"># 验证安装是否成功</span>\nruby -b\n</code></pre></div><p>安装成功后，使用 pod -version 检查</p><p><img src="/blog/_assets/flutter-cocoapods-install.83748326.png" alt="flutter-cocoapods-install"></p><h3 id="_5-安装-ios-模拟器"><a class="header-anchor" href="#_5-安装-ios-模拟器" aria-hidden="true">#</a> 5. 安装 iOS 模拟器</h3><div class="language-bash"><pre><code>xcodebuild -downloadPlatform iOS\n</code></pre></div><p>这个命令会触发 Xcode 从 App Store 或其他源下载 iOS 模拟器所需的组件，如果它们尚未安装。</p><p>使用以下命令启动 iOS 模拟器：</p><div class="language-bash"><pre><code><span class="token function">open</span> -a Simulator\n</code></pre></div><h3 id="_6-安装-android-studio"><a class="header-anchor" href="#_6-安装-android-studio" aria-hidden="true">#</a> 6. 安装 Android Studio</h3><p>和 Windows 一样，要在 Android 设备上构建并运行 Flutter 程序都需要先安装 Android Studio</p><h3 id="报错集锦"><a class="header-anchor" href="#报错集锦" aria-hidden="true">#</a> 报错集锦</h3><p>上面全部安装完成后，执行 flutter doctor</p><p><img src="/blog/_assets/flutter-android-sdk-error.7a667cc5.png" alt="flutter-android-sdk-error"></p><h4 id="cmdline-tools-component-is-missing"><a class="header-anchor" href="#cmdline-tools-component-is-missing" aria-hidden="true">#</a> cmdline-tools component is missing</h4><p>需要安装 Android SDK command-line Tools</p><p><img src="/blog/_assets/flutter-android-sdk.46ec3db9.png" alt="flutter-android-sdk"></p><h4 id="android-license-status-unknown"><a class="header-anchor" href="#android-license-status-unknown" aria-hidden="true">#</a> Android license status unknown</h4><p><a href="https://juejin.cn/post/7327487551938134035" target="_blank" rel="noopener noreferrer">解决方案</a></p><h3 id="结果"><a class="header-anchor" href="#结果" aria-hidden="true">#</a> 结果</h3><h2 id="vscode-flutter-环境配置"><a class="header-anchor" href="#vscode-flutter-环境配置" aria-hidden="true">#</a> vsCode flutter 环境配置</h2><p>在插件栏中搜索 Flutter，安装最多人安装的那几个</p><h2 id="第一个-flutter-应用"><a class="header-anchor" href="#第一个-flutter-应用" aria-hidden="true">#</a> 第一个 flutter 应用</h2><p>阅读<a href="https://docs.flutter.cn/get-started/flutter-for/web-devs" target="_blank" rel="noopener noreferrer">给 Web 开发者的 Flutter 指南</a></p><p>使用 Flutter 应用模板创建第一个 flutter 应用</p><ol><li><p><code>cmd + shift + p</code> 输入 <code>flutter</code> 选择 <code>Flutter: New Project</code> 创建一个项目`，首次需要设置 flutter SDK 位置</p></li><li><p>选择 Flutter 项目类型，选择 <code>Application</code></p><ul><li>Application：Flutter Application 表示一个 Flutter 项目，主体是 Flutter，当然它也可以接入 Android Module 或者 iOS Framework，其内部包含 Android 和 iOS 项目</li><li>Module：Flutter Module 用于原生项目中插入 Flutter 模块，原生为主体，与 Flutter 进行混合开发</li><li>Package：Flutter Plugin 基本一样，唯一的区别是 Flutter Package 表示纯 Flutter 模块，不需要原生开发，没有 Android 和 iOS 项目，比如开发一个纯 UI 的插件</li><li>Plugin：表示 Flutter 插件，包含 Android 和 iOS 项目，如果你要开发一个 Plugin 且此 Plugin 涉及到原生支持，比如蓝牙功能、网络功能等，这些功能纯 Flutter 是无法实现的</li></ul><p>其目录比 Flutter Application 多了一个 example，example 用于当前 Plugin 的 demo， Flutter Plugin 开发完成后可以发布到 pub 上</p></li><li><p>完成后，需要选择目录以及项目名称</p></li><li><p>开始创建，回车后 VSCode 自动创建 flutter 项目，需要稍等片刻</p><p><img src="/blog/_assets/flutter-vscode-create.febd81fe.png" alt="flutter-vscode-create"></p></li><li><p>创建完成</p><p><img src="/blog/_assets/flutter-vscode-create1.5726004b.png" alt="flutter-vscode-create1"></p></li></ol><h3 id="项目目录"><a class="header-anchor" href="#项目目录" aria-hidden="true">#</a> 项目目录</h3><p><img src="/blog/_assets/flutter-application-tree.cf976135.png" alt="flutter-application-tree"></p><p>其中各个目录说明如下：</p><ul><li>.dart_tool：Flutter 和 Dart 工具生成的缓存文件和工具配置文件，通常不需要手动修改</li><li>.idea：IntelliJ IDEA 的项目配置文件夹，包含了一些 IDE 相关的设置</li><li>android：包含了用于生成 Android 应用的所有文件和配置，主要使用 Java 或 Kotlin 编写</li><li>ios：包含了用于生成 iOS 应用的所有文件和配置，主要使用 Objective-C 或 Swift 编写</li><li>lib：存放 Dart 代码的主要目录，包括 Flutter 应用的所有业务逻辑和界面代码。通常会有一个 main.dart 文件作为应用的入口，是 Flutter 项目的核心目录，我们写的代码放在这个目录，我们也可以在这个目录创建子目录。 <ul><li>main.dart: Flutter 应用的入口文件。通常包含 void main() =&gt; runApp(MyApp()); 方法来启动应用。</li><li>其他文件和目录：你可以在这里组织你的应用代码，如页面（screens）、组件（widgets）、状态管理（state management）等。</li></ul></li><li>linux：包含了用于生成 Linux 应用的所有文件和配置。</li><li>macos：包含了用于生成 macOS 应用的所有文件和配置。</li><li>test：存放测试代码的目录，用于写单元测试、集成测试等。</li><li>web：包含了用于生成 Web 应用的所有文件和配置。</li><li>windows：包含了用于生成 Windows 应用的所有文件和配置。</li><li>.metadata：Flutter 项目的元数据文件，记录了一些项目的配置和状态信息</li><li>analysis_options.yaml：Dart 静态代码分析的配置文件，用于设置代码规范和规则</li><li>flutter_application_1.iml：IntelliJ IDEA 生成的项目配置文件。</li><li>pubspec.lock：记录项目当前使用的具体版本的依赖，确保团队中每个人使用的依赖版本一致</li><li>pubspec.yaml：Flutter 项目的配置文件，包含项目的名称、描述、依赖项、开发依赖项等，类似于 package.json <ul><li>name: 项目的名称。</li><li>description: 项目的简短描述。</li><li>publist_to：防止我们使用 flutter pub publish 命令将其发布到 pub.dev 上，<a href="https://pub.dev/" target="_blank" rel="noopener noreferrer">https://pub.dev/</a> 相当于 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/</a></li><li>dependencies: 项目的依赖项。</li><li>dev_dependencies: 开发过程中使用的依赖项。</li><li>flutter: Flutter 特定的配置，包括资源文件（assets）、字体（fonts）等。</li></ul></li></ul><h3 id="运行项目"><a class="header-anchor" href="#运行项目" aria-hidden="true">#</a> 运行项目</h3><ol><li><p>运行项目前，需要先选择设备，输入 <code>cmd + shift + p</code> 输入 <code>flutter</code> 选择 <code>Flutter: Select Device</code></p></li><li><p>flutter run 启动应用</p></li><li><p>启动完成，如下</p><p><img src="/blog/_assets/flutter-application-success.67a79431.png" alt="flutter-application-success"></p></li><li><p>使用以下命令来检查和修复依赖项</p><div class="language-bash"><pre><code><span class="token comment"># 相当于npm i</span>\nflutter pub get\n</code></pre></div></li><li><p>使用以下命令来创建新的 Dart 文件或 Flutter 组件</p><div class="language-bash"><pre><code>flutter create my_new_component\n</code></pre></div></li></ol>',95)];r.render=function(a,l,r,n,i,o){return e(),t("div",null,s)};export{l as __pageData,r as default};
