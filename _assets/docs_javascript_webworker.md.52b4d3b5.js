import{f as e,g as r,J as a}from"./common-03e46d7f.js";const o='{"title":"利用webWorker调教Safari浏览器速度慢的问题","frontmatter":{"date":"2023-09-27","title":"利用webWorker调教Safari浏览器速度慢的问题","tags":["javascript"],"describe":"利用webWorker调教Safari浏览器速度慢的问题"},"headers":[{"level":2,"title":"Web Worker","slug":"web-worker"},{"level":3,"title":"是什么","slug":"是什么"},{"level":3,"title":"如何通信","slug":"如何通信"}],"relativePath":"docs/javascript/webworker.md","lastUpdated":1743046188708.0447}';var s={};const t=[a('<p>我们来手动修改一下 HTML 内容，增加更多的 DOM 节点，看看它的导出情况</p><p><img src="/blog/_assets/html2canvas-safari-morenode.29f39883.png" alt="html2canvas-safari-morenode"></p><p>Safari 浏览器使用 html2canvas 在 Document cloned 环节会花费超长时间，严重影响页面正常运行，于是使用 web worker 来改善它。</p><p>首先我们来了解下 Web Worker。</p><h2 id="web-worker"><a class="header-anchor" href="#web-worker" aria-hidden="true">#</a> Web Worker</h2><p>作为一个前端，为了 JavaScript 的单线程问题日日苦恼，怎么没有 Java 那么方便，开多个线程干多个事；又在为单向程暗暗窃喜，因为我们不用去处理多线程的锁问题。</p><p>那么，这时候你一定需要 Web Worker，它能让你打开一个新的线程去干另一件事，比如页面正在加载，但是包含了一个较大的 js，执行比较耗时，那么此时就会影响页面的 LCP，但如果我们不在正常流程中执行此 js，而是将它放入一个新的线程中，让它执行完成后再通知主进程，这样既不会影响页面加载的速度，也可以正常的加载页面。</p><h3 id="是什么"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么</h3><p>通过以上的 🌰，可以得出结论：Web Worker 可以主线程外创建一个独立线程，这个线程可以独立执行，并且不会阻塞主线程。</p><h3 id="如何通信"><a class="header-anchor" href="#如何通信" aria-hidden="true">#</a> 如何通信</h3><p>可是：独立线程执行完成后，主线程如何知道呢？</p><p>先想一想，iframe 的通信我们用的是什么：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener noreferrer">window.postMessage</a>，他就可以</p><p>没错，就是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/postMessage" target="_blank" rel="noopener noreferrer">Worker.postMessage</a>和 <code>onmessage</code> 搭配</p><p>此处的 <code>postMessage</code> 类似于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener noreferrer">window.postMessage</a>，但是在</p>',14)];s.render=function(a,o,s,p,l,d){return e(),r("div",null,t)};export{o as __pageData,s as default};
