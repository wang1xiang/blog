import{f as e,g as i,J as a}from"./common-03e46d7f.js";const l='{"title":"git版本管理","frontmatter":{"date":"2022-08-02","title":"git版本管理","tags":["git"],"describe":"git版本管理简介"},"headers":[{"level":2,"title":"版本管理","slug":"版本管理"}],"relativePath":"docs/git/gitflow.md","lastUpdated":1670987452798.262}';var t={};const r=[a('<h2 id="版本管理"><a class="header-anchor" href="#版本管理" aria-hidden="true">#</a> 版本管理</h2><h4 id="目的"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h4><ol><li><p>避免版本丢失和混淆</p></li><li><p>快速定位</p></li></ol><h4 id="命名"><a class="header-anchor" href="#命名" aria-hidden="true">#</a> 命名</h4><ul><li>版本标识：标准版本、特殊版本、特殊版本(不具有通用性和适用性)</li><li>命名规范：&quot;v&quot;开头，v.主版本号.次版本号.发布日期-后缀 v1.0.20190101-release(后缀表示是否为开发、测试、上线)</li><li>主版本号：模块比较大的变动，以十进制表示</li><li>此版本号：小的功能变化，或者 bug 修改</li><li>发布时间：发布日期</li><li>后缀：Alpha(a)版：初步完成品，面对开发人员，Beta(B)版：面对测试人员，不能发布 ,Release:用户使用的标准版本</li><li>版本变化规则：内部版本-&gt;测试版本-&gt;正式版本</li></ul><h5 id="管理工具"><a class="header-anchor" href="#管理工具" aria-hidden="true">#</a> 管理工具</h5><ol><li>SVN-Subversion：档案库，记录每一次档案的变化，浏览变动即回退</li><li>git</li></ol><p>差异：svn 只有中央档案库，git 分布式(本地库和远程库的区别)；git 相对于 svn 快速</p><h5 id="git-工作流"><a class="header-anchor" href="#git-工作流" aria-hidden="true">#</a> git 工作流</h5><ol><li><p>集中式工作流</p><p>跟 svn 类似，只有 一个 master 分支，适合小团队(不适合我们)</p></li><li><p>功能分支工作流</p><p>不直接王 master 提交代码，保证 master 干净稳定，团队完成功能开发，向 master 提交合并</p></li><li><p>gitFlow 工作流</p><p>大型项目，master 和 develop 一直存在，特性开发在 feature 分支，版本发布在 release 分支，bug 修复在 hotfix 分支</p></li><li><p>Forkin 工作流</p><p>开源项目，开源项目维护者往中央仓库 push 代码，一般人 fork 到自己 github，提交代码只有项目维护者同意后，才能 push 到开源项目中</p></li></ol><h5 id="git-flow-工作流"><a class="header-anchor" href="#git-flow-工作流" aria-hidden="true">#</a> git flow 工作流</h5><p>使用 2 个分支记录项目的历史，master 分支存储正式发布的历史，develop 分支作为功能的继承分支，或下一个版本分支</p><p>维护分支</p><p>修改 bug 分支 hotfix，master 分支拉取，修改完成合并到 master 分支，并且需要合并到 develop 分支，不然导致版本不一致</p><p>发布分支</p><p>发布分支从 dev 分支拉取，发布完成，销毁</p>',16)];t.render=function(a,l,t,h,s,p){return e(),i("div",null,r)};export{l as __pageData,t as default};
