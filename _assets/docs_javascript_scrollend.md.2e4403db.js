import{f as n,g as s,J as a}from"./common-03e46d7f.js";const e='{"title":"JS滚动事件新成员—scrollend","frontmatter":{"date":"2023-03-08","title":"JS滚动事件新成员—scrollend","tags":["javascript"],"describe":"JS滚动事件新成员—scrollend"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"使用 scroll 实现滚动完成的弊端","slug":"使用-scroll-实现滚动完成的弊端"},{"level":2,"title":"scrollend","slug":"scrollend"},{"level":3,"title":"怎样算是完成滚动呢？","slug":"怎样算是完成滚动呢？"},{"level":3,"title":"浏览器支持","slug":"浏览器支持"},{"level":3,"title":"使用注意","slug":"使用注意"}],"relativePath":"docs/javascript/scrollend.md","lastUpdated":1742290670495.4666}';var l={};const o=[a('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>相信有不少小伙伴在开发过程中都有处理过这个场景，当页面滚动结束后执行一些操作。我们之前的操作一般都是使用<code>onscroll</code>事件配合延迟去实现，往往是滚动还在进行时就触发了事件，并不能精准的捕获到滚动事件完成的时机。而<code>scrollend</code>的出现就是为了解决这个问题，让滚动完成事件更加可靠。</p><h2 id="使用-scroll-实现滚动完成的弊端"><a class="header-anchor" href="#使用-scroll-实现滚动完成的弊端" aria-hidden="true">#</a> 使用 scroll 实现滚动完成的弊端</h2><p>如果不使用 scrollend，我们实现滚动结束事件是不是这样的，使用 setTimeout，只要当 100ms 内未滚动时，就判断滚动事件结束。</p><div class="language-js"><pre><code><span class="token keyword">let</span> scrollEndTimer <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;滚动事件结束&#39;</span><span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>scrollEndTimer<span class="token punctuation">)</span>\n  scrollEndTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>那么这样操作有哪些问题呢？我们不妨先看看下面这张图片。 <img src="/blog/_assets/scrollevent.b7b5e348.gif" alt="scroll event.gif"> 仔细观察下你就会发现，这里的滚动结束事件其实是停止滚动 100ms 的时候触发，并不是实际的滚动结束，称为“滚动暂停”可能更接近些。</p><h2 id="scrollend"><a class="header-anchor" href="#scrollend" aria-hidden="true">#</a> scrollend</h2><p>通过 MDN 上对<a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event" target="_blank" rel="noopener noreferrer">scrollend</a>的介绍，我们可以知道 scrollend 是在文档视图完成滚动时触发。</p><h3 id="怎样算是完成滚动呢？"><a class="header-anchor" href="#怎样算是完成滚动呢？" aria-hidden="true">#</a> 怎样算是完成滚动呢？</h3><p>当滚动位置没有更多待处理的更新并且用户已完成他们的手势时，滚动被认为完成。</p><p>所以触摸滚动、鼠标滚轮、键盘滚动等活动只要被释放就会触发 scrollend 事件，同时类似 scrollTo() 这类导致滚动位置更新的事件完成后也会触发 scrollend 事件，具体是以下这些事件：</p><ul><li>用户的触摸已被释放；</li><li>用户的指针已释放滚动条；</li><li>用户的按键已被释放；</li><li>滚动到片段已完成；</li><li>滚动捕捉已完成；</li><li>scrollTo()已完成；</li><li>用户已滚动视觉视口</li></ul><p>当然，如果滚动位置没有改变，是不会触发 scrollend 事件的，即以下事件不会触发：</p><ul><li>用户的手势没有导致任何滚动位置变化；</li><li>scrollTo() 没有产生任何移动。</li></ul><h3 id="浏览器支持"><a class="header-anchor" href="#浏览器支持" aria-hidden="true">#</a> 浏览器支持</h3><p>目前 scrollend 事件仅支持 Firefox 109 版本，接下来不久，Chrome 111 版本也将支持该事件。可以通过 <a href="https://caniuse.com/?search=scrollend" target="_blank" rel="noopener noreferrer">caniuse</a> 看到 scrollend 事件目前支持的版本。</p><p>我们可以通过下面代码看一下效果，注意这段代码需要在 Firefox 109 版本浏览器中运行。</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;滚动事件结束&#39;</span><span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.scroll-container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onscrollend <span class="token operator">=</span> callback\n</code></pre></div><p><img src="/blog/_assets/scrollendevent.7242c5f0.gif" alt="scrollendevent"></p><p>与上面那张图做比较，可以看出onscroll和onscrollend事件的差别：</p><ul><li>如果将 onscroll 设置的 setTimeout 时间延长，不是 100ms，比如 1000m 或更长时，会发现两者差别更大一些，onscrollend 是在滚动完成后立即触发，而 onscroll 是在等待时间结束后触发</li></ul><h3 id="使用注意"><a class="header-anchor" href="#使用注意" aria-hidden="true">#</a> 使用注意</h3><p>在项目中使用的情况下需要判断一下当前浏览器是否支持 scrollend 事件，不支持时还是采用延迟的方式解决</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;scrollend&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  document<span class="token punctuation">.</span>onscrollend <span class="token operator">=</span> callback\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  document<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> event <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>scrollEndTimer<span class="token punctuation">)</span>\n    scrollEndTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>也可以使用 scrollend 的<a href="https://github.com/argyleink/scrollyfills" target="_blank" rel="noopener noreferrer">polyfill</a>处理</p>',25)];l.render=function(a,e,l,t,c,p){return n(),s("div",null,o)};export{e as __pageData,l as default};
