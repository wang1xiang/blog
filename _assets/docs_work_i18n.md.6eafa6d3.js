import{f as n,g as s,J as a}from"./common-03e46d7f.js";const e='{"title":"React中使用node脚本完成国际化需求","frontmatter":{"date":"2022-10-08","title":"React中使用node脚本完成国际化需求","tags":["work"],"describe":"由于公司目前的国家化方式耗时耗力，所以就有了改造的想法，在采用我这种方式后明显提高了大家的工作效率。"},"headers":[{"level":3,"title":"改造原因","slug":"改造原因"},{"level":3,"title":"当前国家化方案特点","slug":"当前国家化方案特点"},{"level":2,"title":"自动化脚本应该完成的功能","slug":"自动化脚本应该完成的功能"},{"level":3,"title":"读取文件","slug":"读取文件"},{"level":2,"title":"代码地址","slug":"代码地址"},{"level":2,"title":"TODO","slug":"todo"}],"relativePath":"docs/work/i18n.md","lastUpdated":1742177050728.4607}';var t={};const p=[a('<h3 id="改造原因"><a class="header-anchor" href="#改造原因" aria-hidden="true">#</a> 改造原因</h3><p>由于目前有四种语言需要翻译--英语、韩语、日语和中文，每种都需要 copy 文件，打开 google 翻译，翻译三种语言再粘贴，不仅浪费大量时间，而且很有可能看叉行，导致翻译有问题。</p><h3 id="当前国家化方案特点"><a class="header-anchor" href="#当前国家化方案特点" aria-hidden="true">#</a> 当前国家化方案特点</h3><ol><li><p>文件统一在 <code>src/locales/xx</code> 下，每个翻译文档名称对应，便于查找</p></li><li><p>统一为<code>key: value</code>格式，一般是直接 copy 中文文档，再修改</p></li><li><p>默认导出所有，并在每种语言文档中都存在<code>xx/index.ts</code>文件用于导出当前目录下所有的 ts 文件</p><div class="language-ts"><pre><code><span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//批量读取模块文件</span>\n\n<span class="token keyword">const</span> modules <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>modules<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token function">files</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 获取当前路径下的ts文件和当前路径下文件夹中的index.ts</span>\n  <span class="token keyword">const</span> canUsedModule <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">?</span> module<span class="token punctuation">.</span>default <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>modules<span class="token punctuation">,</span> <span class="token operator">...</span>canUsedModule <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> modules<span class="token punctuation">;</span>\n</code></pre></div></li><li><p>在对应的组件中使用<code>&lt;FormattedMessage id=&#39;xxx&#39;/&gt;</code>或<code>intl.formatMessage({ id: xxx })</code>完成国际化</p></li></ol><h2 id="自动化脚本应该完成的功能"><a class="header-anchor" href="#自动化脚本应该完成的功能" aria-hidden="true">#</a> 自动化脚本应该完成的功能</h2><ol><li>根据传入读取对应目录下的文件</li><li>将文件中的国际化相关的内容过滤出来</li><li>使用<a href="https://fanyi-api.baidu.com/api/trans/product/desktop" target="_blank" rel="noopener noreferrer">百度 API</a>翻译</li><li>输出到 src/locales 对应目录下</li></ol><h3 id="读取文件"><a class="header-anchor" href="#读取文件" aria-hidden="true">#</a> 读取文件</h3><ol><li><p>首先将 node 脚本添加到 scripts 脚本中</p><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  ...\n  <span class="token property">&quot;gene-i18n&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esno ./scripts/i18n&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>执行脚本并传入第二个参数</p><p>执行脚本<code>yarn gene-i18n</code>，并传入对应的文件路径，当前不支持多个文件国际化 .<img src="/blog/_assets/i18n.a818d54b.gif" alt="i18n.gif"></p></li><li><p>generateWord 函数提取文案</p><ul><li>原来的<code>intl.formatMessage()</code> 以这种方式替换 <code>const { formatMessage: f } = useIntl()</code></li><li>需要注意在<code>&lt;FormattedMessage</code> 和 <code>f({</code> 必须传入 defaultMessage 属性作为中文的翻译，而且在代码中很容易查找</li></ul></li><li><p>generateFile 生成文件</p><ul><li>截取输入文件路径部分作为新文件名称</li><li>中文文案直接输出，其余文案使用百度翻译再输出，<a href="https://juejin.cn/post/6906787897811501063" target="_blank" rel="noopener noreferrer">参考文档</a></li><li>生成文件统一在<code>xx/messages/</code>目录下</li></ul></li></ol><h2 id="代码地址"><a class="header-anchor" href="#代码地址" aria-hidden="true">#</a> 代码地址</h2><p><a href="https://github.com/wang1xiang/gene-i18n" target="_blank" rel="noopener noreferrer">github</a></p><h2 id="todo"><a class="header-anchor" href="#todo" aria-hidden="true">#</a> TODO</h2><ol><li><p>placeholder格式的暂不支持直接读取，需要直接写好格式</p><div class="language-ts"><pre><code><span class="token function">f</span><span class="token punctuation">(</span>\n   <span class="token punctuation">{</span>\n     id<span class="token operator">:</span> <span class="token string">&#39;sms.tempalte.modal.phone&#39;</span><span class="token punctuation">,</span>\n     defaultMessage<span class="token operator">:</span> <span class="token string">&#39;字符数{count}/500，预计{size}条收费&#39;</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span> count<span class="token punctuation">,</span> size <span class="token punctuation">}</span>\n <span class="token punctuation">)</span>\n</code></pre></div></li><li><p>不支持多个文件或目录生成</p></li><li><p>webpack-loader或npm插件</p></li></ol>',12)];t.render=function(a,e,t,o,l,c){return n(),s("div",null,p)};export{e as __pageData,t as default};
