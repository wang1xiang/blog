import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 34：动态规划part1","frontmatter":{"date":"2025-03-17","title":"跟着卡哥学算法Day 34：动态规划part1","tags":["leetcode"],"describe":"动态规划part1"},"headers":[{"level":2,"title":"62.不同路径 🌟","slug":"_62-不同路径-🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":2,"title":"70. 爬楼梯 🌟","slug":"_70-爬楼梯-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":2,"title":"746. 使用最小花费爬楼梯 🌟","slug":"_746-使用最小花费爬楼梯-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"}],"relativePath":"docs/leetcode/dynamic-programming-code2.md","lastUpdated":1742176930054.5972}';var o={};const t=[a('<p><strong>找问题最好的方式就是把 dp 数组打印出来，看看是不是和我们推导的公式一致。</strong></p><p><strong>做动规题目前，一定要把状态转移在 dp 数组上的具体情况模拟一遍，确定最后推出的是想要的结果。</strong></p><h2 id="_62-不同路径-🌟"><a class="header-anchor" href="#_62-不同路径-🌟" aria-hidden="true">#</a> 62.不同路径 🌟</h2><p><a href="https://leetcode.cn/problems/fibonacci-number/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>斐波那契数，通常用  F(n) 表示，形成的序列称为 斐波那契数列 。该数列由  0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0，F(1) = 1 F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1 给你 n ，请计算 F(n) 。</p><p>示例 1：</p><ul><li>输入：2</li><li>输出：1</li><li>解释：F(2) = F(1) + F(0) = 1 + 0 = 1</li></ul><p>示例 2：</p><ul><li>输入：3</li><li>输出：2</li><li>解释：F(3) = F(2) + F(1) = 1 + 1 = 2</li></ul><p>示例 3：</p><ul><li>输入：4</li><li>输出：3</li><li>解释：F(4) = F(3) + F(2) = 2 + 1 = 3</li></ul><p>提示：</p><ul><li>0 &lt;= n &lt;= 30</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>动规五部曲</p><ol><li><p>确定 dp 数组以及下标的含义</p><p>dp[i] 代表第 i 个斐波那契数的值</p></li><li><p>确定递推公式</p><p>斐波那契很简单：<code>dp[i] = dp[i-1] + dp[i-2]</code></p></li><li><p>dp 数组初始化</p><p><code>dp[0] = 0, dp[1] = 1</code></p></li><li><p>确定遍历顺序</p><p>根据递推公式，可以看出 dp[i]依赖 dp[i - 1]和 dp[i - 2]，所以从前往后遍历</p></li><li><p>举例推导 dp 数组</p><p>按照递推公式，我们推导下 n=10 的时候，dp 数组应该是这个数列：<code>[0,1,1,2,3,5,8,13,21,34,55]</code></p><p>写代码时打印 dp 数组，看和我们推导的数组是否一致</p></li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_70-爬楼梯-🌟"><a class="header-anchor" href="#_70-爬楼梯-🌟" aria-hidden="true">#</a> 70. 爬楼梯 🌟</h2><p><a href="https://leetcode.cn/problems/climbing-stairs/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><p>示例 1：</p><ul><li>输入： 2</li><li>输出： 2</li><li>解释： 有两种方法可以爬到楼顶。 <ul><li>1 阶 + 1 阶</li><li>2 阶</li></ul></li></ul><p>示例 2：</p><ul><li>输入： 3</li><li>输出： 3</li><li>解释： 有三种方法可以爬到楼顶。 <ul><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ul></li></ul><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p><strong>注意此处是求到达第 i 层的方法数，而不是具体的步数或花费</strong></p><p>先确定条件，每次只能爬一层或两层楼梯，那么</p><ul><li>第一层 1 种方法：<code>1</code></li><li>第二层 2 种方法：<code>1+1</code>、<code>2</code></li></ul><p>爬到第三层楼梯时，只有两种方法：</p><ol><li>爬到第一层，再爬两层到第三层：<code>1+1+1</code>、<code>1+2</code></li><li>爬到第二层，直接一层到第三层：<code>2+1</code></li><li>那么总方法数 = 2 + 1 = 3</li></ol><p>爬到第四层楼梯时，只有两种方法：</p><ol><li>爬到第二层，再爬两层到第四层：<code>1+1+2</code>、<code>2+2</code></li><li>爬到第三层，直接一层到第四层：<code>1+1+1+1</code>、<code>1+2+1</code>、<code>2+1+1</code></li><li>总方法数：2 + 3 = 5</li></ol><p>因此，爬到第 i 层楼梯时，也只有两种方法：</p><ol><li>爬到第 i-2 层，再爬两层到第 i 层：<code>i-2 + 2</code></li><li>爬到第 i-1 层，直接一层到第 i 层：<code>i-1 + 1</code></li><li>总方法数：dp(i - 2) + dp(i - 1)</li></ol><p>因为每一步可以选择爬 1 或 2 层，所以到达第 i 层的方法数等于到达第 i-1 层和第 i-2 层的方法数之和，所以可得递推公式 dp(i) = dp(i-2) + dp(i-1)</p><p>动规五部曲：</p><ol><li><p>确定 dp 数组以及下标的含义</p><p>dp[i] 表示爬到第 i 层楼梯的方法数 <strong>（注意：是方法数，不是步数或体力消耗）</strong></p></li><li><p>确定递推公式</p><p><code>dp[i] = dp[i-2] + dp[i-1]</code></p></li><li><p>dp 数组初始化</p><p><code>dp[1] = 1, dp[2] = 2</code></p></li><li><p>确定遍历顺序 从前往后</p></li><li><p>举例推导 dp 数组</p><p>当 n=5 时，dp 数组为：<code>[1,2,3,5,8]</code>，代码中打印一下</p></li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_746-使用最小花费爬楼梯-🌟"><a class="header-anchor" href="#_746-使用最小花费爬楼梯-🌟" aria-hidden="true">#</a> 746. 使用最小花费爬楼梯 🌟</h2><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从楼梯第 <code>i</code> 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code> 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><p><strong>示例 1：</strong></p><p>**输入：**cost = [10,15,20] **输出：**15 **解释：**你将从下标为 1 的台阶开始。</p><ul><li>支付 15 ，向上爬两个台阶，到达楼梯顶部。 总花费为 15 。</li></ul><p><strong>示例 2：</strong></p><p>**输入：**cost = [1,100,1,1,1,100,1,1,100,1] **输出：**6 **解释：**你将从下标为 0 的台阶开始。</p><ul><li>支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。</li><li>支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。</li><li>支付 1 ，向上爬一个台阶，到达楼梯顶部。 总花费为 6 。</li></ul><p><strong>提示：</strong></p><ul><li><code>2 &lt;= cost.length &lt;= 1000</code></li><li><code>0 &lt;= cost[i] &lt;= 999</code></li></ul><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><p>先确定条件，每次只能爬一个或两个台阶，并且需要花费相应的体力，如何到达楼梯顶部。</p><p>以[1,100,1,1,1,100,1,1,100,1]为例：</p><p>想要到达第三个台阶，可以选择：</p><ol><li>从第一个台阶开始，花费 1，到达第三个台阶</li><li>从第二个台阶开始，花费 100，到达第三个台阶</li></ol><p>此时选择花费较小的第一个选择，即 1</p><p>想要到达第四个台阶，可以选择：</p><ol><li>从第二个台阶开始，花费 100，到达第四个台阶</li><li>从第三个台阶开始，花费 1，到达第四个台阶</li></ol><p>此时选择花费较小的第二个选择，即 1 + 1 = 2</p><p>那么，想要到达第 i 个台阶时，可以选择：</p><ol><li>从第 i-2 个台阶开始，花费 cost[i-2]，到达第 i 个台阶</li><li>从第 i-1 个台阶开始，花费 cost[i-1]，到达第 i 个台阶</li></ol><p>选择花费较小的选择，即 dp[i-2] + cost[i-2] 或者 dp[i-1] + cost[i-1]</p><p>因此可以得到递推公式：<code>dp(i) = Math.min(dp(i-2) + cost[i-2], dp(i-1) + cost[i-1])</code></p><p>动规五部曲</p><ol><li><p>确定 dp 数组以及下标的含义</p><p>dp[i] 表示到达第 i 个台阶的最小花费</p></li><li><p>确定递推公式</p><p><code>dp[i] = Math.min(dp[i-2] + cost[i-2], dp[i-1] + cost[i-1])</code></p></li><li><p>dp 数组初始化</p><p>可以从下标为 0 或者下标为 1 的台阶开始爬楼梯，即<code>dp[0] = 0, dp[1] = 0</code></p></li><li><p>确定遍历顺序：从前往后</p></li><li><p>举例推导 dp 数组</p><p>如 cost = [1,100,1,1,1,100,1,1,100,1]，dp 数组为：<code>[0,0,1,2,2,3,3,4,4,5,6]</code></p></li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">minCostClimbingStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cost</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cost<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>cost<span class="token punctuation">.</span>length<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',72)];o.render=function(a,p,o,e,l,c){return n(),s("div",null,t)};export{p as __pageData,o as default};
