import{f as n,g as a,J as s}from"./common-03e46d7f.js";const t='{"title":"React使用dangerouslySetInnerHTML渲染HTML片段","frontmatter":{"date":"2022-08-02","title":"React使用dangerouslySetInnerHTML渲染HTML片段","tags":["react"],"describe":"使用dangerouslySetInnerHTML渲染HTML片段时，需要通过dompurify对渲染内容做清理"},"headers":[{"level":3,"title":"解决方法","slug":"解决方法"}],"relativePath":"docs/react/dompurify.md","lastUpdated":1743566425625.4038}';var p={};const o=[s('<ul><li>Vue中可以通过v-html将HTML片段直接渲染在页面上，v-html对字符串进行<strong>过滤输入</strong>和<strong>转义输出</strong>可以有效避免xss攻击</li><li>React中同样可以渲染HTML————<code>dangerousSetInnerHtml</code>，和v-html类似</li></ul><div class="language-jsx"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;hello world&lt;/h1&gt;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerousSetInnerHtml</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">__html</span><span class="token operator">:</span> html <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>而<code>dangerousSetInnerHtml</code>渲染的HTML内容是没有经过过滤或转义的，所以很容易遇到XSS攻击</p><h3 id="解决方法"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> <a href="https://www.npmjs.com/package/dompurify" target="_blank" rel="noopener noreferrer">解决方法</a></h3><p>可以通过 dompurify.sanitize 进行过滤</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;hello world&lt;/h1&gt;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerousSetInnerHtml</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">__html</span><span class="token operator">:</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div>',6)];p.render=function(s,t,p,e,c,l){return n(),a("div",null,o)};export{t as __pageData,p as default};
