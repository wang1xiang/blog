import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"富文本编辑器html内容转word：html-docs-js避坑指南","frontmatter":{"date":"2023-04-06","title":"富文本编辑器html内容转word：html-docs-js避坑指南","tags":["javascript","prosemirror"],"describe":"html2docs"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":3,"title":"使用说明","slug":"使用说明"},{"level":2,"title":"使用过程遇到的问题及处理方案","slug":"使用过程遇到的问题及处理方案"},{"level":3,"title":"字体加粗不生效、字体背景颜色不生效处理","slug":"字体加粗不生效、字体背景颜色不生效处理"},{"level":3,"title":"h1 - h6 标题高度优化及未同步 word 文档标题","slug":"h1-h6-标题高度优化及未同步-word-文档标题"},{"level":3,"title":"图片下多出一个白框","slug":"图片下多出一个白框"},{"level":3,"title":"列表 ul、ol","slug":"列表-ul、ol"},{"level":3,"title":"复选框 checkbox","slug":"复选框-checkbox"},{"level":3,"title":"附件导出、多维表等 iframe 内容","slug":"附件导出、多维表等-iframe-内容"},{"level":3,"title":"CSS 问题","slug":"css-问题"},{"level":2,"title":"未解决的部分","slug":"未解决的部分"},{"level":2,"title":"小结","slug":"小结"}],"relativePath":"docs/javascript/html2docs.md","lastUpdated":1742177050137.455}';var p={};const o=[a('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>我们公司目前在做基于<a href="https://tiptap.dev/" target="_blank" rel="noopener noreferrer">tiptap</a>的在线协同文档，最近需要做导出 pdf、word 需求。</p><p>导出 word 文档使用的是<a href="https://github.com/caiyexiang/html-docx-js-typescript" target="_blank" rel="noopener noreferrer">html-docx-js-typescript</a>，是用 typescript 重写了一下<a href="https://github.com/evidenceprime/html-docx-js" target="_blank" rel="noopener noreferrer">html-docx-js</a>，可以看到最近的提交记录是 2016 年，貌似已经不维护了，很多 Issues 没人管。</p><p><img src="/blog/_assets/html-docs-js.01197acd.png" alt="html-docs-js.png"></p><p>实在找不到其他的 html 转 word 的插件，最后只能使用它来处理，我把我在使用过程中遇到的问题一一列出来，就有了这篇避坑指南。</p><h3 id="使用说明"><a class="header-anchor" href="#使用说明" aria-hidden="true">#</a> 使用说明</h3><ul><li><p>安装</p><p>安装<code>html-docx-js-typescript</code>，同时安装<a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener noreferrer">FileSaver</a>用于浏览器端保存文件。</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> html-docx-js-typescript file-saver --save-dev\n<span class="token function">npm</span> <span class="token function">install</span> @types/html-docx-js @types/file-saver --dev\n</code></pre></div></li><li><p>使用方法</p><p>参考<a href="https://github.com/caiyexiang/html-docx-js-typescript#vuejs-usage-demo" target="_blank" rel="noopener noreferrer">官方示例</a></p></li></ul><h2 id="使用过程遇到的问题及处理方案"><a class="header-anchor" href="#使用过程遇到的问题及处理方案" aria-hidden="true">#</a> 使用过程遇到的问题及处理方案</h2><h3 id="字体加粗不生效、字体背景颜色不生效处理"><a class="header-anchor" href="#字体加粗不生效、字体背景颜色不生效处理" aria-hidden="true">#</a> 字体加粗不生效、字体背景颜色不生效处理</h3><p>字体加粗<code>&lt;strong&gt;</code>和标记文本元素<code>&lt;mark&gt;</code>标签需要替换为<code>&lt;b&gt;</code>和<code>&lt;span&gt;</code>标签</p><div class="language-js"><pre><code><span class="token keyword">const</span> innerHtml <span class="token operator">=</span> cloneEle<span class="token punctuation">.</span>innerHTML\n  <span class="token comment">// strong在word中不生效问题</span>\n  <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;strong&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;b&gt;&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;\\/strong&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;/b&gt;&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 背景色不生效问题</span>\n  <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;mark</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;span&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;\\/mark&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;/span&gt;&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="h1-h6-标题高度优化及未同步-word-文档标题"><a class="header-anchor" href="#h1-h6-标题高度优化及未同步-word-文档标题" aria-hidden="true">#</a> h1 - h6 标题高度优化及未同步 word 文档标题</h3><p>我们文档中的标题对应的 HTML 内容长这样</p><p><img src="/blog/_assets/docs-h-style.1fbe103b.png" alt="docs-h-style.png"></p><p>需要将内容转换为类似<code>&lt;h1&gt;xxx&lt;/h1&gt;</code>这样，不然 word 中编辑时不能对应标题，修改如下：</p><div class="language-js"><pre><code><span class="token comment">// 标题高度和字体失效 需要设置lineHeight和fontWeight</span>\n<span class="token keyword">const</span> <span class="token function-variable function">handleLevelStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cloneEle</span><span class="token operator">:</span> HTMLElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token punctuation">(</span>cloneEle<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">h</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> unknown <span class="token keyword">as</span> HTMLElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      h<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>innerText\n      h<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="图片下多出一个白框"><a class="header-anchor" href="#图片下多出一个白框" aria-hidden="true">#</a> 图片下多出一个白框</h3><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">removeWhiteBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cloneEle</span><span class="token operator">:</span> HTMLElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token literal-property property">separators</span><span class="token operator">:</span> NodeListOf<span class="token operator">&lt;</span>Element<span class="token operator">&gt;</span> <span class="token operator">=</span> cloneEle<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;.ProseMirror-separator&#39;</span>\n  <span class="token punctuation">)</span>\n  separators<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">separator</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    separator<span class="token punctuation">.</span>parentElement<span class="token operator">?.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="列表-ul、ol"><a class="header-anchor" href="#列表-ul、ol" aria-hidden="true">#</a> 列表 ul、ol</h3><p>在开始处理之前，先介绍一个插入 DOM 的 API <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentElement" target="_blank" rel="noopener noreferrer">insertAdjacentElement</a>。</p><p>在 vue、react 这些框架的盛行，基本上我们已经不会再用到 DOM 操作，不过可以了解一下，万一以后用得到呢。</p><div class="language-js"><pre><code><span class="token comment">// 将给定元素element插入到调用的元素的某个位置</span>\nelement<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> element<span class="token punctuation">)</span>\n</code></pre></div><p>参数<code>position</code>可以是以下位置</p><ul><li>&#39;beforebegin&#39;: 插入元素之前，类似 insertBefore</li><li>&#39;afterbegin&#39;: 插入元素第一个 children 之前，类似 prepend</li><li>&#39;beforeend&#39;: 插入元素最后一个 children 之后，类似 appendChild</li><li>&#39;afterend&#39;: 插入元素之后，类似 insertAfter</li></ul><p>接着我们看一下列表这部分的修改，由于我们项目功能上的需求，列表是使用 div 标签来改造的，所以需要将 div 标签转为 ul/ol，下面是我的实现</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">changeDiv2Ul</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">div</span><span class="token operator">:</span> HTMLElement <span class="token operator">|</span> Element<span class="token punctuation">,</span> parent<span class="token operator">?</span><span class="token operator">:</span> HTMLElement <span class="token operator">|</span> Element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> kind <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-list-kind&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> ul <span class="token operator">=</span> kind <span class="token operator">===</span> <span class="token string">&#39;ordered&#39;</span> <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;ol&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 去除margin 不然在word中会偏移</span>\n  <span class="token operator">!</span>parent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>\n  li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> div<span class="token punctuation">.</span>innerHTML\n  ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>\n  parent <span class="token operator">?</span> parent<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">&#39;afterend&#39;</span><span class="token punctuation">,</span> ul<span class="token punctuation">)</span> <span class="token operator">:</span> div<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">&#39;afterend&#39;</span><span class="token punctuation">,</span> ul<span class="token punctuation">)</span>\n  div<span class="token punctuation">.</span>parentElement<span class="token operator">?.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>\n\n  li<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.list-marker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">marker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> marker<span class="token punctuation">.</span>parentElement<span class="token operator">?.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>marker<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 内容区域</span>\n  li<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.list-content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span>\n    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>firstChild <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML\n    content<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">&#39;beforebegin&#39;</span><span class="token punctuation">,</span> span<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.prosemirror-flat-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      content<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.prosemirror-flat-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">div</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">changeDiv2Ul</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    content<span class="token punctuation">.</span>parentElement<span class="token operator">?.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\ncloneEle<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.prosemirror-flat-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">div</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">changeDiv2Ul</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="复选框-checkbox"><a class="header-anchor" href="#复选框-checkbox" aria-hidden="true">#</a> 复选框 checkbox</h3><p>复选框 checkbox 的处理，首先考虑的是转为<code>&lt;input type=&#39;checkbox&#39; /&gt;</code>来处理，结果转完后并没有显示复选框； 接着又想着用 span 标签生成一个方框，<code>&lt;span style=&#39;width: 16px;height: 16px...&#39; /&gt;</code>，这样总能显示了吧！结果依然不行。</p><p>正当我想不到办法的时候，突然灵机一动，可不可以把 word 转成 html 后看看 checkbox 最终会显示成啥样呢？</p><p>于是通过<a href="http://www.docpe.com/word/word-to-html.aspx" target="_blank" rel="noopener noreferrer">在线 word 转 html</a>将 word 转为 html 后，看到复选框对应的 html 内容为<code>&lt;span style=&quot;color:#333333; font-family:&#39;Wingdings 2&#39;; font-size:11pt&quot;&gt;&lt;/span&gt;</code>，改一下吧。</p><div class="language-js"><pre><code><span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span>\nspan<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span style=&quot;color:#333333; font-family:&#39;Wingdings 2&#39;; font-size:11pt&quot;&gt;&lt;/span&gt;</span><span class="token template-punctuation string">`</span></span>\nmarker<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">&#39;beforebegin&#39;</span><span class="token punctuation">,</span> span<span class="token punctuation">)</span>\nmarker<span class="token punctuation">.</span>parentElement<span class="token operator">?.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>marker<span class="token punctuation">)</span>\n</code></pre></div><p>转成 word 后，复选框的选中和取消功能也能正常使用。</p><h3 id="附件导出、多维表等-iframe-内容"><a class="header-anchor" href="#附件导出、多维表等-iframe-内容" aria-hidden="true">#</a> 附件导出、多维表等 iframe 内容</h3><p>参考了一下钉钉文档 <img src="/blog/_assets/dingding-fujian.68d64d10.png" alt="dingding-fujian.png"></p><p>这样就很好改了，只需要把附件对应的节点内容，改为链接即可。</p><div class="language-js"><pre><code>cloneEle<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.attachment-node-wrap&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attach</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">请至One文档查看附件《</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>attach<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">》</span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">const</span> anchorId <span class="token operator">=</span> attach<span class="token punctuation">.</span>parentElement<span class="token operator">?.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-id&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>\n  a<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token string">&#39;_blank&#39;</span>\n  a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>location<span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;anchor=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>anchorId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  a<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;</span><span class="token template-punctuation string">`</span></span>\n\n  attach<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">&#39;beforebegin&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>\n  attach<span class="token punctuation">.</span>parentElement<span class="token operator">?.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>attach<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="css-问题"><a class="header-anchor" href="#css-问题" aria-hidden="true">#</a> CSS 问题</h3><p>8 月 30 号更新</p><p>项目在本地运行时，通过 <code>document.head.querySelectorAll(&#39;style&#39;)</code> 便可以拿到所有样式信息。但是一旦打包上线，此时的样式文件都是通过外链的形式引入，以上获取 CSS 样式的代码就会获取不到。</p><p><img src="/blog/_assets/css-link.35372219.png" alt="css-link"></p><p>修改如下：</p><div class="language-ts"><pre><code><span class="token comment">// 获取远程css资源 转为text文本</span>\n<span class="token keyword">const</span> <span class="token function-variable function">handleCssStream</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>\n  <span class="token keyword">const</span> reader <span class="token operator">=</span> result<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">ReadableStream</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">start</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The following function handles each data chunk</span>\n      <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// &quot;done&quot; is a Boolean and value a &quot;Uint8Array&quot;</span>\n        reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> done<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// If there is no more data to read</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            controller<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n          <span class="token punctuation">}</span>\n          <span class="token comment">// Get the data and send it to the browser via the controller</span>\n          controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n          <span class="token comment">// Check chunks by logging to the console</span>\n          <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> text\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * 处理css\n * 线上环境 &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/365.f542e1fc.css&quot;&gt;\n * 本地环境 &lt;style type=&quot;text/css&quot;&gt;\n */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">handleCss</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> links <span class="token operator">=</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;link[type=&quot;text/css&quot;]&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// @ts-ignore</span>\n  <span class="token keyword">const</span> remoteCSSPromise <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>links<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> remoteCSSResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>remoteCSSPromise<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> remoteCSSStreamPromise <span class="token operator">=</span> remoteCSSResult<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// @ts-ignore</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> item\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">handleCssStream</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> remoteCSSStreamResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>remoteCSSStreamPromise<span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;remoteCSSStreamResult&#39;</span><span class="token punctuation">,</span> remoteCSSStreamResult<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> cssText <span class="token operator">=</span> remoteCSSStreamResult<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// @ts-ignore</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> item\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  styles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cssText<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>css<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> cssText\n<span class="token punctuation">}</span>\n</code></pre></div><ol><li>通过 <code>document.head.querySelectorAll(&#39;link[type=&quot;text/css&quot;]&#39;)</code> 获取所有外链 CSS；</li><li>通过 fetch 获取远程 CSS 流，结果为<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noopener noreferrer">ReadableStream</a>；</li><li>通过 <code>handleCssStream</code> 将可读流转换为 text 文本；</li><li>与其他 CSS 样式合并，最终转为文本内容，嵌入 html 内容中。</li></ol><h2 id="未解决的部分"><a class="header-anchor" href="#未解决的部分" aria-hidden="true">#</a> 未解决的部分</h2><ul><li>表情无法导出、钉钉、飞书都是如此</li></ul><h2 id="小结"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>以上是我在使用<code>html-docs-js</code>插件时遇到的一些问题及处理方式，如果有遇到同样问题的小伙伴，可以贴下你们的处理方式。或者这里没有提到的问题，也欢迎大家补充。</p>',47)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
