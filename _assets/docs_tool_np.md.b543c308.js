import{f as n,g as a,J as s}from"./common-03e46d7f.js";const p='{"title":"npm发布工具np使用","frontmatter":{"date":"2022-10-25","title":"npm发布工具np使用","tags":["tool"],"describe":"使用np代替npm publish发布"},"headers":[{"level":2,"title":"介绍","slug":"介绍"},{"level":2,"title":"安装","slug":"安装"},{"level":2,"title":"使用步骤","slug":"使用步骤"},{"level":2,"title":"配置文件","slug":"配置文件"}],"relativePath":"docs/tool/np.md","lastUpdated":1742205571503.04}';var e={};const o=[s('<h2 id="介绍"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><a href="https://www.npmjs.com/package/np" target="_blank" rel="noopener noreferrer">np</a>：更好的npm发布工具</p><h2 id="安装"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash"><pre><code><span class="token comment"># 全局安装</span>\n<span class="token function">npm</span> <span class="token function">install</span> np -g\n<span class="token comment"># 查看帮助</span>\nnp --help\n</code></pre></div><p><img src="/blog/_assets/np--help.1a6e5fd3.jpg" alt="np--help.jpg"></p><h2 id="使用步骤"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h2><ol><li><p>首先项目必须是git仓库，已经push代码到远程，并且不能有未提交的文件，否则会报错</p></li><li><p>项目根目录运行命令</p><div class="language-bash"><pre><code>np\n</code></pre></div><p>此时会出现选择版本号的界面，根据改变选择合适的版本 <img src="/blog/_assets/np-version.4b143ac7.jpg" alt="np-version.jpg"></p></li><li><p>接下来会进行以下步骤</p><p><img src="/blog/_assets/np-publish.f85631de.jpg" alt="np-publish.jpg"></p><ol><li><p>prerequisite check：先决条件检查，会依次检查node环境是否正常、检查npm源仓库登陆情况、检查git远程仓库是否存在等</p></li><li><p>Git：检查当前分支是否master或main（如果不是需要添加--any-branch)、检查本地仓库是否干净</p><div class="language-bash"><pre><code><span class="token comment"># 使用任意分支</span>\nnp --any-branch\n</code></pre></div></li><li><p>Installing dependencies using Yarn：使用yarn安装依赖，保证依赖最新版本（如果想使用npm则添加--no-yarn）</p><div class="language-bash"><pre><code><span class="token comment"># 不删除node_modules即不安装依赖，如果这样写后Installing dependencies using Yarn这一步会消失</span>\nnp --any-branch --no-cleanup --no-yarn\n</code></pre></div></li><li><p>Running tests using Yarn：运行<code>yarn tests</code>，如果这一步报错，需要修改scripts中的tests脚本，移除<code>exit 1</code></p><div class="language-bash"><pre><code><span class="token comment"># --no-test不执行tests命令</span>\nnp --any-branch --no-cleanup --no-yarn --no-tests\n<span class="token comment"># 简写</span>\nnp --any-branch --yolo\n</code></pre></div></li><li><p>Bumping version using Yarn</p></li><li><p>Publishing package using Yarn：发布包</p></li><li><p>Pushing tags：发布tag</p></li></ol></li><li><p>发布成功后，git仓库会生成一个提交记录、并同时生成一个版本tag</p></li></ol><h2 id="配置文件"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>每次发布的时候都需要<code>np --any-branch --yolo</code>这样执行，所以np提供了配置文件的方式解决</p><ul><li><p>在package.json中配置</p><div class="language-json"><pre><code>  ...\n  <span class="token property">&quot;np&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;yarn&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;anyBranch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;cleanup&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;yolo&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  ...\n</code></pre></div></li><li><p>添加单独的配置文件<code>.np-config.json</code></p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;yarn&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;anyBranch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;cleanup&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;yolo&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul>',10)];e.render=function(s,p,e,t,l,c){return n(),a("div",null,o)};export{p as __pageData,e as default};
