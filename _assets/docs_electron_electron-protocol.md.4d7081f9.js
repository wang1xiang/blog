import{f as n,g as a,J as s}from"./common-03e46d7f.js";const t='{"title":"浏览器如何打开Electron应用？","frontmatter":{"date":"2024-03-26","title":"浏览器如何打开Electron应用？","tags":["electron"],"describe":null},"headers":[{"level":2,"title":"省流","slug":"省流"},{"level":2,"title":"什么是自定义协议","slug":"什么是自定义协议"},{"level":2,"title":"Electron 中的自定义协议是什么","slug":"electron-中的自定义协议是什么"},{"level":3,"title":"如何在网页打开应用","slug":"如何在网页打开应用"},{"level":3,"title":"网页打开应用","slug":"网页打开应用"},{"level":2,"title":"session","slug":"session"}],"relativePath":"docs/electron/electron-protocol.md","lastUpdated":1743046188454.042}';var p={};const o=[s('<h2 id="省流"><a class="header-anchor" href="#省流" aria-hidden="true">#</a> 省流</h2><p>通过自定义协议可以打开 Electron 应用。</p><p>Electron 中提供了一个 Protocol API，用于注册自定义协议并拦截基于现有协议的请求。</p><h2 id="什么是自定义协议"><a class="header-anchor" href="#什么是自定义协议" aria-hidden="true">#</a> 什么是自定义协议</h2><p>自定义协议是一种定义在应用程序或系统中的特殊协议，用于指示应用程序如何处理特定类型的资源或请求。与标准的 HTTP、FTP 等协议不同，自定义协议通常不是由网络标准组织定义的，而是由应用程序开发者根据自己的需求定义的。</p><p>自定义协议可以用于许多不同的场景，例如：</p><ol><li><p><strong>应用程序间通信：</strong> 两个或多个本地应用程序之间可以通过自定义协议进行通信，传递数据或命令。</p></li><li><p><strong>内部资源访问：</strong> 应用程序可以使用自定义协议来访问本地系统中的资源，如文件、数据库等，而无需暴露这些资源的实际路径或位置。</p></li><li><p><strong>自定义 URL 方案：</strong> 应用程序可以注册自定义的 URL 协议来打开应用程序内部的特定页面或执行特定操作。</p></li><li><p><strong>安全性：</strong> 通过自定义协议可以实现一些额外的安全性措施，例如应用程序可以要求访问资源时验证用户身份或权限。</p></li></ol><p>自定义协议的实现通常涉及以下步骤：</p><ul><li>定义协议格式和语法：定义自定义协议的 URI 格式，包括协议名称、路径、参数等。</li><li>在应用程序中注册协议处理器：应用程序需要注册用于处理自定义协议的处理器，以便在接收到相关请求时执行相应的操作。</li><li>实现协议处理逻辑：实现处理自定义协议请求的逻辑，包括解析请求、执行操作、生成响应等。</li></ul><p>需要注意的是，使用自定义协议可能会带来一些安全风险，特别是在处理用户提供的输入时。因此，在实现自定义协议时需要谨慎处理输入，以防止安全漏洞的发生。</p><h2 id="electron-中的自定义协议是什么"><a class="header-anchor" href="#electron-中的自定义协议是什么" aria-hidden="true">#</a> Electron 中的自定义协议是什么</h2><p>在 Electron 中，你可以注册自定义协议以处理应用程序内部资源或特定操作。这对于访问本地文件系统或执行应用程序特定的操作非常有用。通常情况下，这种自定义协议注册在应用程序启动时。</p><p>以下是注册自定义协议的一般步骤：</p><ol><li>在 Electron 主进程中，使用 <code>protocol.registerSchemesAsPrivileged</code> 或 <code>protocol.registerSchemesAsPrivileged</code> 方法注册自定义协议。这些方法允许你将自定义协议注册为特权协议，以便在渲染进程中使用。</li><li>实现处理自定义协议的逻辑，包括解析请求、执行操作等。</li><li>在渲染进程中，使用注册的自定义协议来请求资源或执行操作。</li></ol><p>以下是一个简单的示例，展示了如何在 Electron 中注册自定义协议：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> protocol<span class="token punctuation">,</span> BrowserWindow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 注册自定义协议</span>\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  protocol<span class="token punctuation">.</span><span class="token function">registerFileProtocol</span><span class="token punctuation">(</span><span class="token string">&#39;myapp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// 去除协议部分</span>\n    <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> filePath <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 创建窗口并加载自定义协议资源</span>\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">nodeIntegration</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">&#39;myapp://example.html&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>在这个示例中：</p><ul><li><code>protocol.registerFileProtocol</code> 方法用于注册一个名为 &quot;myapp&quot; 的自定义协议。在请求这个协议时，它会解析请求的 URL 并返回对应的本地文件路径。</li><li><code>mainWindow.loadURL</code> 方法加载了一个使用了自定义协议的 URL（<code>myapp://example.html</code>），这会触发 Electron 的协议处理逻辑，并加载相应的本地文件。</li></ul><p>你可以根据自己的需求和场景来实现更复杂的自定义协议逻辑，比如访问数据库、执行特定操作等。</p><h3 id="如何在网页打开应用"><a class="header-anchor" href="#如何在网页打开应用" aria-hidden="true">#</a> 如何在网页打开应用</h3><p>要在网页中直接打开 Electron 应用程序，你可以注册一个自定义协议，并在网页中通过该自定义协议的链接来触发 Electron 应用的启动。</p><p>以下是一种实现方法：</p><ol><li><p><strong>注册自定义协议：</strong> 在 Electron 主进程中注册一个自定义协议，并指定该协议的处理逻辑，以便在接收到相关请求时启动 Electron 应用。</p></li><li><p><strong>在网页中创建链接：</strong> 在网页中创建一个链接，链接的 URL 使用注册的自定义协议。</p></li></ol><p>以下是一个示例代码，演示了如何在网页中创建链接来触发 Electron 应用的启动：</p><p>在 Electron 主进程中：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> protocol<span class="token punctuation">,</span> shell <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 注册自定义协议</span>\napp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  protocol<span class="token punctuation">.</span><span class="token function">registerHttpProtocol</span><span class="token punctuation">(</span><span class="token string">&#39;openapp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 启动应用程序</span>\n    app<span class="token punctuation">.</span><span class="token function">relaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    app<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>在网页中：</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Open Electron App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 创建链接 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>openapp://open<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Open Electron App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>在上述示例中，我们注册了一个名为 &quot;openapp&quot; 的自定义协议。当网页中的链接被点击时，会发送一个使用该协议的请求。在 Electron 主进程中，我们监听这个自定义协议的请求，并在收到请求时重新启动应用程序。</p><p>需要注意的是，自定义协议的注册必须在应用程序启动时进行。因此，在示例中，我们将注册代码放在了 <code>app.on(&#39;ready&#39;, ...)</code> 回调中。</p><p>这样，当用户点击网页中的链接时，就会触发 Electron 应用的重新启动。</p><h3 id="网页打开应用"><a class="header-anchor" href="#网页打开应用" aria-hidden="true">#</a> 网页打开应用</h3><p>vscode://open</p><p>baiduyunguanjia://open</p><h2 id="session"><a class="header-anchor" href="#session" aria-hidden="true">#</a> session</h2><p>管理浏览器会话、cookie、缓存、代理设置等。</p>',36)];p.render=function(s,t,p,e,c,l){return n(),a("div",null,o)};export{t as __pageData,p as default};
