import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 16：二叉树常见题目4","frontmatter":{"date":"2025-02-27","title":"跟着卡哥学算法Day 16：二叉树常见题目4","tags":["leetcode"],"describe":"二叉树常见题目4"},"headers":[{"level":2,"title":"110.平衡二叉树 🌟🌟","slug":"_110-平衡二叉树-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":2,"title":"112. 路径总和 🌟","slug":"_112-路径总和-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":2,"title":"113. 路径总和 II 🌟🌟","slug":"_113-路径总和-ii-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":2,"title":"106. 从中序与后序遍历序列构造二叉树 🌟🌟","slug":"_106-从中序与后序遍历序列构造二叉树-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-4"},{"level":3,"title":"解题思路","slug":"解题思路-4"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"105. 从前序与中序遍历序列构造二叉树 🌟🌟","slug":"_105-从前序与中序遍历序列构造二叉树-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-5"},{"level":3,"title":"解题思路","slug":"解题思路-5"}],"relativePath":"docs/leetcode/binary-tree-code3.md","lastUpdated":1742205571282.0386}';var t={};const o=[a('<h2 id="_110-平衡二叉树-🌟🌟"><a class="header-anchor" href="#_110-平衡二叉树-🌟🌟" aria-hidden="true">#</a> 110.平衡二叉树 🌟🌟</h2><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定一个二叉树，在q树的最后一行找到最左边的值。</p><p>示例 1:</p><p>给定二叉树 [2, 1, 3]</p><div class="language-js"><pre><code><span class="token comment">//       2</span>\n<span class="token comment">//      / \\</span>\n<span class="token comment">//     1  3</span>\n</code></pre></div><p>输出：1</p><p>示例 2:</p><p>给定二叉树 [1, 2, 3, 4, 5, 6, 7]</p><div class="language-js"><pre><code><span class="token comment">//       1</span>\n<span class="token comment">//      / \\</span>\n<span class="token comment">//     2  3</span>\n<span class="token comment">//    /  / \\</span>\n<span class="token comment">//   4  5  6</span>\n<span class="token comment">//      /</span>\n<span class="token comment">//     7</span>\n</code></pre></div><p>输出：7</p><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><ul><li>关键：在树的<strong>最底层</strong>找到<strong>最左边</strong>的值</li><li><strong>最底层</strong>：二叉树最大深度的一层</li><li><strong>最左边</strong>：该层中最靠左边的节点</li></ul><h4 id="递归"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h4><p>递归三部曲：</p><ol><li><p>明确递归函数的参数和返回值</p><ul><li>参数 1：当前传入节点</li><li>参数 2：当前节点的深度</li><li>返回值：无</li></ul></li><li><p>明确终止条件</p><ul><li>遇到叶子节点 <code>!root.left &amp;&amp; !root.right</code>，当前深度与最大深度比较，大于最大深度，则更新最大深度 maxDepth 和最大深度最左边的值 result</li></ul></li><li><p>确定单层递归逻辑</p><ul><li>分别计算左子树和右子树最大深度</li></ul></li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> maxDepth <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> depth</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">&gt;</span> maxDepth<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        maxDepth <span class="token operator">=</span> depth\n        result <span class="token operator">=</span> node<span class="token punctuation">.</span>val\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="迭代"><a class="header-anchor" href="#迭代" aria-hidden="true">#</a> 迭代</h4><p><strong>求最后一行第一个节点的数值</strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> length <span class="token operator">=</span> queue<span class="token punctuation">.</span>length\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> result <span class="token operator">=</span> cur<span class="token punctuation">.</span>val\n      cur<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n      cur<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_112-路径总和-🌟"><a class="header-anchor" href="#_112-路径总和-🌟" aria-hidden="true">#</a> 112. 路径总和 🌟</h2><p><a href="https://leetcode.cn/problems/path-sum/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例: 给定如下二叉树，以及目标和 sum = 22，</p><div class="language-js"><pre><code><span class="token comment">//       5</span>\n<span class="token comment">//      / \\</span>\n<span class="token comment">//     4  8</span>\n<span class="token comment">//    /  / \\</span>\n<span class="token comment">//   11 13 4</span>\n<span class="token comment">//   /\\     \\</span>\n<span class="token comment">//  7 2     1</span>\n</code></pre></div><p>返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。</p><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><h4 id="递归-2"><a class="header-anchor" href="#递归-2" aria-hidden="true">#</a> 递归</h4><p>递归三部曲：</p><ol><li><p>确定递归函数的参数和返回值</p><ul><li>参数 1：根节点</li><li>参数 2：计数器，用来计算二叉树的一条边之和是否等于目标值</li><li>返回值：bool</li></ul></li><li><p>确定终止条件</p><p>从根节点开始目标值递减，直到叶子节点时判断是否为 0</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> count <span class="token operator">===</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>确定单层递归逻辑</p><ul><li>递归左右子节点，传递剩余和 <code>count - cur.left.val</code> <code>count - cur.right.val</code></li></ul></li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> count <span class="token operator">===</span> root<span class="token punctuation">.</span>val\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> count <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">||</span>\n    <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> count <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="迭代-2"><a class="header-anchor" href="#迭代-2" aria-hidden="true">#</a> 迭代</h4><p>与递归不同，迭代记录当前路径和，再与目标值进行比较</p><p>步骤：</p><ol><li>初始化栈：根节点和初始和存入栈</li><li>遍历栈：弹出节点及当前和，若为叶子且和等于目标值，返回 true</li><li>压入子节点：将左右子节点及更新后的和压入栈</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> currentCount<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> count <span class="token operator">===</span> currentCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n\n    node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> currentCount <span class="token operator">+</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> currentCount <span class="token operator">+</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_113-路径总和-ii-🌟🌟"><a class="header-anchor" href="#_113-路径总和-ii-🌟🌟" aria-hidden="true">#</a> 113. 路径总和 II 🌟🌟</h2><p><a href="https://leetcode.cn/problems/path-sum-ii/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p><p>叶子节点 是指没有子节点的节点。</p><p>示例: 给定如下二叉树，以及目标和 sum = 22，</p><div class="language-js"><pre><code><span class="token comment">//       5</span>\n<span class="token comment">//      / \\</span>\n<span class="token comment">//     4  8</span>\n<span class="token comment">//    /  / \\</span>\n<span class="token comment">//   11 13 4</span>\n<span class="token comment">//   /\\   / \\</span>\n<span class="token comment">//  7 2   5 1</span>\n</code></pre></div><p>输出：[[5,4,11,2],[5,8,4,5]]</p><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><h4 id="递归-3"><a class="header-anchor" href="#递归-3" aria-hidden="true">#</a> 递归</h4><p>递归三部曲：</p><ol><li><p>确定递归函数的参数和返回值</p><ul><li>参数 1：根节点</li><li>参数 2：计数器，用来计算二叉树的一条边之和是否等于目标值</li><li>返回值：void</li></ul></li><li><p>确定终止条件</p><p>从根节点开始目标值递减，当前节点是叶子节点且剩余和等于节点值 → 保存路径。</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>val <span class="token operator">===</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>确定单层递归逻辑</p><ul><li>递归左右子节点，传递剩余和 <code>count - cur.val</code> <code>count - cur.val</code></li><li>递归结束后回溯（从路径中移除当前节点）</li></ul></li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> currentPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> targetNum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n    currentPath<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>val <span class="token operator">===</span> targetNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>currentPath<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 深拷贝 避免后续影响</span>\n    <span class="token punctuation">}</span>\n\n    node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetNum <span class="token operator">-</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetNum <span class="token operator">-</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    currentPath<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 回溯：移除当前节点</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> count<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="迭代-3"><a class="header-anchor" href="#迭代-3" aria-hidden="true">#</a> 迭代</h4><p>用栈存储节点、剩余和及当前路径。遍历时更新路径和剩余和，遇到叶子节点且满足条件则保存路径。</p><p>步骤：</p><ol><li>初始化栈：根节点、目标和、空路径入栈</li><li>遍历栈：弹出节点，若为叶子且剩余和等于节点值，保存路径</li><li>压入子节点：将左右子节点、更新后的剩余和及新路径压入栈</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> currentCount<span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> currentPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>val <span class="token operator">===</span> currentCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> currentCount <span class="token operator">-</span> node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> currentPath<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> currentCount <span class="token operator">-</span> node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> currentPath<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_106-从中序与后序遍历序列构造二叉树-🌟🌟"><a class="header-anchor" href="#_106-从中序与后序遍历序列构造二叉树-🌟🌟" aria-hidden="true">#</a> 106. 从中序与后序遍历序列构造二叉树 🌟🌟</h2><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-4"><a class="header-anchor" href="#题目描述-4" aria-hidden="true">#</a> 题目描述</h3><p>根据一棵树的中序遍历与后序遍历构造二叉树。</p><p>注意: 你可以假设树中没有重复的元素。</p><p>例如，给出</p><p>中序遍历 inorder = [9,3,15,20,7] 后序遍历 postorder = [9,15,7,20,3] 返回如下的二叉树：</p><div class="language-js"><pre><code><span class="token comment">//       3</span>\n<span class="token comment">//      / \\</span>\n<span class="token comment">//     9  20</span>\n<span class="token comment">//       / \\</span>\n<span class="token comment">//      15 7</span>\n</code></pre></div><h3 id="解题思路-4"><a class="header-anchor" href="#解题思路-4" aria-hidden="true">#</a> 解题思路</h3><p>构造二叉树流程：</p><p><img src="/blog/_assets/binary-tree-node.40dc87a9.png" alt="binary-tree-node"></p><ol><li>如果后序数组大小为零，说明时空节点，停止</li><li>如果不为空，取后序数组最后一个元素就是根节点（<strong>后序确定根节点</strong>）</li><li>找到后序数组最后一个元素在中序数组中的位置，作为切割点（<strong>中序分割左右子树</strong>）</li><li>切割中序数组，中序左数组作为左子树，中序右数组作为右子树</li><li>根据中序左数组长度</li><li>切割后序数组，切成后序左数组作为左子树，和后序右数组作为右子树</li><li>递归 1 - 5 步骤</li></ol><h4 id="递归三部曲"><a class="header-anchor" href="#递归三部曲" aria-hidden="true">#</a> 递归三部曲</h4><ol><li><p>确定递归函数的参数和返回值</p><ul><li>参数 1：中序数组</li><li>参数 2：后序数组</li><li>返回值：根节点</li></ul></li><li><p>确定终止条件</p><ul><li>数组长度为空时，返回 null</li></ul></li><li><p>确定单层递归逻辑</p><ul><li>获取后序数组最后一个元素，作为根节点 <code>const rootVal = postorder.pop()</code></li><li>获取中序数组中根节点的 index <code>const rootIndex = inorder.indexOf(rootVal)</code></li><li>以根节点创建树 <code>const root = new TreeNode(rootVal)</code></li><li>递归构造左子树 <code>root.left = buildTree(inorder.slice(0, rootIndex), postorder.slice(0, rootIndex))</code></li><li>递归构造右子树 <code>root.right = buildTree(inorder.slice(rootIndex + 1), postorder.slice(rootIndex))</code></li></ul></li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token parameter">inorder<span class="token punctuation">,</span> postorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>inorder<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>\n\n  <span class="token keyword">const</span> rootVal <span class="token operator">=</span> postorder<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> rootIndex <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span>\n\n  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>\n    inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rootIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    postorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rootIndex<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>\n    inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>rootIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    postorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>rootIndex<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> root\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_105-从前序与中序遍历序列构造二叉树-🌟🌟"><a class="header-anchor" href="#_105-从前序与中序遍历序列构造二叉树-🌟🌟" aria-hidden="true">#</a> 105. 从前序与中序遍历序列构造二叉树 🌟🌟</h2><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-5"><a class="header-anchor" href="#题目描述-5" aria-hidden="true">#</a> 题目描述</h3><p>给给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p><h3 id="解题思路-5"><a class="header-anchor" href="#解题思路-5" aria-hidden="true">#</a> 解题思路</h3><h4 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h4><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>preorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>\n  <span class="token keyword">const</span> rootVal <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> rootIndex <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span>\n\n  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>\n    preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rootIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rootIndex<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>\n    preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>rootIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>rootIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  <span class="token keyword">return</span> root\n<span class="token punctuation">}</span>\n</code></pre></div>',80)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
