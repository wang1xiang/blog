import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"classnames——使用方法总结","frontmatter":{"date":"2022-09-22","title":"classnames——使用方法总结","tags":["react"],"describe":"classnames——使用方法总结"},"headers":[{"level":2,"title":"介绍","slug":"介绍"},{"level":3,"title":"安装","slug":"安装"},{"level":3,"title":"使用方法","slug":"使用方法"}],"relativePath":"docs/react/react-classnames.md","lastUpdated":1742973717032.3684}';var p={};const o=[a('<p>我们在react项目中使用CSS Module 的方式管理样式文件，而<a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener noreferrer">classnames</a>就是为了更方便的使用CSS Module。</p><h2 id="介绍"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>官方介绍是：一个简单的 JavaScript 实用程序，用于有条件地将类名连接在一起。<br> 在React中，当有多个类名变量需要添加到对应元素上，使用classnames可以更简单的实现。</p><h3 id="安装"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash"><pre><code><span class="token comment"># npm</span>\n<span class="token function">npm</span> i classnames\n<span class="token comment"># or Yarn (note that it will automatically save the package to your `dependencies` in `package.json`)</span>\n<span class="token function">yarn</span> <span class="token function">add</span> classnames\n</code></pre></div><h3 id="使用方法"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h3><ul><li><p>classNames 函数接受任意数量的参数，可以是字符串或对象。参数 &#39;foo&#39; 是 { foo: true } 的缩写。如果与给定键关联的值是虚假的，则该键将不会包含在输出中。</p><div class="language-js"><pre><code><span class="token function">classNames</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;foo bar&#39;</span>\n<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;foo bar&#39;</span>\n<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;foo-bar&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;foo-bar&#39;</span>\n<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;foo-bar&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;&#39;</span>\n<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;foo-bar&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;foo bar&#39;</span>\n<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;foo bar&#39;</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;a b c&#39;</span>\n</code></pre></div><p>规则：</p><ul><li>简单类型，直接加到集合，(&#39;foo&#39;, &#39;bar&#39;)</li><li>数组，判断元素真假，加到集合 ({ foo: true }, { bar: true, &#39;foo-bar&#39;: false })</li><li>对象，判断value真假，加到集合 [&#39;b&#39;, { c: true, d: false }]</li></ul></li><li><p>可以通过es6的模板字符串绑定类名</p><div class="language-js"><pre><code><span class="token keyword">let</span> buttonType <span class="token operator">=</span> <span class="token string">&#39;primary&#39;</span><span class="token punctuation">;</span>\n<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">btn-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>buttonType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>在react中使用</p><div class="language-js"><pre><code><span class="token keyword">import</span> classNames <span class="token keyword">from</span> <span class="token string">&#39;classnames/bind&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isPressed<span class="token punctuation">,</span> isHovered<span class="token punctuation">,</span> label <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>button\n      className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">classNames</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">btn</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&#39;btn-pressed&#39;</span><span class="token operator">:</span> isPressed<span class="token punctuation">,</span>\n        <span class="token string-property property">&#39;btn-over&#39;</span><span class="token operator">:</span> <span class="token operator">!</span>isPressed <span class="token operator">&amp;&amp;</span> isHovered<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token punctuation">{</span>label<span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Button<span class="token punctuation">;</span>\n\n</code></pre></div></li><li><p>通过classnames/bind去实现类名对象合并，比使用styles方式定义样式简单，以CSS Module方式绑定类名，classnames只是绑定类名</p><div class="language-js"><pre><code><span class="token comment">// 未使用classnames/bind前</span>\n<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./index.module.less&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">[</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">[</span><span class="token string">&quot;config__title&quot;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用classnames/bind</span>\n<span class="token keyword">import</span> classNames <span class="token keyword">from</span> <span class="token string">&#39;classnames/bind&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./index.module.less&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cx <span class="token operator">=</span> <span class="token function">classNames</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;config__title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>注意</strong></p><ul><li>styles方式：如果<code>index.module.less</code>中配置了对应的样式，那么会使用CSS Module方式，如果未配置则会显示undefined <img src="/blog/_assets/styles.27896b20.jpg" alt="styles.jpg"></li><li>classnames/bind方式：如果<code>index.module.less</code>中配置了对应的样式，那么会使用CSS Module方式，如果未配置则会走全局样式 <img src="/blog/_assets/classnamesbind.986e99d1.jpg" alt="classnamesbind.jpg"></li></ul></li></ul>',7)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
