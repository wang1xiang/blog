import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 2：常见中等题目","frontmatter":{"date":"2025-02-12","title":"跟着卡哥学算法Day 2：常见中等题目","tags":["leetcode"],"describe":"数组整体学习 & 常见题目"},"headers":[{"level":2,"title":"209. 长度最小的子数组 🌟🌟","slug":"_209-长度最小的子数组-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"59.螺旋矩阵 II 🌟🌟","slug":"_59-螺旋矩阵-ii-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"代码","slug":"代码-2"}],"relativePath":"docs/leetcode/array-code1.md","lastUpdated":1742205571281.0386}';var t={};const o=[a('<h2 id="_209-长度最小的子数组-🌟🌟"><a class="header-anchor" href="#_209-长度最小的子数组-🌟🌟" aria-hidden="true">#</a> 209. 长度最小的子数组 🌟🌟</h2><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/" target="_blank" rel="noopener noreferrer">力扣链接</a></p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><p>示例：</p><ul><li>输入：s = 7, nums = [2,3,1,2,4,3]</li><li>输出：2</li><li>解释：子数组 [4,3] 是该条件下的长度最小的子数组。</li></ul><p>提示：</p><ul><li>1 &lt;= target &lt;= 10^9</li><li>1 &lt;= nums.length &lt;= 10^5</li><li>1 &lt;= nums[i] &lt;= 10^5</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><h4 id="暴力解法"><a class="header-anchor" href="#暴力解法" aria-hidden="true">#</a> 暴力解法</h4><ul><li>两层 for 循环</li><li>外层循环：sum 清零</li><li>内层循环：计算 sum 值，如果大于 s，则停止内存循环，计算 subLength，与前一次比较</li><li>时间复杂度 O(n^2)</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token number">7</span>\n<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token comment">// 暴力 双循环</span>\n<span class="token keyword">const</span> <span class="token function-variable function">minSubArrayLen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">Infinity</span>\n  <span class="token keyword">let</span> subLength <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        subLength <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>\n        result <span class="token operator">=</span> result <span class="token operator">&lt;</span> subLength <span class="token operator">?</span> result <span class="token operator">:</span> subLength\n        <span class="token keyword">break</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> subLength\n<span class="token punctuation">}</span>\n<span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> s<span class="token punctuation">)</span>\n</code></pre></div><h4 id="滑动窗口"><a class="header-anchor" href="#滑动窗口" aria-hidden="true">#</a> 滑动窗口</h4><ul><li><p><strong>重点：</strong></p></li><li><p>一个 for 循环实现两个 for 循环的事情</p></li><li><p><strong>循环索引表示滑动串口的终止位置</strong>：如果表示起始位置，终止位置需要遍历右侧区间所有元素，重新计算右侧区间大于等于 s 的下标，相似于两次 for 循环了；而如果为终止位置时，左侧区间使用上次的值，不用重新计算</p></li><li><p><strong>如何移动起始位置</strong>：终止位置随索引向后移动，左侧区间和大于等于 s 时，向后移动起始位置，重新定义区间</p><p>判断条件：</p><div class="language-js"><pre><code><span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  subLength <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>\n  result <span class="token operator">=</span> result <span class="token operator">&lt;</span> subLength <span class="token operator">?</span> result <span class="token operator">:</span> subLength\n  sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  i<span class="token operator">++</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-ts"><pre><code><span class="token comment">// 滑动窗口</span>\n<span class="token keyword">const</span> <span class="token function-variable function">minSubArrayLen</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sums<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> length <span class="token operator">=</span> sums<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">Infinity</span>\n  <span class="token keyword">let</span> subLength <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      subLength <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>\n      result <span class="token operator">=</span> result <span class="token operator">&lt;</span> subLength <span class="token operator">?</span> result <span class="token operator">:</span> subLength\n      sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      i<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> result\n<span class="token punctuation">}</span>\n<span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> s<span class="token punctuation">)</span>\n</code></pre></div><h2 id="_59-螺旋矩阵-ii-🌟🌟"><a class="header-anchor" href="#_59-螺旋矩阵-ii-🌟🌟" aria-hidden="true">#</a> 59.螺旋矩阵 II 🌟🌟</h2><p><a href="https://leetcode.cn/problems/remove-element/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p><p>示例:</p><p><img src="/blog/_assets/leetcode-59.a5b808d7.png" alt="alt text"></p><p>输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]</p><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p>模拟画正方形矩阵</p><ul><li><p><strong>重点</strong></p></li><li><p><strong>循环不变量</strong>：模拟顺时针画矩阵</p><div class="language-js"><pre><code>圈数：n <span class="token operator">/</span> <span class="token number">2</span>\n起始位置：startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>startY <span class="token operator">=</span> <span class="token number">0</span> 循环一圈 start<span class="token operator">++</span><span class="token constant">X</span> startY<span class="token operator">++</span>\n终止位置：offset <span class="token operator">=</span> <span class="token number">1</span> 循环一圈 offset<span class="token operator">++</span>\n填充数：count <span class="token operator">=</span> <span class="token number">0</span>；每次count<span class="token operator">++</span>\n</code></pre></div></li><li><p><strong>左闭右开</strong>：四条边都坚持左闭右开的规则，统一</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> startX <span class="token operator">-</span> offset<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startY <span class="token operator">-</span> offset<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> startX<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startY<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>\n\n每转一圈 startX<span class="token operator">++</span> startY<span class="token operator">++</span> offset<span class="token operator">++</span>\n</code></pre></div></li></ul><h3 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">generateMatrix</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> startX <span class="token operator">=</span> <span class="token punctuation">(</span>startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 起始位置</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 填充数</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 二维数组</span>\n\n  <span class="token keyword">let</span> loop <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 圈数</span>\n  <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 控制每层填充数字</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> row <span class="token operator">=</span> startX\n    col <span class="token operator">=</span> startY\n    <span class="token comment">// 从左往右</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 从上往下</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 从右往左</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> col <span class="token operator">&gt;</span> startX<span class="token punctuation">;</span> col<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 从下往上</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> row <span class="token operator">&gt;</span> startY<span class="token punctuation">;</span> row<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 更新起始位置</span>\n    startX<span class="token operator">++</span>\n    startY<span class="token operator">++</span>\n    <span class="token comment">// 更新边距</span>\n    offset<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// n为基数 特殊处理中间值</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>\n    res<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre></div>',28)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
