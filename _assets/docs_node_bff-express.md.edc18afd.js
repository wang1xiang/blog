import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"使用 Express 搭建本地服务","frontmatter":{"date":"2024-03-20","title":"使用 Express 搭建本地服务","tags":["node"],"describe":"使用 Express 搭建本地服务"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"“刀耕火种”时代","slug":"“刀耕火种”时代"},{"level":3,"title":"编写代码","slug":"编写代码"},{"level":3,"title":"启动服务器","slug":"启动服务器"},{"level":3,"title":"在浏览器中访问","slug":"在浏览器中访问"},{"level":2,"title":"使用 Express 搭建","slug":"使用-express-搭建"},{"level":3,"title":"始化一个新项目","slug":"始化一个新项目"},{"level":3,"title":"创建 Express 应用程序","slug":"创建-express-应用程序"},{"level":3,"title":"启动服务器","slug":"启动服务器-2"},{"level":2,"title":"对比一下","slug":"对比一下"}],"relativePath":"docs/node/bff-express.md","lastUpdated":1742176930095.5974}';var t={};const e=[a('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>在进行 Web 开发时，搭建一个本地服务是非常有用的。本地服务可以帮助你在开发过程中快速查看并测试你的网站或应用程序。Express 是一个流行的 Node.js web 框架，它提供了快速、灵活和简单的方式来构建 Web 应用程序和 API。下面介绍如何使用 Express 搭建一个简单的本地服务。</p><h2 id="“刀耕火种”时代"><a class="header-anchor" href="#“刀耕火种”时代" aria-hidden="true">#</a> “刀耕火种”时代</h2><p>虽然有了框架的加持，写一个本地服务会非常轻松， 但是我们仍然也需要知道，它底层到底是怎么实现的，下面写一个基本的示例，看看不使用框架，应该怎么写：</p><h3 id="编写代码"><a class="header-anchor" href="#编写代码" aria-hidden="true">#</a> 编写代码</h3><p>在 server.js 文件中编写以下代码：</p><div class="language-js"><pre><code><span class="token comment">// server.js</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建服务</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parsedUrl <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> path <span class="token operator">=</span> parsedUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>\n  <span class="token comment">// 路由解析</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">&#39;/about&#39;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;About us&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;404 Not Found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 监听端口</span>\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server is running at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="启动服务器"><a class="header-anchor" href="#启动服务器" aria-hidden="true">#</a> 启动服务器</h3><p>在命令行中，进入你的项目目录，然后运行以下命令来启动服务器：</p><div class="language-bash"><pre><code><span class="token function">node</span> server.js\n</code></pre></div><p>现在，Node.js 服务器已经在本地运行，并且可以通过浏览器访问了。</p><h3 id="在浏览器中访问"><a class="header-anchor" href="#在浏览器中访问" aria-hidden="true">#</a> 在浏览器中访问</h3><p>打开 Web 浏览器，并在地址栏中输入 <a href="http://localhost:3000" target="_blank" rel="noopener noreferrer">http://localhost:3000</a>，然后按下回车键，会看到浏览器显示 &quot;Hello, world!&quot;。</p><p><img src="/blog/_assets/bff-express.a8c0aee1.png" alt="bff-express"></p><p>访问 about 路由</p><p><img src="/blog/_assets/bff-express1.394d2eee.png" alt="bff-express1"></p><p>访问一个不存在的路由</p><p><img src="/blog/_assets/bff-express2.f45ccd7e.png" alt="bff-express2"></p><h2 id="使用-express-搭建"><a class="header-anchor" href="#使用-express-搭建" aria-hidden="true">#</a> 使用 Express 搭建</h2><p>上面的方式真的很原始，所有的逻辑都需要手动完成，针对大型项目开发而言，无疑是非常浪费时间和折磨的。</p><h3 id="始化一个新项目"><a class="header-anchor" href="#始化一个新项目" aria-hidden="true">#</a> 始化一个新项目</h3><p>打开命令行界面，进入你想要创建项目的目录，然后运行以下命令来创建一个新的 Express 项目</p><div class="language-bash"><pre><code><span class="token function">npm</span> init -y\n<span class="token function">npm</span> <span class="token function">install</span> express --save\n</code></pre></div><h3 id="创建-express-应用程序"><a class="header-anchor" href="#创建-express-应用程序" aria-hidden="true">#</a> 创建 Express 应用程序</h3><p>创建一个新的 JavaScript 文件（例如 app.js），然后在文件中编写以下代码：</p><div class="language-js"><pre><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;About us&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server is running at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="启动服务器-2"><a class="header-anchor" href="#启动服务器-2" aria-hidden="true">#</a> 启动服务器</h3><p>在命令行中，进入项目目录，然后运行以下命令来启动 Express 服务器：</p><div class="language-bash"><pre><code><span class="token function">node</span> app.js\n</code></pre></div><h2 id="对比一下"><a class="header-anchor" href="#对比一下" aria-hidden="true">#</a> 对比一下</h2><ol><li><p>我们不需要感知那么底层 去手动创建一个 httpServer, 对项目开发而言 是没多大用处且冗余的</p></li><li><p>很明显的感受，我们不需要自己去做路由参数的解析，这是因为框架集成了“路由中间件”（Express 是一个路由和中间件 Web 框架，其自身功能最少。换句话说，Express 应用程序本质上是一系列中间件函数调用。）</p></li><li><p>由于演示的是非常简单，可能并没有那么强烈的对比，但是可以试想一下，如果再有 cookie 处理、身份验证、日志记录、大量的路由处理等等，使用原生的写法，代码会很冗余。</p></li></ol>',31)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
