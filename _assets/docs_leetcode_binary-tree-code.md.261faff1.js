import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"跟着卡哥学算法Day 13：二叉树 & 遍历","frontmatter":{"date":"2025-02-24","title":"跟着卡哥学算法Day 13：二叉树 & 遍历","tags":["leetcode"],"describe":"二叉树 & 遍历"},"headers":[{"level":2,"title":"二叉树基础","slug":"二叉树基础"},{"level":3,"title":"分类","slug":"分类"},{"level":3,"title":"二叉树的存储方式","slug":"二叉树的存储方式"},{"level":3,"title":"二叉树的遍历","slug":"二叉树的遍历"},{"level":3,"title":"二叉树的定义","slug":"二叉树的定义"},{"level":2,"title":"二叉树递归排序","slug":"二叉树递归排序"},{"level":2,"title":"二叉树迭代遍历（非递归）","slug":"二叉树迭代遍历（非递归）"},{"level":3,"title":"前序遍历","slug":"前序遍历"},{"level":3,"title":"中序遍历","slug":"中序遍历"},{"level":3,"title":"后序遍历","slug":"后序遍历"},{"level":2,"title":"二叉树的统一迭代法","slug":"二叉树的统一迭代法"},{"level":3,"title":"如何标记","slug":"如何标记"},{"level":3,"title":"通过入栈顺序调整处理时机","slug":"通过入栈顺序调整处理时机"},{"level":3,"title":"统一迭代法的核心逻辑","slug":"统一迭代法的核心逻辑"},{"level":2,"title":"二叉树的层序遍历","slug":"二叉树的层序遍历"},{"level":3,"title":"思路","slug":"思路"},{"level":3,"title":"代码实现","slug":"代码实现"}],"relativePath":"docs/leetcode/binary-tree-code.md","lastUpdated":1743566425567.4036}';var p={};const o=[a('<h2 id="二叉树基础"><a class="header-anchor" href="#二叉树基础" aria-hidden="true">#</a> 二叉树基础</h2><p>树形结构，每个节点最多有两个子节点，称为<strong>左子节点和右子节点</strong>。</p><ul><li>根节点：顶级节点，没有父节点</li><li>叶子结点：没有子节点的节点</li><li>子树：每个节点的左、右子节点分别构成左子树和右子树</li><li>深度：从根节点到最远叶子节点的最长路径上的节点数</li></ul><h3 id="分类"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><div class="language-js"><pre><code><span class="token comment">// 构建示例树:</span>\n<span class="token comment">//       1</span>\n<span class="token comment">//      / \\</span>\n<span class="token comment">//     2   3</span>\n<span class="token comment">//    / \\</span>\n<span class="token comment">//   4   5</span>\n</code></pre></div><h4 id="普通二叉树"><a class="header-anchor" href="#普通二叉树" aria-hidden="true">#</a> 普通二叉树</h4><p>任意节点最多有两个子节点</p><h4 id="满二叉树"><a class="header-anchor" href="#满二叉树" aria-hidden="true">#</a> 满二叉树</h4><ol><li><strong>所有叶子结点都在同一层</strong></li><li>深度为 k 的满二叉树，最多有 2^k - 1 个节点</li></ol><h4 id="完全二叉树"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h4><ol><li><strong>除最后一层外，其他层节点必须填满，并且最后一层叶子节点必须靠左</strong></li><li>若最底层为第 h 层（h 从 1 开始），则该层包含 1~ 2^(h-1) 个节点。</li></ol><h4 id="二叉搜索树-bst"><a class="header-anchor" href="#二叉搜索树-bst" aria-hidden="true">#</a> 二叉搜索树 BST</h4><ul><li>左子树所有节点值 &lt; 根节点值</li><li>右子树所有节点值 &gt; 根节点值</li></ul><h4 id="平衡二叉搜索树-avl"><a class="header-anchor" href="#平衡二叉搜索树-avl" aria-hidden="true">#</a> 平衡二叉搜索树 AVL</h4><ul><li>任意节点的左右子树高度差不超过 1</li><li>左右子树都会平衡二叉树</li></ul><h3 id="二叉树的存储方式"><a class="header-anchor" href="#二叉树的存储方式" aria-hidden="true">#</a> 二叉树的存储方式</h3><ul><li>链式存储</li><li>顺序存储</li></ul><p>一般使用链式存储</p><h3 id="二叉树的遍历"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h3><h4 id="深度优先遍历"><a class="header-anchor" href="#深度优先遍历" aria-hidden="true">#</a> 深度优先遍历</h4><p>先往深走，遇到叶子结点再往回走</p><ul><li>前序遍历：中左右</li><li>中序遍历：左中右</li><li>后序遍历：左右中</li></ul><p>如下图例子所示： <img src="/blog/_assets/binary-tree-sort.d084e471.png" alt="binary-tree-sort"></p><p><strong>这里的前中后，指的是中间节点的遍历顺序</strong></p><h4 id="广度优先遍历"><a class="header-anchor" href="#广度优先遍历" aria-hidden="true">#</a> 广度优先遍历</h4><p>一层一层遍历</p><h3 id="二叉树的定义"><a class="header-anchor" href="#二叉树的定义" aria-hidden="true">#</a> 二叉树的定义</h3><div class="language-js"><pre><code><span class="token comment">// ES5</span>\n<span class="token keyword">function</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val <span class="token comment">// 节点值</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 左子节点（默认为空）</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 右子节点（默认为空）</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ES6</span>\n<span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val\n    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="二叉树递归排序"><a class="header-anchor" href="#二叉树递归排序" aria-hidden="true">#</a> 二叉树递归排序</h2><p>递归方法论：</p><ol><li><strong>确定递归的参数和返回值</strong></li><li><strong>确定终止条件</strong>，如果没有终止，会导致栈溢出</li><li><strong>确定单层递归的逻辑</strong></li></ol><p>以前序遍历（根 -&gt; 左 -&gt; 右）为例：</p><ol><li><p>确定递归的参数和返回值</p><ul><li>递归参数：当前遍历节点</li><li>返回值：存储遍历节点的数组</li></ul></li><li><p>确定终止条件</p><ul><li>如果本层遍历节点为空，则直接 return</li></ul></li><li><p>确定单层递归的逻辑</p><ul><li>前序遍历：中 左 右</li></ul></li></ol><div class="language-js"><pre><code><span class="token comment">// 前序遍历</span>\n<span class="token keyword">function</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>\n    root<span class="token punctuation">.</span>val<span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token function">perorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 中序遍历</span>\n<span class="token keyword">function</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span><span class="token function">perorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    root<span class="token punctuation">.</span>val<span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 后序遍历</span>\n<span class="token keyword">function</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span><span class="token function">perorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    root<span class="token punctuation">.</span>val<span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/description/" target="_blank" rel="noopener noreferrer">144.二叉树的前序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/" target="_blank" rel="noopener noreferrer">145.二叉树的后序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/" target="_blank" rel="noopener noreferrer">94.二叉树的中序遍历</a></li></ul><h2 id="二叉树迭代遍历（非递归）"><a class="header-anchor" href="#二叉树迭代遍历（非递归）" aria-hidden="true">#</a> 二叉树迭代遍历（非递归）</h2><p>递归在底层也是通过栈来实现的</p><p>通过栈来模拟现二叉树的迭代遍历，避免递归造成的溢出风险</p><h3 id="前序遍历"><a class="header-anchor" href="#前序遍历" aria-hidden="true">#</a> 前序遍历</h3><ol><li>初始化栈，将根节点入栈</li><li>循环处理： <ol><li>弹出栈顶元素，数值保存到数组中</li><li>如果有右子节点，入栈（<strong>先右后左，保证左子树先出栈</strong>）</li><li>如果有左子节点，入栈</li></ol></li><li>如果栈为空，则遍历结束</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> current <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="中序遍历"><a class="header-anchor" href="#中序遍历" aria-hidden="true">#</a> 中序遍历</h3><p>遍历二叉树的迭代过程，主要有两个操作：</p><ol><li>访问：遍历节点</li><li>处理：将元素放进 result 数组中</li></ol><p>中序遍历和前序遍历不同的是：</p><ol><li>前序遍历：先访问中间节点，同时处理的也是中间节点，即<strong>访问和处理的元素顺序一致</strong></li><li>中序遍历：先访问根结点，然后一层一层向下访问，直到到达左子树的最底部，再进行处理</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> cur <span class="token operator">=</span> root\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 一直访问左子树，直到左子树为空</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>\n      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 循环处理栈</span>\n    cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n    <span class="token comment">// 处理右子树</span>\n    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="后序遍历"><a class="header-anchor" href="#后序遍历" aria-hidden="true">#</a> 后序遍历</h3><ul><li>前序遍历是 中 -&gt; 左 -&gt; 右</li><li>后序遍历是 左 -&gt; 右 -&gt; 中</li><li>只需要把前序遍历修改顺序成 中 -&gt; 右 -&gt; 左 的顺序，即<strong>先入栈左子树，再入栈右子树</strong></li><li>再将数组结果进行反转（数指针）</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> current <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="二叉树的统一迭代法"><a class="header-anchor" href="#二叉树的统一迭代法" aria-hidden="true">#</a> 二叉树的统一迭代法</h2><p>上面写出的中序遍历与其他两个的迭代法风格不统一，其主要原因是：<strong>要访问和要处理的节点不一致</strong>。</p><p><strong>此时可以将访问的节点放入栈中，再把要处理的节点也放入栈中但是需要另外做标记</strong></p><h3 id="如何标记"><a class="header-anchor" href="#如何标记" aria-hidden="true">#</a> 如何标记</h3><p>空指针标记法：<strong>要处理的节点放入栈后，紧接这放入一个空指针作为标记</strong>，当栈中弹出 null 时，表示下一个节点需要被处理（即加入结果）。</p><p>那么此时压栈顺序应该如下：</p><ul><li>前序遍历：中 -&gt; 左 -&gt; 右，压栈顺序为：右 -&gt; 左 -&gt; 中 -&gt; null</li><li>中序遍历：左 -&gt; 中 -&gt; 右，压栈顺序为：右 -&gt; 中 -&gt; null -&gt; 左</li><li>后序遍历：左 -&gt; 右 -&gt; 中，压栈顺序为：中 -&gt; null -&gt; 右 -&gt; 左</li></ul><p>如：</p><div class="language-js"><pre><code><span class="token comment">// 构建示例树:</span>\n<span class="token comment">//       1</span>\n<span class="token comment">//      / \\</span>\n<span class="token comment">//     2   3</span>\n<span class="token comment">//    / \\</span>\n<span class="token comment">//   4   5</span>\n</code></pre></div><p>前序遍历：中 -&gt; 左 -&gt; 右，压栈顺序为：右 -&gt; 左 -&gt; 中 -&gt; null</p><ol><li>初始化栈，将 1 压入栈</li><li>循环处理： <ol><li>弹出栈顶元素 <ol><li>为 null，则下个元素就是要处理的元素，添加到结果中，继续处理下一个元素</li><li>不为 null，则继续处理当前元素</li></ol></li><li>压入 3，先右后左</li><li>压入 2</li><li>压入 null</li></ol></li><li>返回结果</li></ol><div class="language-js"><pre><code><span class="token comment">/**\n * 前序遍历统一迭代法\n * 顺序：中 -&gt; 左 -&gt; 右\n * 压栈顺序：右 -&gt; 左 -&gt; 中 -&gt; null\n */</span>\n<span class="token keyword">function</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n      <span class="token keyword">continue</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="通过入栈顺序调整处理时机"><a class="header-anchor" href="#通过入栈顺序调整处理时机" aria-hidden="true">#</a> 通过入栈顺序调整处理时机</h3><p>入栈顺序决定了根节点的处理时机：</p><p>前序遍历：</p><div class="language-js"><pre><code>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 根节点标记为待处理</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment">// 右子节点入栈（后处理）</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token comment">// 左子节点入栈（先处理）</span>\n</code></pre></div><p>根节点先被处理（标记后立即弹出 null）。</p><p>中序遍历：</p><div class="language-js"><pre><code>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment">// 右子节点入栈（后处理）</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 根节点标记为待处理</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token comment">// 左子节点入栈（先处理）</span>\n</code></pre></div><p>根节点在左子树处理后处理。</p><p>后序遍历：</p><div class="language-js"><pre><code>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 根节点标记为待处理</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment">// 右子节点入栈（后处理）</span>\nstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token comment">// 左子节点入栈（先处理）</span>\n</code></pre></div><p>根节点在左右子树均处理后处理。</p><h3 id="统一迭代法的核心逻辑"><a class="header-anchor" href="#统一迭代法的核心逻辑" aria-hidden="true">#</a> 统一迭代法的核心逻辑</h3><p>通过 <strong>空指针标记</strong> 和 <strong>入栈顺序控制</strong>，将三种遍历统一为同一框架：</p><ol><li>标记待处理的根节点：将根节点与空指针一起入栈(<strong>在统一迭代法中，无论是哪种遍历方式，处理节点的时机都是在中节点的位置</strong>)，表示该节点需要后续处理。</li><li>控制子节点的入栈顺序：调整左右子节点的入栈顺序，间接决定根节点的处理时机。</li></ol><h2 id="二叉树的层序遍历"><a class="header-anchor" href="#二叉树的层序遍历" aria-hidden="true">#</a> 二叉树的层序遍历</h2><ul><li>深度优先遍历：递归和迭代都使用栈来实现</li><li>广度优先遍历：二叉树的层序遍历（一层一层遍历二叉树），需要借助队列来实现</li></ul><h3 id="思路"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><ol><li>初始化队列：将根节点加入队列</li><li>循环处理队列： <ol><li>记录当前层的节点数量（队列长度）</li><li>依次取出当前层的所有节点，并将它们的值存入当前层的结果列表</li><li>将每个节点的非空左、右子节点加入队列</li></ol></li><li>逐层收集结果：将每层的节点值列表合并为最终结果</li></ol><div class="language-js"><pre><code><span class="token comment">//       1</span>\n<span class="token comment">//     /   \\</span>\n<span class="token comment">//    2     3</span>\n<span class="token comment">//   / \\     \\</span>\n<span class="token comment">//  4   5     6</span>\n</code></pre></div><p>层序遍历过程：</p><ol><li>初始队列：[1] → 处理第 1 层 → result = [[1]]，子节点入队 [2, 3]</li><li>处理第 2 层：弹出 2 和 3 → result = [[1], [2, 3]]，子节点入队 [4, 5, 6]</li><li>处理第 3 层：弹出 4、5、6 → result = [[1], [2, 3], [4, 5, 6]]</li></ol><h3 id="代码实现"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length\n    <span class="token keyword">const</span> curLevel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      curLevel<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curLevel<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><p>leetcode 相关题目：</p><ul><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener noreferrer">102.二叉树的层序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener noreferrer">107.二叉树的层次遍历 II</a> 二叉树层序遍历后<strong>结果反转</strong></li><li><a href="https://leetcode.cn/problems/binary-tree-right-side-view/" target="_blank" rel="noopener noreferrer">199.二叉树的右视图</a> 二叉树层序遍历后<strong>遍历结果，拿子数组最后一个</strong></li><li><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/" target="_blank" rel="noopener noreferrer">637.二叉树的层平均值</a> 二叉树层序遍历<strong>不记录节点值，记录每层总和的平均值</strong></li><li><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener noreferrer">429.N 叉树的层序遍历</a> 二叉树层序遍历<strong>往队列 push 下层节点时，不再是 left 和 right，而是遍历 children</strong></li><li><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/" target="_blank" rel="noopener noreferrer">515.在每个树行中找最大值</a> 二叉树层序遍历<strong>不记录节点值，记录每层最大值</strong></li><li><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/" target="_blank" rel="noopener noreferrer">116.填充每个节点的下一个右侧节点指针</a> 二叉树层序遍历<strong>如果不是每层最后一个节点，则将它的 next 指针指向队首，返回二叉树头节点</strong></li><li><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/" target="_blank" rel="noopener noreferrer">117.填充每个节点的下一个右侧节点指针 II</a> 和 116 代码一摸一样</li><li><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener noreferrer">104.二叉树的最大深度</a> 二叉树层序遍历，<strong>记录一下遍历的层数就是二叉树的深度</strong></li><li><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener noreferrer">111.二叉树的最小深度</a> 与 104 相似，只是当当前节点左右节点都为 null 时，提前返回 depth 深度</li></ul>',87)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
