import{f as n,g as a,J as s}from"./common-03e46d7f.js";const t='{"title":"在Vue3中利用JSX+函数式组件做到更好的代码复用","frontmatter":{"date":"2023-07-07","title":"在Vue3中利用JSX+函数式组件做到更好的代码复用","tags":["vue"],"describe":"在绝大多数情况下，Vue 推荐使用模板语法来创建应用。但也有1%的情况利用函数式组件可以做到更好的代码复用，一起来看看吧！"},"headers":[{"level":2,"title":"何时使用 JSX 语法","slug":"何时使用-jsx-语法"},{"level":3,"title":"案例 1","slug":"案例-1"},{"level":3,"title":"案例 2","slug":"案例-2"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"docs/vue/vue3-jsx.md","lastUpdated":1742819971126.5356}';var p={};const o=[s('<p><strong>在绝大多数情况下，Vue 推荐使用模板语法来创建应用</strong>。</p><p>先思考一下，你平时在 Vue 中是如何写模板代码的？</p><p>在业务场景下，我会优先选择 template 语法，因为更加直观和易读。template 中 html 代码一把梭，除非遇到可复用的组件或代码量比较大的组件，会选择封装成一个组件引入。</p><p>而对于 JSX 语法，只有在极少数 template 实在不好解决的情况下才会使用，其余 <strong>99% 的场景下都会使用 template 语法</strong>。</p><h2 id="何时使用-jsx-语法"><a class="header-anchor" href="#何时使用-jsx-语法" aria-hidden="true">#</a> 何时使用 JSX 语法</h2><p>JSX 的本质是 createVNode，<code>h()</code>函数的内部执行的也是 createVNode 来生成虚拟 DOM 的，但是由于<code>h()</code>函数比较难写，所以我们使用 JSX 来更加方便快捷的书写。</p><p>之前我们提过在绝大多（99%）情况下，Vue 推荐使用模板语法来创建应用。那么另外的 1% 使用 JSX 的情况都有哪些？</p><p>我们来看几个例子：</p><h3 id="案例-1"><a class="header-anchor" href="#案例-1" aria-hidden="true">#</a> 案例 1</h3><p>一个巨典型的例子，通过 level prop 动态生成标题的组件时，你可能很快想到这样实现：</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>level === 1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>level === 2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>level === 3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\ndefineProps<span class="token operator">&lt;</span>\n  <span class="token literal-property property">level</span><span class="token operator">:</span> number\n<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>这里用 template 模板并不是最好的选择，在每一个级别的标题中重复书写了部分代码，不够简洁优雅。如果尝试用 JSX 来写，代码就会变得简单很多：</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">LevelHeading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> tag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">h</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="案例-2"><a class="header-anchor" href="#案例-2" aria-hidden="true">#</a> 案例 2</h3><p>如果有这样一个场景：template 模板中包含很小并且重复的代码片段（不适合用 v-for 处理的代码），因为没有可复用性，并且代码量较少，抽出来单独封装一个组件反而代码量更大了，这种情况该如何处理呢 🧐？</p><h4 id="react-中处理"><a class="header-anchor" href="#react-中处理" aria-hidden="true">#</a> React 中处理</h4><p>如果你刚好有接触过 React 代码，那么你很快就能想到在 React 可以在一个函数式组件内声明对应的小组件，在函数式组件中可以这样写：</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> <span class="token literal-property property">App</span><span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Demo</span></span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      这里是个隔断，没法循环\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Demo</span></span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token literal-property property">Demo</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> msg <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">demo msg is </span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>但在 Vue 中没法直接像 React 一样在单文件中声明其他组件，如果想复用代码，只能通过抽离封装组件的方式。</p><p>可是这么点代码我还封装个组件，创建文件再引入的工作量可比我直接 CV 大多了 😝。</p><p>那有没有什么办法可以让 Vue 中也可以声明其他组件呢？ 且看下面这个案例。</p><h4 id="vue-组件中定义组件"><a class="header-anchor" href="#vue-组件中定义组件" aria-hidden="true">#</a> Vue 组件中定义组件</h4><p><img src="/blog/_assets/memo-demo.f4f986e3.png" alt="memo-demo.png"> 上图是我在需求中实现的一个具体案例，要求搜索的时候两边同时高亮展示搜索到的内容，先看下使用 template 语法的代码：</p><h5 id="template-语法实现"><a class="header-anchor" href="#template-语法实现" aria-hidden="true">#</a> template 语法实现</h5><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>memo-list__content-item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 概要 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token comment">&lt;!-- 搜索内容超出概要可展示字符长度时前面展示... --&gt;</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>searchIndex &gt; CONTENT_CUT_LENGTH<span class="token punctuation">&quot;</span></span>\n        <span class="token punctuation">&gt;</span></span>{{searchIndex - 4 ? <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> : &#39;&#39;}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span>\n      <span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ content.slice(searchIndex - 4, searchIndex) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n      <span class="token comment">&lt;!-- 高亮展示搜索结果 --&gt;</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span> #fae086</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>{{\n        content.slice(searchIndex, searchValue.length + searchIndex)\n      }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ content.slice(searchValue.length + searchIndex) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 内容 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ content.slice(0, searchIndex) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n      <span class="token comment">&lt;!-- 高亮展示搜索结果 --&gt;</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span> #fae086</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>{{\n        content.slice(searchIndex, searchValue.length + searchIndex)\n      }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ content.slice(searchValue.length + searchIndex) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">const</span> searchIndex <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>searchValue<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchValue<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>通过上面的代码，我们可以看到在对搜索内容进行 slice 截断处理，以展示搜索结果时，概要和内容区域做了重复性工作，而且这部分代码抽离再封装组件也不实际，要是能像 React 那样组件中再定义小组件就好了。</p><p>这时候就可以利用 JSX 来优化这部分代码。</p><p>Vue 与 React 中 JSX 语法的不同：</p><ol><li>React 定义类名使用 className，而 Vue 中直接使用 class 即可；</li><li>Vue 中插槽的传递<a href="https://cn.vuejs.org/guide/extras/render-function.html#passing-slots" target="_blank" rel="noopener noreferrer">passing-slots</a>等价于 React 中的 props.children + renderProps；</li><li>...</li></ol><h5 id="使用definecomponent搭配-jsx-创建小组件"><a class="header-anchor" href="#使用definecomponent搭配-jsx-创建小组件" aria-hidden="true">#</a> 使用<a href="https://cn.vuejs.org/api/general.html#definecomponent" target="_blank" rel="noopener noreferrer">defineComponent</a>搭配 JSX 创建小组件</h5><p>defineComponent 搭配 Composition API 和渲染函数一起使用，接收 props 和 setup 上下文，返回值是一个渲染函数（<code>h()</code>或者 JSX）。</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>memo-list__content-item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 概要 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SearchContent</span> <span class="token attr-name">:searchValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>searchValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.title<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 内容 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SearchContent</span> <span class="token attr-name">:searchValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>searchValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.content<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tsx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">// 使用JSX创建组件</span>\n<span class="token keyword">const</span> SearchContent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;SearchContent&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">searchValue</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> searchValue <span class="token operator">=</span> props<span class="token punctuation">.</span>searchValue\n    <span class="token keyword">const</span> content <span class="token operator">=</span> props<span class="token punctuation">.</span>content\n    <span class="token keyword">const</span> index <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchValue<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> content\n\n    <span class="token keyword">const</span> searchIndex <span class="token operator">=</span> searchValue<span class="token punctuation">.</span>length <span class="token operator">+</span> index\n\n    <span class="token comment">// 搜索结果</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">extraContent</span> <span class="token operator">=</span> <span class="token parameter">startIndex</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n        <span class="token punctuation">{</span>startIndex <span class="token operator">?</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">&#39;background: #fae086&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> searchIndex<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>searchIndex<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>searchIndex <span class="token operator">&gt;</span> <span class="token constant">CONTENT_CUT_LENGTH</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">extraContent</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">extraContent</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h5 id="script-setup-中更简单的写法"><a class="header-anchor" href="#script-setup-中更简单的写法" aria-hidden="true">#</a> <code>&lt;script setup&gt;</code>中更简单的写法</h5><p>在<code>&lt;script setup&gt;</code>中既可以像上面提到的使用<code>defineComponent</code>来定义子组件，也可以直接像 React 中那样定义子组件，即一个函数式组件，参考官方文档<a href="https://cn.vuejs.org/guide/extras/render-function.html#functional-components" target="_blank" rel="noopener noreferrer">函数式组件</a>一章，接收 props 和上下文对象，返回 JSX 或<code>h()</code>函数。</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 概要 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RenderSearchContent</span> <span class="token attr-name">:searchValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>searchValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.title<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 内容 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RenderSearchContent</span> <span class="token attr-name">:searchValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>searchValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.content<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tsx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">// 接收 props 和 setup上下文对象</span>\n<span class="token keyword">const</span> RenderSearchContent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> content <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> searchValue <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> index <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchValue<span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> content\n\n  <span class="token keyword">const</span> searchIndex <span class="token operator">=</span> searchValue<span class="token punctuation">.</span>length <span class="token operator">+</span> index\n\n  <span class="token comment">// 搜索结果</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">extraContent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n      <span class="token punctuation">{</span>startIndex <span class="token operator">?</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">&quot;background: #fae086&quot;</span><span class="token operator">&gt;</span>\n        <span class="token punctuation">{</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> searchIndex<span class="token punctuation">)</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>searchIndex<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchIndex <span class="token operator">&gt;</span> <span class="token constant">CONTENT_CUT_LENGTH</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">extraContent</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token function">extraContent</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>这样比 defineComponent 简单，并且以函数式组件写的组件更符合我们平时的习惯，我推荐大家这样写，有宝马还要什么自行车呢。</p><h5 id="createreusabletemplate"><a class="header-anchor" href="#createreusabletemplate" aria-hidden="true">#</a> createReusableTemplate</h5><p>最近看到 antfu 大佬已经实现了在 .vue 模板中重复使用模板的钩子<a href="https://vueuse.org/core/createReusableTemplate/" target="_blank" rel="noopener noreferrer">createReusableTemplate</a>，大佬就是大佬，别人还在想的事情，他就实现了 🐮。有兴趣可以尝试尝试。</p><p><img src="/blog/_assets/createReusableTemplate-demo.cf92136a.png" alt="createReusableTemplate-demo.png"></p><p>关于 createReusableTemplate 的由来可以看这个讨论：<a href="https://github.com/vuejs/core/discussions/6898" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/core/discussions/6898</a></p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文从一个实际例子出发，讲述了如何利用 JSX 和函数式组件来优化我们的代码，了解了<code>defineComponent</code>和函数式组件在 Vue3 中的使用，可以尝试着去在项目里使用一下。但就如本文最开始提到的“在绝大多数情况下，Vue 推荐使用模板语法来创建应用”，如果有些实在觉得不好处理的再选择使用 JSX 去解决。</p><p>以上就是本文的全部内容，希望这篇文章对你有所帮助，欢迎点赞和收藏 🙏，如果发现有什么错误或者更好的解决方案及建议，欢迎随时联系。</p>',43)];p.render=function(s,t,p,e,c,l){return n(),a("div",null,o)};export{t as __pageData,p as default};
