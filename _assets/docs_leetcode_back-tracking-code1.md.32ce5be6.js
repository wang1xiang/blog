import{f as n,g as a,J as s}from"./common-03e46d7f.js";const t='{"title":"跟着卡哥学算法Day 23：回溯算法part2","frontmatter":{"date":"2025-03-06","title":"跟着卡哥学算法Day 23：回溯算法part2","tags":["leetcode"],"describe":"回溯算法part2"},"headers":[{"level":2,"title":"39. 组合总和 🌟🌟","slug":"_39-组合总和-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":3,"title":"总结","slug":"总结"},{"level":2,"title":"40.组合总和 II 🌟🌟","slug":"_40-组合总和-ii-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"代码","slug":"代码-2"},{"level":2,"title":"131.分割回文串 🌟🌟","slug":"_131-分割回文串-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":3,"title":"代码","slug":"代码-3"},{"level":3,"title":"示例演示","slug":"示例演示"}],"relativePath":"docs/leetcode/back-tracking-code1.md","lastUpdated":1743591022068.7988}';var p={};const o=[s('<h2 id="_39-组合总和-🌟🌟"><a class="header-anchor" href="#_39-组合总和-🌟🌟" aria-hidden="true">#</a> 39. 组合总和 🌟🌟</h2><p><a href="https://leetcode.cn/problems/combination-sum/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><ul><li>所有数字（包括 target）都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p>示例 1：</p><ul><li>输入：candidates = [2,3,6,7], target = 7,</li><li>所求解集为： [ [7], [2,2,3] ]</li></ul><p>示例 2：</p><ul><li>输入：candidates = [2,3,5], target = 8,</li><li>所求解集为： [ [2,2,2,2], [2,3,3], [3,5] ]</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>本题与 <a href="http://wangxiang.website/docs/leetcode/back-tracking-code.html#_77-%E7%BB%84%E5%90%88-%F0%9F%8C%9F%F0%9F%8C%9F" target="_blank" rel="noopener noreferrer">77. 组合</a> 区别是：<strong>无数量要求</strong>、<strong>可无限重复</strong>，限制总和。</p><ol><li>无限递归，直到总和大于 target，使用 result 收集。</li><li>每次递归都是整个 candidates</li></ol><h4 id="回溯法解题步骤"><a class="header-anchor" href="#回溯法解题步骤" aria-hidden="true">#</a> 回溯法解题步骤</h4><p>一维数组 path 来存放符合条件的结果，二维数组 result 来存放结果集</p><p>回溯三部曲：</p><p><strong>何时使用 startIndex？</strong></p><p>如果是一个集合求组合，就需要 startIndex；如果多个集合求组合，就不用 startIndex（各个集合相互不影响）</p><ol><li><p>回溯函数返回值以及参数</p><ul><li><p>参数 1：sum，记录 path 总和</p></li><li><p>参数 2：startIndex，用于记录当前递归 for 循环的起始位置</p><div class="language-js"><pre><code><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> startIndex<span class="token punctuation">)</span>\n</code></pre></div></li></ul></li><li><p>回溯函数终止条件</p><ul><li>sum 大于 target 时，终止</li><li>sum 等于 target 时，使用 result 收集</li></ul><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>\n  <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>单层搜索的过程</p><p>从 startIndex 开始，搜索 candidates 集合</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> candidate <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span>\n  sum <span class="token operator">+=</span> candidate\n  <span class="token comment">// 不用i+1了，表示可以重复读取当前的数</span>\n  <span class="token function">backtracking</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n  sum <span class="token operator">-=</span> candidate\n  path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> candidate <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span>\n      sum <span class="token operator">+=</span> candidate\n      <span class="token function">backtracking</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n      sum <span class="token operator">-=</span> candidate\n      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="剪枝优化"><a class="header-anchor" href="#剪枝优化" aria-hidden="true">#</a> 剪枝优化</h4><ul><li><p>未剪枝的情况</p><p>进入 backtracking 后判断 sum&gt;target 后返回，此时已经进入下一次递归。</p></li><li><p>剪枝后的情况</p><p>在 for 循环内，如果下一层 sum&gt;target 时，就可以提前结束本轮 for 循环遍历</p></li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment">// 排序</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> candidate <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      <span class="token comment">// 提前结束</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> candidate <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">break</span>\n      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span>\n      sum <span class="token operator">+=</span> candidate\n      <span class="token function">backtracking</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n      sum <span class="token operator">-=</span> candidate\n      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>剪枝操作写在<strong>回溯函数的开头</strong> 和 <strong>循环内部提前 break</strong>的区别：</p><h4 id="_1-剪枝位置对比分析"><a class="header-anchor" href="#_1-剪枝位置对比分析" aria-hidden="true">#</a> 1. 剪枝位置对比分析</h4><p>通过以下代码片段展示两种方式的差异：</p><h5 id="方式一：在循环内提前-break（更优）"><a class="header-anchor" href="#方式一：在循环内提前-break（更优）" aria-hidden="true">#</a> 方式一：在循环内提前 <code>break</code>（更优）</h5><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> path<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* 记录结果 */</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> num <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> num <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token comment">// ✅ 剪枝：后续元素更大，无需尝试</span>\n    path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n    <span class="token function">backtrack</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> path<span class="token punctuation">,</span> sum <span class="token operator">+</span> num<span class="token punctuation">)</span> <span class="token comment">// 允许重复选当前元素</span>\n    path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="方式二：在函数开头判断-sum-target"><a class="header-anchor" href="#方式二：在函数开头判断-sum-target" aria-hidden="true">#</a> 方式二：在函数开头判断 <code>sum &gt; target</code></h5><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> path<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// ❌ 剪枝：无法阻止无效递归</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* 记录结果 */</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> num <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n    <span class="token function">backtrack</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> path<span class="token punctuation">,</span> sum <span class="token operator">+</span> num<span class="token punctuation">)</span>\n    path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_2-核心差异解析"><a class="header-anchor" href="#_2-核心差异解析" aria-hidden="true">#</a> 2. 核心差异解析</h4><table><thead><tr><th>特性</th><th>循环内 <code>break</code></th><th>函数开头 <code>return</code></th></tr></thead><tbody><tr><td><strong>剪枝时机</strong></td><td>在尝试添加元素前预判</td><td>在递归进入后检测</td></tr><tr><td><strong>作用范围</strong></td><td>阻止当前及后续元素的递归</td><td>仅终止当前递归路径</td></tr><tr><td><strong>是否依赖排序</strong></td><td>需要数组有序</td><td>不依赖排序</td></tr><tr><td><strong>效率</strong></td><td>更高（提前阻断无效分支）</td><td>较低（允许进入无效递归）</td></tr></tbody></table><h4 id="_3-实例对比演示"><a class="header-anchor" href="#_3-实例对比演示" aria-hidden="true">#</a> 3. 实例对比演示</h4><p>以 <code>candidates = [2,3,6,7]</code>, <code>target = 7</code> 为例：</p><h5 id="场景：当前路径和为-sum-5，尝试添加-3"><a class="header-anchor" href="#场景：当前路径和为-sum-5，尝试添加-3" aria-hidden="true">#</a> 场景：当前路径和为 <code>sum = 5</code>，尝试添加 <code>3</code></h5><ul><li>方式一（循环内 <code>break</code>）：<br> 计算 <code>sum + 3 = 8 &gt; 7</code> → 直接 <code>break</code>，跳过 <code>3</code> 及后续更大的 <code>6,7</code>，不再递归。<strong>节省 3 次无效递归调用</strong>。</li><li>方式二（函数开头 <code>return</code>）：<br> 先添加 <code>3</code> → <code>sum = 8</code> → 进入递归后触发 <code>sum &gt; target</code> 返回。<strong>浪费了 1 次递归调用</strong>，且后续更大的元素 <code>6,7</code> 仍会被递归。</li></ul><h4 id="_4-数学原理"><a class="header-anchor" href="#_4-数学原理" aria-hidden="true">#</a> 4. 数学原理</h4><p>假设数组已排序（升序），对于任意 <code>i</code>，有 <code>candidates[i] &lt;= candidates[i+1]</code>。<br> 当 <code>sum + candidates[i] &gt; target</code> 时，对任意 <code>j &gt; i</code>，必然有：</p><div class="language-js"><pre><code>sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target\n</code></pre></div><p>因此，在循环内 <code>break</code> 可以 <strong>安全跳过所有后续元素</strong>，而函数开头的判断无法阻止进入这些无效分支。</p><h4 id="_5-性能对比数据"><a class="header-anchor" href="#_5-性能对比数据" aria-hidden="true">#</a> 5. 性能对比数据</h4><table><thead><tr><th>指标</th><th>循环内 <code>break</code></th><th>函数开头 <code>return</code></th></tr></thead><tbody><tr><td>递归调用次数</td><td>8</td><td>11</td></tr><tr><td>无效路径处理</td><td>立即终止</td><td>延迟终止</td></tr><tr><td>时间复杂度</td><td>O(2^N)</td><td>O(2^N) 但常数更大</td></tr></tbody></table><div class="language-js"><pre><code><span class="token operator">...</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 添加计数器</span>\n<span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  count<span class="token operator">++</span>  <span class="token comment">// 每次调用递归函数时计数加1</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\n\n<span class="token comment">// 生成测试数据</span>\n<span class="token keyword">function</span> <span class="token function">generateTestCase</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> candidates <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> size <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token punctuation">)</span>\n  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token number">5</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> candidates<span class="token punctuation">,</span> target <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 执行性能测试</span>\n<span class="token keyword">function</span> <span class="token function">runPerformanceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> testCases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;数据量(40个数)&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n\n  testCases<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> size<span class="token punctuation">,</span> label <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n测试</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">：</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> candidates<span class="token punctuation">,</span> target <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">generateTestCase</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">输入数组: [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>candidates<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">目标值: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;方法1耗时(判断sum&gt;target)&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token function">combinationSum1</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;方法1耗时(判断sum&gt;target)&#39;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">方法1递归调用次数: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result1<span class="token punctuation">.</span>recursionCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;方法2耗时(循环内break)&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;方法2耗时(循环内break)&#39;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">方法2递归调用次数: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result2<span class="token punctuation">.</span>recursionCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 运行测试</span>\n<span class="token function">runPerformanceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="/blog/_assets/back-tracking2.9a266864.png" alt="back-tracking2"></p><p>这里的测试用例，将 target 设置为 5，数组较大时，提前 break 耗时远远小于 函数开头的判断，递归次数也远小于函数开头的判断。</p><h4 id="_6-如何选择剪枝方式"><a class="header-anchor" href="#_6-如何选择剪枝方式" aria-hidden="true">#</a> 6. 如何选择剪枝方式</h4><ul><li>优先循环内 <code>break</code>：<br> 需先对数组排序，但能最大化剪枝效果，适合处理有序数据集（如组合总和问题）</li><li>函数开头 <code>return</code>：<br> 适用于无序数组，或无法预判路径和的情况（如子集问题），但效率较低</li></ul><h2 id="_40-组合总和-ii-🌟🌟"><a class="header-anchor" href="#_40-组合总和-ii-🌟🌟" aria-hidden="true">#</a> 40.组合总和 II 🌟🌟</h2><p><a href="https://leetcode.cn/problems/combination-sum-ii/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个数组  candidates  和一个目标数  target ，找出  candidates  中所有可以使数字和为  target  的组合。</p><p>candidates  中的每个数字在每个组合中只能使用一次。</p><p>说明：所有数字（包括目标数）都是正整数。解集不能包含重复的组合。</p><ul><li>示例  1:</li><li>输入: candidates = [10,1,2,7,6,1,5], target = 8,</li><li>所求解集为:</li></ul><div class="language-js"><pre><code><span class="token punctuation">;</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre></div><ul><li>示例  2:</li><li>输入: candidates = [2,5,2,1,2], target = 5,</li><li>所求解集为:</li></ul><div class="language-js"><pre><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n</code></pre></div><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p>本题与 <a href="#39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-">39. 组合总和</a> 区别是：<strong>不能重复</strong>、<strong>集合有重复元素</strong></p><p><strong>重点：集合重复元素进行去重操作</strong>，跳过同一层中重复的元素，避免生成重复组合</p><p>回溯三部曲：</p><ol><li><p>回溯函数返回值以及参数</p><ul><li><p>参数 1：startIndex，用于记录当前递归的起始位置</p></li><li><p>参数 2：sum，存储当前路径的和，path 内元素的总和</p><div class="language-js"><pre><code><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> sum<span class="token punctuation">)</span>\n</code></pre></div></li></ul></li><li><p>回溯函数终止条件</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>\n  <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>单层搜索的过程</p><p>这里需要进行去重操作，判断同一层相同的元素是否已经使用过。</p><ul><li>需要对数组排序</li><li>判断 <code>candidates[i] === candidates[i - 1]</code>，则说明已经使用过，continue</li></ul><div class="language-js"><pre><code>\n</code></pre></div></li></ol><h3 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><ul><li><strong>去重条件</strong>：确保在同一层递归中检测重复元素，<code>i &gt; start 在同一层级中尝试选择后续元素</code>，<code>candidates[i] === candidates[i-1] 检测重复元素</code></li><li><strong>剪枝操作</strong>：若当前路径和加上候选元素超过目标，终止后续递归</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">combinationSum2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">backtracing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">startIndex<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> startIndex <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> candidates<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>\n\n      <span class="token keyword">const</span> num <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      sum <span class="token operator">+=</span> num\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">break</span>\n      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n      <span class="token function">backtracing</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span>\n      sum <span class="token operator">-=</span> num\n      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">backtracing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_131-分割回文串-🌟🌟"><a class="header-anchor" href="#_131-分割回文串-🌟🌟" aria-hidden="true">#</a> 131.分割回文串 🌟🌟</h2><p><a href="https://leetcode.cn/problems/palindrome-partitioning/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</p><p>返回 s 所有可能的分割方案。</p><p>示例: 输入: &quot;aab&quot; 输出: [ [&quot;aa&quot;,&quot;b&quot;], [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;] ]</p><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><p><strong>切割问题类似组合问题</strong></p><ul><li>组合问题：选取一个 a 之后，在 ab 中再去选取第二个，选取 a 之后在 b 中选取第三个...</li><li>切割问题：切割一个 a 之后，在 ab 中再去切割第二个，切割 a 之后在 b 中切割第三个...</li></ul><p><img src="/blog/_assets/back-tracking3.92c20d18.png" alt="back-tracking3"></p><p>回溯三部曲：</p><ol><li><p>回溯函数返回值以及参数</p><ul><li>参数 1：startIndex 表示切割的位置（<strong>不能重复切割，所以需要</strong>）</li></ul></li><li><p>回溯函数终止条件</p><p>当切割线切到字符串最后面，说明找到了一种切割方法，此时就是本层递归的终止条件</p><p>在处理组合问题的时候，递归参数需要传入 startIndex，表示下一轮递归遍历的起始位置，这个 startIndex 就是切割线</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 分割到末尾</span>\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>单层搜索的过程</p><p>for 循环中从 startIndex 到 i 就是要截取的子串，判断子串是否为回文，如果是，则加入到 path 中，不是则跳过</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> end <span class="token operator">=</span> start<span class="token punctuation">;</span> end <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当前子串是回文</span>\n    path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 记录回文子串</span>\n    <span class="token function">backtracking</span><span class="token punctuation">(</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 递归处理剩余部分</span>\n    path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 回溯</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h3 id="代码-3"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">partition</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length\n\n  <span class="token comment">// 判断子串 s[left..right] 是否为回文</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n      left<span class="token operator">++</span>\n      right<span class="token operator">--</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 分割到末尾</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> end <span class="token operator">=</span> start<span class="token punctuation">;</span> end <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前子串是回文</span>\n        path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 记录回文子串</span>\n        <span class="token function">backtracking</span><span class="token punctuation">(</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 递归处理剩余部分</span>\n        path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 回溯</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="示例演示"><a class="header-anchor" href="#示例演示" aria-hidden="true">#</a> 示例演示</h3><p>输入 <code>s = &quot;aab&quot;</code> 的执行流程：</p><p>复制</p><div class="language-text"><pre><code>回溯树：\nstart=0\n├─ end=0 (&quot;a&quot;) → 有效\n│  ├─ start=1\n│  │  ├─ end=1 (&quot;a&quot;) → 有效\n│  │  │  └─ start=2 (&quot;b&quot;) → 记录 [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\n│  │  └─ end=2 (&quot;ab&quot;) → 非回文，跳过\n│  └─ ...其他分支\n├─ end=1 (&quot;aa&quot;) → 有效\n│  └─ start=2 (&quot;b&quot;) → 记录 [&quot;aa&quot;,&quot;b&quot;]\n└─ end=2 (&quot;aab&quot;) → 非回文，跳过\n输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;], [&quot;aa&quot;,&quot;b&quot;]]\n</code></pre></div>',86)];p.render=function(s,t,p,e,c,u){return n(),a("div",null,o)};export{t as __pageData,p as default};
