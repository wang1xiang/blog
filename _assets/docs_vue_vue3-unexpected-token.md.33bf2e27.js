import{f as n,g as s,J as e}from"./common-03e46d7f.js";const t='{"title":"深入学习ESLint配置项，ESLint忽略检查","frontmatter":{"date":"2023-05-05","title":"深入学习ESLint配置项，ESLint忽略检查","tags":["javascript"],"describe":"ESLint配置项"},"headers":[{"level":2,"title":"问题 Parsing error: Unexpected token type","slug":"问题-parsing-error-unexpected-token-type"},{"level":2,"title":"解决方法","slug":"解决方法"},{"level":2,"title":"ESLint","slug":"eslint"},{"level":3,"title":"初始化项目","slug":"初始化项目"},{"level":3,"title":"VSCode ESLint 插件","slug":"vscode-eslint-插件"},{"level":3,"title":"ESLint 文件格式","slug":"eslint-文件格式"},{"level":3,"title":"配置项详解","slug":"配置项详解"},{"level":2,"title":"如何规避 ESLint 检查","slug":"如何规避-eslint-检查"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"docs/vue/vue3-unexpected-token.md","lastUpdated":1742290670959.4746}';var a={};const p=[e('<h2 id="问题-parsing-error-unexpected-token-type"><a class="header-anchor" href="#问题-parsing-error-unexpected-token-type" aria-hidden="true">#</a> 问题 Parsing error: Unexpected token type</h2><p><img src="/blog/_assets/unexpected-token.3415eb22.png" alt="unexpected token"></p><h2 id="解决方法"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h2><p>通过万能的百度，很快就找到了解决问题的方法，只需要在 parserOptions.parser 中配置<code>@typescript-eslint/parser</code>即可</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports<span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;vue-eslint-parser&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&#39;2021&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@typescript-eslint/parser&#39;</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>看一下<a href="https://eslint.vuejs.org/user-guide/#how-to-use-a-custom-parser" target="_blank" rel="noopener noreferrer">官方解释</a></p><p>如果想自定义解析器，那么必须使用 parserOptions.parser 选项，而不是直接修改 parser 选项，原因是 eslint 需要 vue-eslint-parser 来解析 .vue 单文件组件，所以如果覆盖 parser 选项，vue-eslint-parser 插件就不会生效了。</p><p>很顺利，代码不报错了，问题解决了，相信大部分人到这里就停了（也包括我哈）。</p><p><strong>但是问题虽然解决了，eslint 的那些配置项你都懂吗？就没有兴趣深入了解一下吗？</strong></p><p>跟着我的步骤一起来深度探讨下 ESLint 吧！</p><h2 id="eslint"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h2><p>不知道有多少人认真读过<a href="https://eslint.bootcss.com/docs/user-guide/configuring" target="_blank" rel="noopener noreferrer">ESLint 官网</a>，反正我到今天前连打开都没打开过 🤦。为啥呢？因为大多数脚手架在搭建时都配置好了，我们只需要用就行，就算有问题了也可以直接在百度找到答案。所以，读什么文档，没必要啊。</p><p><img src="/blog/_assets/duwendang.177a3dd2.png" alt="duwendang.png"></p><p>确实，像 react、vue 这些框架或 ant-design、element 这些 UI 库，因为我们要靠这些来&quot;造火箭&quot;，所以基本都会看一遍文档，或者是有问题就会去翻文档；但 eslint 这种基本都是能用就行，用不着理解。</p><p>下面我会把我读完后觉得有用的知识点总结出来，提供给大家学习，各位小伙伴动动你的小手指给个赞吧 👍。</p><h3 id="初始化项目"><a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a> 初始化项目</h3><p>我们用 vite 来创建一个 vue3+ts 项目，完了之后安装 eslint</p><div class="language-bash"><pre><code><span class="token comment"># npm</span>\n<span class="token function">npm</span> <span class="token function">install</span> eslint --save-dev\n<span class="token comment"># yarn</span>\n<span class="token function">yarn</span> <span class="token function">add</span> eslint\n<span class="token comment"># 安装完成后执行</span>\nnpx eslint --init\n</code></pre></div><p><img src="/blog/_assets/pnpmInstallEslint.609b1d1c.png" alt="pnpmInstallEslint.png"> 通过执行<code>eslint init</code>初始化 eslint 配置，通过选择配置项的形式会提示安装相应的 eslint 插件，最终完成后生成<code>.eslintrc.cjs</code>文件。</p><p>接着执行 <code>npx eslint .</code>校验当前路径所有文件中的问题 或 <code>npx eslint . --fix</code> 校验并修复当前目录下所有文件中的问题。</p><p>为了方便，我们可以在 package.json 的<code>scripts</code>添加一个脚本：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    ...\n    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint . --ext .vue,.js,.ts,.jsx,.tsx --fix&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>接着咱们来执行下 lint 操作<code>pnpm lint</code>，发现报错如下：</p><p><img src="/blog/_assets/vue3-eslint-error.bd591b39.png" alt="vue3-eslint-error.png"></p><p><strong>为什么呢？</strong></p><p>因为 eslint 默认不会解析.vue 单文件组件，所以需要额外的解析器<code>vue-eslint-parser</code>来解析单文件组件。修改.eslintrc.cjs 文件，将 parser 改为<code>vue-eslint-parser</code>，同时在 parserOptions 中添加字段<code>parser</code>设置为<code>&#39;@typescript-eslint/parser&#39;</code>，后面再做详细解释，我们先来执行下 lint 操作，看看效果如何。</p><p><img src="/blog/_assets/vue3-eslint-error1.ebba27d0.png" alt="vue3-eslint-error1.png"></p><p>可以看到，已经能正常的显示出 vue 单文件组件的报错了。</p><h3 id="vscode-eslint-插件"><a class="header-anchor" href="#vscode-eslint-插件" aria-hidden="true">#</a> VSCode ESLint 插件</h3><p>也许很多人会纳闷，我都已经装了 ESLint npm 包，为什么还要安装 ESLint VSCode 插件呢？</p><p>我们可以尝试先把 VSCode 插件禁用掉，执行 lint 操作如下，然后再开启 VSCode 插件，对比如下： <img src="/blog/_assets/vscode-eslint-plugin.14085b3b.png" alt="vscode-eslint-plugin.png"></p><p>通过对比可以看出来，这俩都是用来检验代码的格式，VSCode 的插件的作用是当出现 ESLint 问题时，在编辑器中实时显示错误。这样在我们开发的过程中就可以看到错误，并解决掉；而不是等到提交时再通过手动执行<code>npx eslint .</code>才发现错误。</p><p><strong>那是不是有了 VSCode 插件，就可以不需要 npm 的包了？</strong></p><p>当然不是，毕竟项目代码是团队合作，如果有些人本地不装 ESLint 插件，或者故意禁用掉 🤮，那么如果没有 ESLint 的约束，就不能保证项目内统一的代码规范和编码风格。所以一般会在提交前进行 ESLint 的校验，参考我的这篇文章<a href="https://juejin.cn/post/7215454235046445112" target="_blank" rel="noopener noreferrer">vue3 项目添加 husky+lint-staged 配置</a>。</p><p>当然也可以在 VSCode 的配置中，开启 ESLint “保存时自动修复”的功能：</p><div class="language-json"><pre><code><span class="token property">&quot;editor.codeActionsOnSave&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;source.fixAll.eslint&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="eslint-文件格式"><a class="header-anchor" href="#eslint-文件格式" aria-hidden="true">#</a> ESLint 文件格式</h3><p>ESLint 支持几种格式的配置文件：</p><ul><li>JavaScript - 使用 .eslintrc.js 然后输出一个配置对象。</li><li>YAML - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。</li><li>JSON - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSåON 文件允许 JavaScript 风格的注释。</li><li>(弃用) - 使用 .eslintrc，可以是 JSON 也可以是 YAML。</li><li>package.json - 在 package.json 里创建一个 eslintConfig 属性，在那里定义你的配置。</li></ul><p>它们的优先级顺序如下：<code>.eslintrc.js &gt; .eslintrc.yaml &gt; .eslintrc.yml &gt; .eslintrc.json &gt; .eslintrc &gt; package.json</code></p><h3 id="配置项详解"><a class="header-anchor" href="#配置项详解" aria-hidden="true">#</a> 配置项详解</h3><p>通过第一步，我们初始化 eslint 后得到的配置文件如下：</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;plugin:vue/vue3-essential&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;vue-eslint-parser&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&#39;latest&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@typescript-eslint/parser&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@typescript-eslint&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>下面我们一一过下这些个配置。</p><ul><li><p>root</p><p>上面配置中没有这个规则，这里稍微提一嘴。root 一般在 monorepo 项目中会比较常见，首先我们知道 ESLint 在当前目录下查找上面的几种配置文件，如果找不到的话就会在父级目录找，一直到文件系统的根目录，而如果 ESLint 配置文件中有 &quot;root&quot;: true，就会停止在父级目录中寻找。</p></li><li><p>env</p><p>env 是<code>Environments</code>的简写，用来指定代码在哪种环境中运行。 每个环境都有特定的预定义全局变量，比如上面的<code>env: { browser: true }</code>表示启用 ES12 的全局变量和类型，搭配<code>parserOptions: { ecmaVersion: &#39;latest&#39; }</code>启用 ES12 的语法，这样配置 ESLint 就会支持最新的 ES 语法，ESLint 会自动校验语法上的错误。</p><p>并且这些环境不是互斥的，可以定义多个环境，如上面的配置同时还启用了 browser 浏览器环境和 Node.js 的环境，所以 env 字段其实就是设置全局变量（多个环境）。</p></li><li><p>extends &amp; plugins</p><p>这俩放一起看，先看 extends 的属性值设置，有以下几种：</p><ol><li><p>字符串 eslint:recommended 或 eslint:all</p><p>ESLint 默认实现的两种最佳实践，当配置为 eslint:recommended 表示开启 ESLint<a href="https://eslint.bootcss.com/docs/rules/" target="_blank" rel="noopener noreferrer">推荐的规则</a>；而 eslint:all 代表开启所有的规则（官方不推荐此规则）</p></li><li><p>字符串 standard/airbnb...</p><p>这类规则称为<a href="https://eslint.bootcss.com/docs/developer-guide/shareable-configs" target="_blank" rel="noopener noreferrer">可共享的配置</a>，是一个 npm 包。</p><p>这种 ESLint 配置都是继承社区整理好的配置规则，比如流行的风格指南<a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb" target="_blank" rel="noopener noreferrer">eslint-config-airbnb</a>和<a href="https://github.com/standard/eslint-config-standard" target="_blank" rel="noopener noreferrer">eslint-config-standard</a>。</p><p>写的时候可以可以省略包名的前缀 eslint-config-，直接<code>extends: &#39;airbnb&#39;</code>即可。</p></li><li><p>字符串 plugin:xxx</p><p>这类规则需要搭配<a href="https://eslint.bootcss.com/docs/developer-guide/working-with-plugins" target="_blank" rel="noopener noreferrer">plugins</a>字段使用，插件可以是一个命名格式为 <code>eslint-plugin-&lt;plugin-name&gt;</code> 的 npm 模块，或者包作用域下，格式为<code>@&lt;scope&gt;/eslint-plugin-&lt;plugin-name&gt;</code>。比如上面配置中我们添加了<code>[&#39;vue&#39;, &#39;@typescript-eslint&#39;]</code>这两个就是我们通过 npm 安装的 eslint-plugin-vue 和@typescript-eslint/eslint-plugin 这两个 ESLint 插件。</p><blockquote><p>eslint-plugin-vue 会对 vue 项目做了一些定制的 eslint 规则，@typescript-eslint/eslint-plugin 会对 ts 项目做一些定制的 eslint 规则。</p></blockquote><p>然后需要在 extends 中配置<code>&#39;plugin:vue/vue3-essential&#39;, &#39;plugin:@typescript-eslint/recommended&#39;</code>来启用这些插件，这些插件默认和 ESLint 一样会默认实现了两种最佳实践 all 和 recommened，vue 中实现了 vue3-essential 的规则集，可以直接使用它配置好的规则集。</p><p>书写的规则是 plugin:包名 (省略了前缀，比如 vue)/配置名称 (比如 vue3-essential)</p></li><li><p>字符串数组</p><p>组合前面三种写法，后面的配置继承它前面的配置。</p></li></ol></li><li><p>overrides</p><p>ESLint 配置中的规则默认是对全局生效，如果想要针对特定文件覆盖一些规则，就可以使用 overrides 属性。</p><div class="language-js"><pre><code><span class="token comment">// 关闭覆盖测试文件no-unused-expressions校验</span>\n<span class="token string-property property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*-test.js&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*.spec.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">&quot;no-unused-expressions&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div></li><li><p>parser &amp; parserOptions</p><p>ESLint 默认使用<a href="https://github.com/eslint/espree" target="_blank" rel="noopener noreferrer">Espree</a>作为其解析器，它是兼容 Esprima 的 JavaScript 解析器，同时兼容以下三种解析器：</p><ul><li><a href="https://esprima.org/" target="_blank" rel="noopener noreferrer">esprima</a>：ESLint 早期的默认解析器；</li><li><a href="https://www.npmjs.com/package/@babel/eslint-parser" target="_blank" rel="noopener noreferrer">@babel/eslint-parser</a>：babel 解析器，使得 ES6 及更高级的语法能够与 ESLint 兼容；</li><li><a href="https://www.npmjs.com/package/@typescript-eslint/parser" target="_blank" rel="noopener noreferrer">@typescript-eslint/parser</a>：TS 解析器，将 TypeScript 转换成与 espree 兼容的格式，使得 TS 语法能够使用 ESLint 校验，比如上面我们为 vue3+ts 项目配置 ESLint 的时候，默认的解析器就是@typescript-eslint/parser。</li></ul><p><strong>那么 parseOptions 解析器选项又是什么东西呢？</strong></p><p>如果仅从名字来看，可以知道 parseOptions 是对 parse 的补充扩展，官方的解释是：<code>在使用自定义解析器时，为了让 ESLint 在处理非 ECMAScript 5 特性时正常工作，配置属性 parserOptions 仍然是必须的</code>。我们可以看下它里面的几个特殊配置：</p><ul><li>ecmaVersion：代表 ECMAScript 版本，可以是数字 6，7.. 或 latest 代表最新的 ECMAScript 版本；</li><li>sourceType：默认 script，如果是 ECMAScript 模块时设置为 module；</li><li>ecmaFeatures：对象，表示额外的语言特性，包含<code>globalReturn</code>、<code>jsx</code>、<code>impliedStrict</code>、<code>experimentalObjectRestSpread</code>几个选项，一般情况下不需要配置。</li></ul><p>除了以上三个配置，还有一个比较重要的配置<code>parser</code>，乍眼一看，咦！这不是上面的解析器 parser 一样吗？</p><p>其实我一开始也不知道，然后在解决最开始的那个问题的时候，看了下<a href="https://eslint.vuejs.org/user-guide/#what-is-the-use-the-latest-vue-eslint-parser-error" target="_blank" rel="noopener noreferrer">eslint-plugin-vue 官方的解决</a>，如果需要配置@typescript-eslint/parser 解析器时，需要将它移到<code>parseOptions.parser</code>上，这样就不会与 vue-eslint-parser 冲突。因为 ESLint 默认不会解析.vue 单文件组件，需要额外的解析器 vue-eslint-parser 来解析 .vue 单文件组件，如果使用@typescript-eslint/parser 覆盖 parser 时，eslint-plugin-vue 将不会生效，ESLint 也就不会校验.vue 单文件组件了。</p><p>两个 parser 的区别在于，<code>parser</code>配置<code>vue-eslint-parser</code>解析器用来处理 .vue，使得 eslint 能解析.vue 单文件组件，尤其是<code>&lt;template&gt;</code>标记，而 <code>parserOptions.parser</code>，即@typescript-eslint/parser 用来解析单文件组件中<code>&lt;script&gt;</code>标签中的代码。</p></li><li><p>rules</p><p>ESLint 官方推荐继承<code>eslint:recommended</code>来开启<a href="https://eslint.bootcss.com/docs/rules/" target="_blank" rel="noopener noreferrer">推荐的规则</a>，包含大量规则，而如果我们需要开启或关闭某些规则时，就需要通过 rules 配置。如果需要修改时，只需要将<code>规则名:规则ID</code>添加到 rules 配置中，规则 ID 可以配置为以下三种：</p><ul><li>off 或 0 - 关闭规则；</li><li>warn 或 1 - 开启规则，当遇到此错误时不会报错，也不会导致程序退出；</li><li>error 或 2 - 开启规则，当遇到此错误时报错，并且程序会退出。</li></ul><p>比如默认规则如果在 ts 中使用<code>@ts-ignore</code>不校验 ts 代码时，代码是会报错的 <img src="/blog/_assets/ts-ignore-error.7bff2a8a.png" alt="ts-ignore-error.png"> 这时候就可以配置<code>&#39;@typescript-eslint/ban-ts-comment&#39;: &#39;off&#39;</code>关闭这个规则；</p><p>有些规则如<code>&quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;]</code>还可以有自己的属性进行配置。</p><p>并且需要注意的是，<strong>rules 中配置的规则的权重是最大的，会覆盖掉 extends 和 plugins 中引入的配置项获插件，即我们可以通过 rules 来自定义规则，而不是完全按照官方配置中的来。</strong></p></li><li><p>globals</p><p>如果在项目中使用一个未定义的全局变量时，就会造成<code>no-undef</code>规则报错，解决它的方式就是将全局变量添加到<code>globals</code>配置中，这样再使用时就不会产生错误。</p></li></ul><h2 id="如何规避-eslint-检查"><a class="header-anchor" href="#如何规避-eslint-检查" aria-hidden="true">#</a> 如何规避 ESLint 检查</h2><ul><li><p>配置.eslintignore</p><p>根目录下创建.eslintignore 文件用于对特定文件忽略 ESLint 校验，类似于.gitignore。</p><div class="language-txt"><pre><code>/test\n/dist\n/node_modules\n/public\n</code></pre></div></li><li><p>单行代码注释</p><p><code>eslint-disable-line</code>在当前行禁用 ESLint 校验，<code>eslint-disable-next-line</code>禁用下行代码的 ESLint 校验。</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// eslint-disable-line</span>\n<span class="token comment">// console.log(a);  // eslint-disable-line no-console, no-undef</span>\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token comment">// eslint-disable-next-line</span>\na<span class="token punctuation">.</span>b\n</code></pre></div></li><li><p>多行代码注释</p><p>单独使用<code>/* eslint-disable */</code>（关闭从当前注释开启的所有行的 ESLint 校验）或搭配<code>/* eslint-enable */</code>（到此行注释前的所有行的 ESLint 校验），如下面代码所示：如果去掉<code>/* eslint-enable */</code>时<code>a.b</code>就不不会出现 ESLint 报错提示，在<code>a.b</code>上一行加上后，就只对<code>/* eslint-disable */</code>和<code>/* eslint-enable */</code>之间的代码有效，ESLint 就不再校验两个注释之间的代码问题。</p><div class="language-js"><pre><code><span class="token comment">/* eslint-disable */</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token comment">/* eslint-enable */</span>\na<span class="token punctuation">.</span>b\n</code></pre></div><p>也可以设置<code>/* eslint-disable no-undef */</code>来禁用特定规则。</p></li></ul><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>当然，我们不能保证每个人都启用 ESLint 插件，所以一般会在提交前利用<code>git hooks</code>来对提交到仓库的代码统一进行 ESLint 校验，请参考我的这篇文章<a href="https://juejin.cn/post/7215454235046445112" target="_blank" rel="noopener noreferrer">vue3 项目添加 husky+lint-staged 配置</a>。</p><p>此文从一个很常见的问题引出一系列问题，遇到问题解决了就完事，并不清楚原因，暴露出的问题就是对概念不清晰、只会用而没有理解原理。希望各位小伙伴们在读文本文之后，能养成一个好习惯：不仅仅只关注问题的表面，要深入挖掘，总会有你不懂的点，弄懂了不就学到了嘛！</p><p>以上就是本文的全部内容，希望这篇文章对你有所帮助，欢迎点赞和收藏 🙏，如果发现有什么错误或者更好的解决方案及建议，欢迎随时联系。</p>',51)];a.render=function(e,t,a,o,r,l){return n(),s("div",null,p)};export{t as __pageData,a as default};
