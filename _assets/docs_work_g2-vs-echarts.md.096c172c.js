import{f as a,g as t,J as e}from"./common-03e46d7f.js";const r='{"title":"图表库选型——G2 vs ECharts 🔥","frontmatter":{"date":"2024-07-08","title":"图表库选型——G2 vs ECharts 🔥","tags":["work"],"describe":"图表库选型——G2 vs ECharts 🔥"},"headers":[{"level":2,"title":"G2","slug":"g2"},{"level":3,"title":"G2Plot","slug":"g2plot"},{"level":3,"title":"Ant Design Charts","slug":"ant-design-charts"},{"level":2,"title":"ECharts","slug":"echarts"},{"level":2,"title":"对比","slug":"对比"},{"level":3,"title":"Github star 数","slug":"github-star-数"},{"level":3,"title":"功能点","slug":"功能点"},{"level":3,"title":"易用性","slug":"易用性"},{"level":2,"title":"最终选择 ECharts","slug":"最终选择-echarts"}],"relativePath":"docs/work/g2-vs-echarts.md","lastUpdated":1742973717519.3687}';var h={};const s=[e('<h2 id="g2"><a class="header-anchor" href="#g2" aria-hidden="true">#</a> G2</h2><p><a href="https://g2.antv.antgroup.com/" target="_blank" rel="noopener noreferrer">G2</a> 作为底层依赖，使用了图形语法，上手成本相对较高，功能强大</p><h3 id="g2plot"><a class="header-anchor" href="#g2plot" aria-hidden="true">#</a> G2Plot</h3><p><a href="https://g2plot.antv.antgroup.com/" target="_blank" rel="noopener noreferrer">G2Plot</a> 是在 G2 基础上，屏蔽复杂概念的前提下，保留 G2 强大图形能力，通过 Adaptor 将 G2 能力转换成 config 的形势透出，封装出业务上常用的统计图表库，开箱即用、易于配置。</p><p>如果是在项目中使用，推荐使用 G2Plot，而不是直接使用 G2。</p><h3 id="ant-design-charts"><a class="header-anchor" href="#ant-design-charts" aria-hidden="true">#</a> Ant Design Charts</h3><p><a href="https://ant-design-charts.antgroup.com/" target="_blank" rel="noopener noreferrer">Ant Design Charts</a> 基于 G2Plot，弥补 Ant Design 组件库在统计图表上的缺失，作为 Ant Design 的官方图表组件解决方案。G2Plot 的 React 版本，基于 React 封装了 G2Plot，React 项目使用最佳。</p><p>网友评论：全是 kpi 项目，不好用 😅</p><h2 id="echarts"><a class="header-anchor" href="#echarts" aria-hidden="true">#</a> ECharts</h2><p>ECharts 简单好用、文档比较丰富，尤其 ECharts 的配置非常清晰，默认颜色虽然丑，但它是可以改颜色的。</p><h2 id="对比"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h2><p>因为是在 Vue 项目中使用，重点对比 G2Plot 和 ECharts。</p><h3 id="github-star-数"><a class="header-anchor" href="#github-star-数" aria-hidden="true">#</a> Github star 数</h3><ul><li>G2Plot: 2.5k</li><li>ECharts: 59.4k</li></ul><p>通过 star 数来看，ECharts 碾压 G2Plot，我们知道 star 数体现了项目的受欢迎程度，通常来说，一个高星数的项目可能在功能、文档、稳定性等方面做得比较好，能够满足较多用户的需求。并且 star 数也体现了社区活跃度，高 star 代表这高的社区活跃度。</p><p>单从这方面来看，ECharts 显然是更好的选择。</p><h3 id="功能点"><a class="header-anchor" href="#功能点" aria-hidden="true">#</a> 功能点</h3><p>G2Plot 和 ECharts 的图表种类都很丰富，支持多种类型的图表，包括折线图、柱状图、饼图、散点图等，ECharts 还支持地图和 3D 图表。</p><h3 id="易用性"><a class="header-anchor" href="#易用性" aria-hidden="true">#</a> 易用性</h3><p>G2Plot 和 ECharts 都提供了大量的图表实例，方便开发者参考和学习，但大多数网友认为 G2 的文档比较乱，没有 ECharts 的清晰。</p><p>ECharts 拥有非常详细和灵活的配置项，很方便的对各个方面进行定制，如样式、动画、交互、数据处理等，通过配置和编程实现高度自定义的图表效果。</p><h2 id="最终选择-echarts"><a class="header-anchor" href="#最终选择-echarts" aria-hidden="true">#</a> 最终选择 ECharts</h2><p>ECharts 支持<a href="https://echarts.apache.org/handbook/zh/basics/import" target="_blank" rel="noopener noreferrer">按需加载</a></p>',23)];h.render=function(e,r,h,l,n,i){return a(),t("div",null,s)};export{r as __pageData,h as default};
