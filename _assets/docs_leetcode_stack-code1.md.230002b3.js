import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"跟着卡哥学算法Day 11：栈与队列中等题目","frontmatter":{"date":"2025-02-22","title":"跟着卡哥学算法Day 11：栈与队列中等题目","tags":["leetcode"],"describe":"栈与队列中等题目"},"headers":[{"level":2,"title":"150. 逆波兰表达式求值 🌟🌟","slug":"_150-逆波兰表达式求值-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"什么是逆波兰表达式","slug":"什么是逆波兰表达式"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"239. 滑动窗口最大值 🌟🌟🌟","slug":"_239-滑动窗口最大值-🌟🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"代码","slug":"代码-2"},{"level":2,"title":"347.前 K 个高频元素 🌟🌟","slug":"_347-前-k-个高频元素-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":3,"title":"代码","slug":"代码-3"}],"relativePath":"docs/leetcode/stack-code1.md","lastUpdated":1742176683514.0305}';var p={};const o=[a('<h2 id="_150-逆波兰表达式求值-🌟🌟"><a class="header-anchor" href="#_150-逆波兰表达式求值-🌟🌟" aria-hidden="true">#</a> 150. 逆波兰表达式求值 🌟🌟</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>根据 逆波兰表示法，求表达式的值。</p><p>有效的运算符包括  + ,  - ,  * ,  / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>说明：</p><p>整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</p><p>示例  1：</p><ul><li>输入: [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot; * &quot;]</li><li>输出: 9</li><li>解释: 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</li></ul><p>示例  2：</p><ul><li>输入: [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]</li><li>输出: 6</li><li>解释: 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</li></ul><p>示例  3：</p><ul><li><p>输入: [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot; * &quot;, &quot;/&quot;, &quot; * &quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]</p></li><li><p>输出: 22</p></li><li><p>解释:该算式转化为常见的中缀算术表达式为：</p><div class="language-text"><pre><code>((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</code></pre></div></li></ul><h3 id="什么是逆波兰表达式"><a class="header-anchor" href="#什么是逆波兰表达式" aria-hidden="true">#</a> 什么是逆波兰表达式</h3><p><strong>逆波兰表达式：是一种后缀表达式，所谓后缀就是指运算符写在后面。</strong></p><p>平常使用的算式则是一种中缀表达式，如 <code>( 1 + 2 ) * ( 3 + 4 )</code></p><p>该算式的逆波兰表达式写法为 <code>1 2 + 3 4 + *</code>，相当于<strong>二叉树的后序遍历</strong>，即运算符为中间节点，数字为叶子结点</p><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，上式即便写成 <code>1 2 + 3 4 + *</code> 也可以依据次序计算出正确结果。</li><li>适合用栈操作运算：遇到数字则入栈；遇到运算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li></ul><p><strong>后缀表达式对计算机来说非常友好</strong>，如中缀表达式 <code>4 + 13 / 5</code>，如果计算机从左往右扫描进行计算，当到 13 时还需要考虑后面的符号优先级；而如果转为后缀表达式 <code>4 13 5 / +</code>，则只需要利用栈顺序计算即可。</p><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><ul><li>遇到数字，则入栈</li><li>遇到运算符，则取出栈顶两个数字进行计算，并将结果压入栈中</li><li>最终栈中剩一个元素，就是结果</li></ul><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string[]} tokens\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">evalRPN</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> num1 <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> num2 <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string">&#39;+&#39;</span><span class="token operator">:</span>\n          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">+</span> num1<span class="token punctuation">)</span>\n          <span class="token keyword">break</span>\n        <span class="token keyword">case</span> <span class="token string">&#39;-&#39;</span><span class="token operator">:</span>\n          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">-</span> num1<span class="token punctuation">)</span>\n          <span class="token keyword">break</span>\n        <span class="token keyword">case</span> <span class="token string">&#39;*&#39;</span><span class="token operator">:</span>\n          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">*</span> num1<span class="token punctuation">)</span>\n          <span class="token keyword">break</span>\n        <span class="token keyword">case</span> <span class="token string">&#39;/&#39;</span><span class="token operator">:</span>\n          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num2 <span class="token operator">/</span> num1<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span>\n          <span class="token keyword">break</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_239-滑动窗口最大值-🌟🌟🌟"><a class="header-anchor" href="#_239-滑动窗口最大值-🌟🌟🌟" aria-hidden="true">#</a> 239. 滑动窗口最大值 🌟🌟🌟</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回滑动窗口中的最大值。</p><div class="language-text"><pre><code>示例 1：\n\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                  最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n示例 2：\n输入：nums = [1], k = 1\n输出：[1]\n</code></pre></div><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><h4 id="暴力解法"><a class="header-anchor" href="#暴力解法" aria-hidden="true">#</a> 暴力解法</h4><ol><li>滑动次数：滑动 <code>n - k + 1</code> 次</li><li>求最大值：滑动窗口内，每次遍历 k 个元素，求最大值</li><li>时间复杂度：O(n * k)</li></ol><h4 id="使用单调队列-维护窗口内最大值"><a class="header-anchor" href="#使用单调队列-维护窗口内最大值" aria-hidden="true">#</a> 使用单调队列 维护窗口内最大值</h4><p><strong>单调队列：维护元素单调递减或单调递增的序列</strong></p><ol><li><p>队列内不需要维护所有元素，只需要按递减顺序记录有可能成为最大值的元素</p><div class="language-text"><pre><code>如：[2, 3, 5, 1, 4]\n\n只需要维护 [5, 4]\n</code></pre></div></li><li><p>窗口移动时，新元素添加进队列，<strong>队列需要弹出元素，如何弹出队列？（不一定是最大值，即不一定是队首元素）</strong></p><ul><li>push 操作：如果 push 进的元素大于队列首元素，则队列全部弹出，只需要 push 进新元素即可</li><li>pop：</li></ul></li><li><p>每次窗口移动时，只需要获取队首元素就是最大值</p></li></ol><h3 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">maxSlidingWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">class</span> <span class="token class-name">MonoQueue</span> <span class="token punctuation">{</span>\n    queue\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> back <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>back <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> back <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        back <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> front <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>front <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> helperQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MonoQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    j <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> resArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    helperQueue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  resArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>helperQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    helperQueue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    helperQueue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    resArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>helperQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> resArr\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_347-前-k-个高频元素-🌟🌟"><a class="header-anchor" href="#_347-前-k-个高频元素-🌟🌟" aria-hidden="true">#</a> 347.前 K 个高频元素 🌟🌟</h2><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p><p>示例 1:</p><ul><li>输入: nums = [1,1,1,2,2,3], k = 2</li><li>输出: [1,2]</li></ul><p>示例 2:</p><ul><li>输入: nums = [1], k = 1</li><li>输出: [1]</li></ul><p>提示：</p><ul><li>你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。</li><li>你的算法的时间复杂度必须优于 $O(n \\log n)$ , n 是数组的大小。</li><li>题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。</li><li>你可以按任意顺序返回答案。</li></ul><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><h3 id="代码-3"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3>',50)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
