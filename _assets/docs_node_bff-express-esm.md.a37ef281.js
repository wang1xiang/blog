import{f as s,g as e,J as n}from"./common-03e46d7f.js";const a='{"title":"Express中使用ESM","frontmatter":{"date":"2024-03-22","title":"Express中使用ESM","tags":["node"],"describe":"Express中使用ESM"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"指定 package.json type","slug":"指定-package-json-type"},{"level":2,"title":"使用 esm 包","slug":"使用-esm-包"},{"level":3,"title":"步骤","slug":"步骤"}],"relativePath":"docs/node/bff-express-esm.md","lastUpdated":1743558905536.944}';var o={};const p=[n('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>众所周知，nodeJs 使用的 CommonJS 规范，不能直接使用 ESM 模块的，那就需要使用 <code>module.export</code> 导出模块，并使用 <code>require</code> 导入模块，这对于习惯了使用 ES <code>import</code>、<code>export</code>的前端来说，算是有些不友好了，那么如何可以在 nodeJs 中使用 ES 模块的开发方式呢？</p><h2 id="指定-package-json-type"><a class="header-anchor" href="#指定-package-json-type" aria-hidden="true">#</a> 指定 package.json type</h2><div class="language-json"><pre><code><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n<span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/index.js&quot;</span><span class="token punctuation">,</span>\n</code></pre></div><p>配置好以后就可以直接在项目中使用 ESM 模块化规范了</p><h2 id="使用-esm-包"><a class="header-anchor" href="#使用-esm-包" aria-hidden="true">#</a> 使用 esm 包</h2><p><a href="https://github.com/standard-things/esm" target="_blank" rel="noopener noreferrer">esm</a></p><p>直接使用 esm 包是一种在 Node.js 中使用 ESM 的方法。esm 是一个 JavaScript 模块，它提供了对 ESM 模块的支持，使你可以在 Node.js 中使用 ESM 的语法和功能，而不需要手动配置或更改文件扩展名。</p><h3 id="步骤"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h3><ol><li><p>安装 esm 包</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> esm\n</code></pre></div></li><li><p>在启动脚本中使用 esm</p><p>在你的 Node.js 启动脚本中，通过 --require 或 -r 选项来加载 esm 包。例如，假设启动脚本是 index.js：</p><div class="language-bash"><pre><code>nodemon -r esm index.js\n</code></pre></div></li><li><p>修改启动脚本 index.js</p><div class="language-js"><pre><code><span class="token comment">// index.js</span>\n<span class="token comment">// 使用 esm 加载模块</span>\nrequire <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;esm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>module <span class="token comment">/*, options*/</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./module.js&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>在 module.js 中就可以完全使用 es 语法了</p></li></ol>',10)];o.render=function(n,a,o,t,r,c){return s(),e("div",null,p)};export{a as __pageData,o as default};
