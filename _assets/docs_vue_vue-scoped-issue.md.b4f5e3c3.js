import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"vue 父组件样式污染子组件","frontmatter":{"date":"2024-02-24","title":"vue 父组件样式污染子组件","tags":["vue"],"describe":"vue 父组件样式污染子组件"},"headers":[{"level":3,"title":"现象","slug":"现象"},{"level":3,"title":"原因","slug":"原因"},{"level":3,"title":"解决方案","slug":"解决方案"}],"relativePath":"docs/vue/vue-scoped-issue.md","lastUpdated":1742973717418.3687}';var p={};const e=[a('<h3 id="现象"><a class="header-anchor" href="#现象" aria-hidden="true">#</a> 现象</h3><p>父组件添加 scoped 样式，对子组件同类名元素生效导致子组件样式被污染</p><h3 id="原因"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h3><p>当子组件根元素类名和父组件某一元素类名相同时，父组件类名样式即使添加了 scoped，也会对子组件根元素生效</p><p>根据查看 dom 结构及样式，发现被污染的 dom 上存在两个 data-v-id，并且污染样式来源于父组件同类名元素</p><p><img src="/blog/_assets/vue-scoped-style.b0476d91.png" alt="vue-scoped-style"></p><p>对 vue 子组件根节点自动继承父组件 id 的行为，官方文档有做出说明</p><p><a href="https://vuejs.org/api/sfc-css-features.html#scoped-css" target="_blank" rel="noopener noreferrer">使用 scoped，父组件的样式不会泄漏到子组件中。但是，子组件的根节点将同时受到父级作用域 CSS 和子级作用域 CSS 的影响。这是设计使然，以便父级可以设置子根元素的样式以实现布局目的</a></p><p>vue-loader 官方文档文档中也有给出同样的说明，但是该逻辑实际是在 vue 的 render 阶段而非编译阶段，具体代码在 vue 源码 renderElementVNode 方法中</p><div class="language-js"><pre><code><span class="token comment">// core-main/packages/server-renderer/src/render.ts</span>\n<span class="token keyword">function</span> <span class="token function">renderElementVNode</span><span class="token punctuation">(</span>\n  <span class="token parameter"><span class="token literal-property property">push</span><span class="token operator">:</span> PushFn<span class="token punctuation">,</span>\n  <span class="token literal-property property">vnode</span><span class="token operator">:</span> VNode<span class="token punctuation">,</span>\n  <span class="token literal-property property">parentComponent</span><span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  <span class="token literal-property property">slotScopeId</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type <span class="token keyword">as</span> string\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> shapeFlag<span class="token punctuation">,</span> scopeId<span class="token punctuation">,</span> dirs <span class="token punctuation">}</span> <span class="token operator">=</span> vnode\n  <span class="token keyword">let</span> openTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">...</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>scopeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    openTag <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>scopeId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// inherit parent chain scope id if this is the root node</span>\n  <span class="token keyword">let</span> <span class="token literal-property property">curParent</span><span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> parentComponent\n  <span class="token keyword">let</span> curVnode <span class="token operator">=</span> vnode\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>curParent <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> curVnode <span class="token operator">===</span> curParent<span class="token punctuation">.</span>subTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    curVnode <span class="token operator">=</span> curParent<span class="token punctuation">.</span>vnode\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>curVnode<span class="token punctuation">.</span>scopeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      openTag <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>curVnode<span class="token punctuation">.</span>scopeId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    curParent <span class="token operator">=</span> curParent<span class="token punctuation">.</span>parent\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>slotScopeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    openTag <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>slotScopeId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token function">push</span><span class="token punctuation">(</span>openTag <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>该部分代码在渲染子组件时会判断当前元素是否是子组件根节点，如果是则会将自己的 scopeId 和父组件 scopeId 一并添加到元素属性上，这里的 scopeId 就是浏览器控制台中看到的 dom 中的 data-v-xx</p><h3 id="解决方案"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><p>父组件元素与子组件根节点避免同名、开发中慎用单字类名</p>',13)];p.render=function(a,t,p,o,c,r){return n(),s("div",null,e)};export{t as __pageData,p as default};
