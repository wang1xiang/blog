import{f as s,g as n,J as e}from"./common-03e46d7f.js";const a='{"title":"vue3项目添加husky+lint-staged配置","frontmatter":{"date":"2023-03-20","title":"vue3项目添加husky+lint-staged配置","tags":["vue"],"describe":"给公司的vue3项目添加husky+lint-staged配置"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"husky","slug":"husky"},{"level":2,"title":"lint-staged","slug":"lint-staged"},{"level":2,"title":"TODO","slug":"todo"}],"relativePath":"docs/vue/vue3-lint-staged.md","lastUpdated":1742523053839.6409}';var t={};const p=[e('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>上周在项目开发时，因为自己的疏忽造成了一个低级的线上问题，还好没有造成大的影响，不然领导会直接嘎了我（毕竟是个新人）。 <img src="/blog/_assets/docs-error.167070be.png" alt="docs-error.png"></p><p><strong>为什么会有这种低级错误呢？</strong> 我看了一下，这项目虽然添加了 eslint，但所有的 rules 都设置成了<code>off</code>，所以不管你怎么写，代码都不会报错，wtf😪。</p><p>为了给其他人上上强度，也为了自己以后不再犯这种低级错误，拿这个项目来练练手，正好用来应付领导的盘问。</p><h2 id="husky"><a class="header-anchor" href="#husky" aria-hidden="true">#</a> husky</h2><p><a href="https://typicode.github.io/husky/#/" target="_blank" rel="noopener noreferrer">说明文档</a> 简单来说，husky 是一个 git hook 工具，可以帮助我们在 git 操作之前与之后可设置自动执行的脚本，像：<code>pre-commit</code>、<code>commit-msg</code>、<code>pre-push</code> 等等支持的 <a href="https://git-scm.com/docs/githooks" target="_blank" rel="noopener noreferrer">git hooks</a>。</p><p>那为什么不直接使用 git hook，而要使用 husky 呢？ 原因很简单，git 自带的钩子需要在<code>.git/hooks</code> 目录中进行修改，而这里的文件并没有共享到代码库，无法和项目组成员共享。</p><ul><li><p>安装</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> husky --dev\n<span class="token comment"># use yarn</span>\n<span class="token function">yarn</span> <span class="token function">add</span> husky --dev\n</code></pre></div></li><li><p>初始化 husky 配置</p><p>执行此命令后，会在当前目录下创建.husky 目录，用于放置 husky hooks</p><div class="language-bash"><pre><code><span class="token function">yarn</span> husky <span class="token function">install</span>\n</code></pre></div></li><li><p>配置 husky 自动安装，方便项目组其他成员使用</p><p>npm 脚本有 pre 和 post 两个钩子，以便于我们在执行<code>npm install</code>、<code>npm publish</code>、<code>npm build</code>等命令之前或之后执行脚本。 在这里我们添加 <code>prepare</code> 钩子，当执行完 <code>npm install</code> 后，将自动执行 <code>husky install</code> 初始化 husky 配置</p><div class="language-json"><pre><code> <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npx husky install&quot;</span>\n <span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>prepare 是 NPM 操作生命周期中的一环，在执行 install 的时候会按生命周期顺序执行相应钩子：NPM7：preinstall -&gt; install -&gt; postinstall -&gt; prepublish -&gt; preprepare -&gt; prepare -&gt; postprepare</p></blockquote></li><li><p>添加 pre-commit hook</p><div class="language-bash"><pre><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npx eslint --fix packages/**/*.{ts,js,vue}&quot;</span>\n</code></pre></div><p>执行完成后，就会在.husky 目录下生成 pre-commit 文件 <img src="/blog/_assets/pre-commit.1424773f.png" alt="pre-commit.png"> 这样当提交代码前，就会首先触发 pre-commit，自动执行 eslint 检查功能，并且后在校验失败时自动退出，这样可以确保本地的代码已经通过检查才能 push 到远程。 <img src="/blog/_assets/pre-commit-error.f6968c9f.png" alt="pre-commit-error.png"></p><p>这么多报错？什么鬼 👹？</p><p>当然，如果你能确保你的代码没有任何问题又觉得 eslint 费时间，或者说这块代码是别人写的，为什么要我改，那么也可以直接跳过 husky。</p><div class="language-bash"><pre><code><span class="token function">git</span> commit -m <span class="token string">&quot;&quot;</span> --no-verify\n</code></pre></div><p>Vue3 项目 报错‘defineProps‘ is not defined 的解决方法</p></li><li><p><a href="https://eslint.vuejs.org/user-guide/#compiler-macros-such-as-defineprops-and-defineemits-generate-no-undef-warnings" target="_blank" rel="noopener noreferrer">官方解决方案</a></p></li><li><p><a href="https://eslint.org/docs/latest/use/configure/language-options#using-configuration-files-1" target="_blank" rel="noopener noreferrer">eslint global</a></p></li></ul><h2 id="lint-staged"><a class="header-anchor" href="#lint-staged" aria-hidden="true">#</a> lint-staged</h2><p>在前面我们使用 husky 和 eslint 对提交前的代码进行检查时，可以看到我们项目里竟然存在 400 多个 eslint 问题，可是我只改了一个文件，难不成我要把所有的问题都给修复了？ 算了，还是采用<code>--no-verify</code>吧，让其他人去修。</p><p>真实项目开发中，基本都会遇到这个问题，我只改了 A 文件，结果全部文件的报错信息都冒了出来。</p><p>这时候我们就可以借助<a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener noreferrer">lint-staged</a>对已经通过 <code>git add</code> 加入到 提交区 stage 的文件进行扫描即可。</p><ul><li><p>安装</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> lint-staged --dev\n<span class="token comment"># use yarn</span>\n<span class="token function">yarn</span> <span class="token function">add</span> lint-staged --dev\n</code></pre></div></li><li><p>配置</p><p>在 package.json 中配置 lint-staged</p><div class="language-json"><pre><code><span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;packages/**/*.{js,jsx,ts,tsx,json,css,scss,md,vue}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;eslint --fix --max-warnings=0&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p>这里我只开启 eslint 校验，防止代码再出现一些低级错误。</p></li><li><p>修改 pre-commit 钩子</p><div class="language-bash"><pre><code><span class="token shebang important">#!/usr/bin/env sh</span>\n<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>\n<span class="token comment"># npx eslint --fix packages/**/*.{ts,js,vue}</span>\nnpx lint-staged\n</code></pre></div></li></ul><p>这样一来，当执行 git commit 命令提交代码时，会自动执行 husky 下的 pre-commit 脚本，即执行 lint-staged 命令。对暂存区文件执行 eslint 校验，而不是针对全部文件。 <img src="/blog/_assets/lint-staged.2f5649b6.png" alt="lint-staged.png"></p><p>解决完这几个问题，就可以愉快的提交代码了。</p><h2 id="todo"><a class="header-anchor" href="#todo" aria-hidden="true">#</a> TODO</h2><ul><li>添加 prettier 到 pre-commit 钩子，现在加上怕有很多问题，导致和代码好多冲突，等版本稳定了，全局 prettier 一下，再让大家重新拉下最新的代码。</li><li>添加 commitlint 规范 commit message</li></ul>',17)];t.render=function(e,a,t,o,l,i){return s(),n("div",null,p)};export{a as __pageData,t as default};
