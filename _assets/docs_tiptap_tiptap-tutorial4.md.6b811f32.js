import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"富文本编辑器Tiptap系列教程——Tiptap常用API & 命令详解","frontmatter":{"date":"2023-07-03","title":"富文本编辑器Tiptap系列教程——Tiptap常用API & 命令详解","tags":["tiptap"],"describe":"Tiptap提供了大量的方法供我们使用，包括对文档、节点、扩展以及选区等的操作，来丰富富文本编辑器的可操作性。"},"headers":[{"level":2,"title":"Tiptap 实例","slug":"tiptap-实例"},{"level":3,"title":"方法","slug":"方法"},{"level":3,"title":"can()","slug":"can"},{"level":3,"title":"chain()","slug":"chain"},{"level":3,"title":"destroy()","slug":"destroy"},{"level":3,"title":"getHTML()/getJSON()/getText()","slug":"gethtml-getjson-gettext"},{"level":3,"title":"getAttributes()","slug":"getattributes"},{"level":3,"title":"isActive()","slug":"isactive"},{"level":3,"title":"registerPlugin()/unregisterPlugin()","slug":"registerplugin-unregisterplugin"},{"level":3,"title":"setOptions()","slug":"setoptions"},{"level":3,"title":"setEditable()","slug":"seteditable"},{"level":3,"title":"属性","slug":"属性"},{"level":3,"title":"isEditable","slug":"iseditable"},{"level":3,"title":"isEmpty","slug":"isempty"},{"level":2,"title":"Commands 命令","slug":"commands-命令"},{"level":3,"title":"执行命令","slug":"执行命令"},{"level":3,"title":"Try commands","slug":"try-commands"},{"level":3,"title":"命令合集","slug":"命令合集"},{"level":2,"title":"自定义 Tiptap 扩展","slug":"自定义-tiptap-扩展"},{"level":2,"title":"自定义 Tiptap 组件","slug":"自定义-tiptap-组件"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"docs/tiptap/tiptap-tutorial4.md","lastUpdated":1742523053499.6394}';var p={};const o=[a('<p>接上篇<a href="https://juejin.cn/post/7243413934765621307" target="_blank" rel="noopener noreferrer">富文本编辑器 Tiptap 系列教程——Tiptap 模块&amp;概念详解</a>，本文我们主要说一下 Tiptap 的常用方法 &amp; 命令。</p><h2 id="tiptap-实例"><a class="header-anchor" href="#tiptap-实例" aria-hidden="true">#</a> Tiptap 实例</h2><p>首先回忆一下我们之前初始化编辑器部分：</p><div class="language-js"><pre><code><span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>通过<code>new Editor</code>或<code>useEditor</code>初始化得到的<code>editor</code>就是一个编辑器实例，实例上存在很多实用方法和属性，下面我们来一一列举下。</p><h3 id="方法"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><p>编辑器实例提供了很多方法，可以返回任何内容，增加 Tiptap 的可操作性。</p><h3 id="can"><a class="header-anchor" href="#can" aria-hidden="true">#</a> can()</h3><p>检查命令或命令链是否可以执行，不会实际执行。返回值为<code>false/true</code>。</p><p>比如：之前利用<code>!editor.can().chain().focus().toggleBold().run()</code>来对<code>加粗bold</code>按钮进行启用或禁用。</p><div class="language-js"><pre><code><span class="token operator">&lt;</span>button\n  @click<span class="token operator">=</span><span class="token string">&quot;editor.chain().focus().toggleBold().run()&quot;</span>\n  <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">&quot;!editor.can().chain().focus().toggleBold().run()&quot;</span>\n  <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;{ &#39;is-active&#39;: editor.isActive(&#39;bold&#39;) }&quot;</span>\n<span class="token operator">&gt;</span>\n  bold\n<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n</code></pre></div><h3 id="chain"><a class="header-anchor" href="#chain" aria-hidden="true">#</a> chain()</h3><p>之前说过，通过<code>chain()</code>可以创建一条链来执行多个方法，最后需要添加<code>.run()</code>来实际执行所有命令。</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleBold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="destroy"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy()</h3><p>销毁编辑器实例并注销所有事件，在组件销毁时调用。</p><div class="language-js"><pre><code><span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> editor<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="gethtml-getjson-gettext"><a class="header-anchor" href="#gethtml-getjson-gettext" aria-hidden="true">#</a> getHTML()/getJSON()/getText()</h3><p>获取编辑器 HTML/JSON/纯文本 Text 内容。</p><div class="language-js"><pre><code><span class="token function">onUpdate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> editor <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> json <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 默认两个节点 nodes 之间两个换行符</span>\n  <span class="token keyword">const</span> text <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 可传入参数 blockSeparator 控制节点之间的连接</span>\n  <span class="token keyword">const</span> lineText <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">blockSeparator</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lineText<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><img src="/blog/_assets/getJSON-getHTML-getText.77ea5f74.png" alt="getJSON-getHTML-getText.png"></p><h3 id="getattributes"><a class="header-anchor" href="#getattributes" aria-hidden="true">#</a> getAttributes()</h3><p>获取当前选中的节点或标记的属性，如获取当前链接的 href 属性：</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href\n</code></pre></div><h3 id="isactive"><a class="header-anchor" href="#isactive" aria-hidden="true">#</a> isActive()</h3><p>返回当前选定的节点或标记是否处于激活状态，如我们之前用于判断<code>bold</code>是否处于激活状态时，为其添加<code>is-active</code>类：</p><div class="language-js"><pre><code><span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;{ &#39;is-active&#39;: editor.isActive(&#39;bold&#39;) }&quot;</span>\n</code></pre></div><h3 id="registerplugin-unregisterplugin"><a class="header-anchor" href="#registerplugin-unregisterplugin" aria-hidden="true">#</a> registerPlugin()/unregisterPlugin()</h3><p>注册/注销一个 ProseMirror 插件。</p><p>项目中暂时还没有用到，我们可以看下 vue3 中对<a href="https://github.com/ueberdosis/tiptap/blob/HEAD/packages/vue-3/src/BubbleMenu.ts#L53" target="_blank" rel="noopener noreferrer">BubbleMenu</a>注册插件的代码。</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BubbleMenuPlugin<span class="token punctuation">,</span> BubbleMenuPluginProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/extension-bubble-menu&#39;</span>\n<span class="token comment">// ...</span>\n<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    updateDelay<span class="token punctuation">,</span>\n    editor<span class="token punctuation">,</span>\n    pluginKey<span class="token punctuation">,</span>\n    shouldShow<span class="token punctuation">,</span>\n    tippyOptions<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> props\n\n  editor<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token function">BubbleMenuPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    updateDelay<span class="token punctuation">,</span>\n    editor<span class="token punctuation">,</span>\n    <span class="token literal-property property">element</span><span class="token operator">:</span> root<span class="token punctuation">.</span>value <span class="token keyword">as</span> HTMLElement<span class="token punctuation">,</span>\n    pluginKey<span class="token punctuation">,</span>\n    shouldShow<span class="token punctuation">,</span>\n    tippyOptions<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> pluginKey<span class="token punctuation">,</span> editor <span class="token punctuation">}</span> <span class="token operator">=</span> props\n\n  editor<span class="token punctuation">.</span><span class="token function">unregisterPlugin</span><span class="token punctuation">(</span>pluginKey<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// ...</span>\n</code></pre></div><p>在<code>onMounted</code>中注册插件<code>BubbleMenuPlugin</code>，并在<code>onBeforeUnmount</code>通过<code>pluginKey</code>注销这个插件。</p><h3 id="setoptions"><a class="header-anchor" href="#setoptions" aria-hidden="true">#</a> setOptions()</h3><p>手动更新编辑器的配置。</p><p>我们通过<code>new Editor()</code>初始化时对编辑器添加配置之外，还可以通过<code>setOptions()</code>去动态的修改配置，参数同初始化相同。</p><div class="language-js"><pre><code><span class="token comment">// 添加 class 样式到编辑器实例</span>\neditor<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">editorProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;my-custom-class&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="seteditable"><a class="header-anchor" href="#seteditable" aria-hidden="true">#</a> setEditable()</h3><p>更新编辑器的可编辑状态，接受两个参数<code>editable</code>和<code>emitUpdate</code>。</p><div class="language-js"><pre><code><span class="token comment">// 设置编辑器只读</span>\neditor<span class="token punctuation">.</span><span class="token function">setEditable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="属性"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><p>目前有 isEditable（是否是编辑状态） 和 isEmpty（内容是否为空） 两个属性。</p><h3 id="iseditable"><a class="header-anchor" href="#iseditable" aria-hidden="true">#</a> isEditable</h3><p>返回编辑器是可编辑的还是只读的。</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span>isEditable\n</code></pre></div><h3 id="isempty"><a class="header-anchor" href="#isempty" aria-hidden="true">#</a> isEmpty</h3><p>检查是否有内容。</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span>isEmpty\n</code></pre></div><h2 id="commands-命令"><a class="header-anchor" href="#commands-命令" aria-hidden="true">#</a> Commands 命令</h2><p>Commands 命令用于更改编辑器的状态（内容、选区等），仅返回 <code>true/false</code>。Tiptap 编辑器提供了大量 Commands 命令，可以添加或更改内容、更改选择等。只有掌握这些命令，才能更好的使用 Tiptap 编辑器。</p><p><strong>切记：不要混淆实例方法和 commands 命令</strong>，实例方法可返回任何内容，命令仅返回 <code>true/false</code>。</p><h3 id="执行命令"><a class="header-anchor" href="#执行命令" aria-hidden="true">#</a> 执行命令</h3><p>Tiptap 中所有命令都可以通过编辑器实例<code>editor</code>调用，比如在用户单击按钮时将文本设置为粗体：</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>上面命令可以使所选内容变为粗体，但在使用此类命令时是点击外部按钮，会导致编辑器失焦，所以通常会通过链式调用使编辑器重新获取焦点。</p><h4 id="chain-链式调用"><a class="header-anchor" href="#chain-链式调用" aria-hidden="true">#</a> chain 链式调用</h4><p>大多数的命令可以组合为一个调用，这比单独的函数调用要简短优雅一些，链命令以<code>.chain()</code>开头<code>.run()</code>结尾，将多个命令合并成一个事务，内容只更新一次，并且事务也只触发一次，比如修改上面使文本加粗的例子：</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleBold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>上面我们说过当点击编辑器外部区域调用方法时，会导致编辑器失焦，所以需要链式调用<code>focus()</code>使编辑器重新获取焦点，再继续执行其他方法。</p><h4 id="检测命令是否可执行"><a class="header-anchor" href="#检测命令是否可执行" aria-hidden="true">#</a> 检测命令是否可执行</h4><p>通过<code>editor.can().xxx()</code>可以判断命令是否可以执行，返回<code>true/false</code>。比如我们在表格中需要判断当前选中单元格是否可以合并/拆分，因为并不是所选的单元格就可以进行合并/拆分操作：</p><div class="language-js"><pre><code><span class="token comment">// 是否可合并</span>\neditor<span class="token punctuation">.</span><span class="token function">can</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mergeCells</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 是否可拆分</span>\neditor<span class="token punctuation">.</span><span class="token function">can</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="try-commands"><a class="header-anchor" href="#try-commands" aria-hidden="true">#</a> Try commands</h3><p><code>.first()</code>用于执行命令列表，首先执行第一个命令，如果第一个命令返回<code>true</code>，即执行成功时就会停止；如果第一个命令执行失败，就会接着执行第二个命令，即一个接一个执行，遇到成功执行的命令则停止执行。</p><p>如：退格键首先尝试撤消输入规则。如果成功，就到此为止。如果没有应用输入规则，因此无法恢复，它将运行下一个命令并删除选择。</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commands <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> commands<span class="token punctuation">.</span><span class="token function">undoInputRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> commands<span class="token punctuation">.</span><span class="token function">deleteSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// …</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p>也可以在命令中应用 <code>commands.first()</code> 方法</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commands <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> commands<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> commands<span class="token punctuation">.</span><span class="token function">undoInputRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> commands<span class="token punctuation">.</span><span class="token function">deleteSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">// …</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="命令合集"><a class="header-anchor" href="#命令合集" aria-hidden="true">#</a> 命令合集</h3><p>Tiptap 有很可使用多命令，包括对文档、节点/标记和选中区域的各种操作，所以要想玩转 Tiptap，必须熟悉这些命令，知道在什么时候用什么命令。</p><h4 id="content-文档命令"><a class="header-anchor" href="#content-文档命令" aria-hidden="true">#</a> content 文档命令</h4><ul><li><p>clearContent</p><p>清空文档中的所有内容。</p></li><li><p>insertContent/insertContentAt</p><p>在当前/指定位置插入纯文本、HTML 或 JSON 节点。这两个命令使用较多，如一些自定义节点插入内容时我们会使用：</p><div class="language-js"><pre><code>commands<span class="token punctuation">.</span><span class="token function">insertContent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>或者如插入表情内容时：</p><div class="language-js"><pre><code>props<span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertContent</span><span class="token punctuation">(</span>emoji<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>setContent</p><p>设置文档内容（用新文档替换该文档），一般用于初始化文档内容。</p></li></ul><h4 id="节点、标记命令"><a class="header-anchor" href="#节点、标记命令" aria-hidden="true">#</a> 节点、标记命令</h4><ul><li><p>clearNodes</p><p>将节点规范化为默认节点，一般用于清除样式，如：橡皮擦功能。</p></li><li><p>createParagraphNear</p><p>在选中节点后面添加空段落。</p></li><li><p>deleteNode</p><p>删除选中节点，如一些自定义节点删除时：</p><div class="language-js"><pre><code><span class="token function-variable function">Backspace</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editor\n    <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">insertContent</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;&lt;/p&gt;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>extendMarkRange</p><p>扩展当前的选择以包含当前标记，如将当前选中区域设置为链接：</p><div class="language-js"><pre><code>props<span class="token punctuation">.</span>editor\n  <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">extendMarkRange</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">setLink</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">href</span><span class="token operator">:</span> link <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>setMark</p><p>在当前选择处添加一个新标记，主要用于对选中文本添加各种标记，如对设置加粗或字体等：</p><div class="language-js"><pre><code><span class="token function-variable function">setFontSize</span><span class="token operator">:</span>\n  <span class="token punctuation">(</span><span class="token parameter">fontSize</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> tr<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> editor<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMark</span><span class="token punctuation">(</span><span class="token string">&#39;textStyle&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> fontSize <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token function-variable function">unsetFontSize</span><span class="token operator">:</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> chain <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMark</span><span class="token punctuation">(</span><span class="token string">&#39;textStyle&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre></div></li><li><p>setNode</p><p>将当前节点替换成指定节点，如对当前节点进行标题和正文的切换：</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">setNode</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">)</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">setNode</span><span class="token punctuation">(</span><span class="token string">&#39;heading&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>toggleMark</p><p>在当前选择处打开和关闭特定标记，也就是添加或取消添加标记，如：</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">toggleMark</span><span class="token punctuation">(</span><span class="token string">&#39;bold&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>点击一次时选中内容加粗，再次点击选中内容将取消粗体。</p></li><li><p>toggleNode</p><p>类似于 toggleMark，所选节点将在一个节点与另一个节点之间切换，如：</p><div class="language-js"><pre><code>props<span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleNode</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;heading&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>点击一次时当前节点转为标题，再次点击标题又转为段落。</p></li><li><p>unsetAllMarks</p><p>将选中内容的所有 marks 标记移除。</p></li><li><p>unsetMark</p><p>与 setMark 作用相反，移除当前选中内容的指定标记。</p></li><li><p>updateAttributes</p><p>更新节点、标记的属性，只需传递需要更改的属性，如针对图片的宽度设置：</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">updateAttributes</span><span class="token punctuation">(</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><h4 id="selection-选区命令"><a class="header-anchor" href="#selection-选区命令" aria-hidden="true">#</a> selection 选区命令</h4><ul><li><p>blur</p><p>使编辑器失去焦点。</p></li><li><p>focus</p><p>将焦点设置回编辑器，可以看到上面讲到的大部分链式命令中都用了 focus 命令，并且可以针对光标位置进行设置：</p><div class="language-js"><pre><code><span class="token comment">// 设置编辑器获得焦点</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 设置光标位于编辑器开始位置</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 设置光标位于编辑器结尾位置</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 选中全部文档</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token string">&#39;all&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 设置光标到pos=10的位置</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 设置光标位于结尾位置，但是滚动条不滚动到结尾（当内容高度大于编辑器高度有滚动条时）</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">scrollIntoView</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>deleteRange</p><p>删除指定范围内所有内容，如：</p><div class="language-js"><pre><code>editor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">deleteRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>deleteSelection</p><p>删除当前选中节点。</p></li><li><p>enter</p><p>触发键盘&quot;Enter&quot;。</p></li><li><p>scrollIntoView</p><p>将视图滚动到当前选择或光标位置。</p></li><li><p>selectAll</p><p>选中整个文档。</p></li><li><p>setNodeSelection</p><p>给定位置创建一个新的节点选区，如选中图片、列表等块元素，传入节点的所在位置。</p></li><li><p>setTextSelection</p><p>创建一个文本选区，接受 number 或 range，如果传入 range 时会选中文本，传入 number 时只是移动光标位置。</p><div class="language-js"><pre><code><span class="token comment">// 仅移动光标</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">setTextSelection</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>\n<span class="token comment">// 选中文本区域</span>\neditor<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">setTextSelection</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><h2 id="自定义-tiptap-扩展"><a class="header-anchor" href="#自定义-tiptap-扩展" aria-hidden="true">#</a> 自定义 Tiptap 扩展</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Extension <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/core&#39;</span>\n<span class="token keyword">import</span> type <span class="token punctuation">{</span> CommandProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/core&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> FormatPainter <span class="token operator">=</span> Extension<span class="token punctuation">.</span>create<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;formatPainter&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">addCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">goingDoSomething</span><span class="token operator">:</span> <span class="token parameter">options</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> CommandProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// options 为 goingDoSomething 方法参数</span>\n        <span class="token comment">// props 为 tiptap 指令公共参数们 = {</span>\n        <span class="token comment">//   editor: Editor;</span>\n        <span class="token comment">//   tr: Transaction;</span>\n        <span class="token comment">//   commands: SingleCommands;</span>\n        <span class="token comment">//   can: () =&gt; CanCommands;</span>\n        <span class="token comment">//   chain: () =&gt; ChainedCommands;</span>\n        <span class="token comment">//   state: EditorState;</span>\n        <span class="token comment">//   view: EditorView;</span>\n        <span class="token comment">//   dispatch: ((args?: any) =&gt; any) | undefined;</span>\n        <span class="token comment">// }</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="自定义-tiptap-组件"><a class="header-anchor" href="#自定义-tiptap-组件" aria-hidden="true">#</a> 自定义 Tiptap 组件</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mergeAttributes<span class="token punctuation">,</span> Node<span class="token punctuation">,</span> nodeInputRule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/core&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> VueNodeViewRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tiptap/vue-3&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> inputRegex <span class="token operator">=</span>\n  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[&quot;&#39;](\\S+)[&quot;&#39;])?\\))$</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> ImageWithTools <span class="token operator">=</span> Node<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">draggable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 可配置参数</span>\n  <span class="token function">addOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">allowBase64</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 组件是否为行内组件</span>\n  <span class="token function">inline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>inline\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>inline <span class="token operator">?</span> <span class="token string">&#39;inline&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;block&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 组件属性</span>\n  <span class="token function">addAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// tiptap 执行 getHTML 时组件的返回值</span>\n  <span class="token function">parseHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>allowBase64\n          <span class="token operator">?</span> <span class="token string">&#39;img[src]&#39;</span>\n          <span class="token operator">:</span> <span class="token string">&#39;img[src]:not([src^=&quot;data:&quot;])&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// tiptap 渲染时组件的返回值</span>\n  <span class="token function">renderHTML</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> HTMLAttributes <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span> <span class="token function">mergeAttributes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>HTMLAttributes<span class="token punctuation">,</span> HTMLAttributes<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// tiptap 渲染时挂载的VUE文件</span>\n  <span class="token function">addNodeView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">VueNodeViewRenderer</span><span class="token punctuation">(</span>vueComponent<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 操作组件的指令</span>\n  <span class="token function">addCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token comment">// prettier-ignore</span>\n      <span class="token function-variable function">setImage</span><span class="token operator">:</span> <span class="token parameter">options</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commands <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> commands<span class="token punctuation">.</span><span class="token function">insertContent</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n          <span class="token literal-property property">attrs</span><span class="token operator">:</span> options<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// html 转为 tiptap 内容时过滤组件可用属性</span>\n  <span class="token function">addInputRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n      <span class="token function">nodeInputRule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">find</span><span class="token operator">:</span> inputRegex<span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span>\n        <span class="token function-variable function">getAttributes</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> src<span class="token punctuation">]</span> <span class="token operator">=</span> match\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> src <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文主要讲了 Tiptap 实例方法和常用命令，记住不要<strong>混淆实例方法和命令</strong>。我们只需要记住这些 API 的大概作用，脑袋里有个“影子”。一旦某个地方需要这么做的时候，要能回忆起好像已经有方法实现了，然后再去详细查看对应的方法，最终使用它并解决问题，这套思想适用于所有 API 较多的组件、框架等。</p><p>这篇文章完后，关于自定义节点、标记扩展等的文章暂时不再更新。leader 安排我做 webrtc 音视频通话的调研工作，等完成这部分工作后继续更新。</p><p>以上就是本文的全部内容，希望这篇文章对你有所帮助，欢迎点赞和收藏 🙏，如果发现有什么错误或者更好的解决方案及建议，欢迎随时联系。</p>',83)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
