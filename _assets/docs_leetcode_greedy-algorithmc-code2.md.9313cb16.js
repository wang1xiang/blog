import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 28：贪心算法part2","frontmatter":{"date":"2025-03-11","title":"跟着卡哥学算法Day 28：贪心算法part2","tags":["leetcode"],"describe":"贪心算法part2"},"headers":[{"level":2,"title":"122.买卖股票的最佳时机 II 🌟🌟","slug":"_122-买卖股票的最佳时机-ii-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"55. 跳跃游戏 🌟🌟","slug":"_55-跳跃游戏-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"代码","slug":"代码-2"},{"level":2,"title":"45.跳跃游戏 II 🌟🌟","slug":"_45-跳跃游戏-ii-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":2,"title":"1005.K 次取反后最大化的数组和 🌟","slug":"_1005-k-次取反后最大化的数组和-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-4"},{"level":3,"title":"解题思路","slug":"解题思路-4"}],"relativePath":"docs/leetcode/greedy-algorithmc-code2.md","lastUpdated":1742523053375.6387}';var t={};const e=[a('<h2 id="_122-买卖股票的最佳时机-ii-🌟🌟"><a class="header-anchor" href="#_122-买卖股票的最佳时机-ii-🌟🌟" aria-hidden="true">#</a> 122.买卖股票的最佳时机 II 🌟🌟</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定一个数组，它的第  i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1:</p><ul><li>输入: [7,1,5,3,6,4]</li><li>输出: 7</li><li>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</li></ul><p>示例 2:</p><ul><li>输入: [1,2,3,4,5]</li><li>输出: 4</li><li>解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</li></ul><p>示例  3:</p><ul><li>输入: [7,6,4,3,1]</li><li>输出: 0</li><li>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</li></ul><p>提示：</p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 10 ^ 4</code></li><li><code>0 &lt;= prices[i] &lt;= 10 ^ 4</code></li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>选低点买入，选高点卖出，再选低点买入，高点卖出.....循环</p><div class="language-js"><pre><code><span class="token comment">// [7,1,5,3,6,4]</span>\n<span class="token comment">// 第一天买入 -&gt; 第三天卖出</span>\nprice<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>\n<span class="token comment">// 第一天买入 -&gt; 第二天卖出 + 第二天买入 =&gt; 第三天卖出</span>\nprice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>price<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> price<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>\n<span class="token comment">// 两种方式结果一样，所以这种情况下，不管怎么分，只要把每天的利润加起来，总和都是一样的</span>\n</code></pre></div><p><strong>因此，可以把利润分解为每天为单位的维度</strong></p><p><strong>局部最优：计算每天利润，只要正利润，正数收集</strong><strong>全局最优：收集所有的正数之和</strong></p><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">maxProfit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> price <span class="token operator">=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">+=</span> price\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_55-跳跃游戏-🌟🌟"><a class="header-anchor" href="#_55-跳跃游戏-🌟🌟" aria-hidden="true">#</a> 55. 跳跃游戏 🌟🌟</h2><p><a href="https://leetcode.cn/problems/jump-game/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><p>示例  1:</p><ul><li>输入: [2,3,1,1,4]</li><li>输出: true</li><li>解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</li></ul><p>示例  2:</p><ul><li>输入: [3,2,1,0,4]</li><li>输出: false</li><li>解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</li></ul><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p>当前位置为 3 时，跳一步、两步还是三步呢？</p><p>其实跳几步无所谓，关键在于可跳的覆盖范围！即<strong>最大的跳跃步数就是可跳跃的覆盖范围</strong>，在这个范围内，不管怎么调，一定可以跳过来。</p><p><strong>那么这个问题就转化为跳跃覆盖范围可不可以覆盖到终点</strong></p><p><strong>局部最优：每次移动取最大跳跃步数，不断更新覆盖范围</strong><strong>整体最优：得到最大的覆盖范围，看是否到达终点</strong></p><ol><li>初始化覆盖范围 cover = 0</li><li>遍历 cover：计算当前步可覆盖范围 i+nums[i],不断更新 cover</li><li>cover 能到数组最后一项，则返回 true</li></ol><h3 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">canJump</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token keyword">let</span> cover <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cover<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cover <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cover<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token comment">// 检查是否到达终点</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cover <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_45-跳跃游戏-ii-🌟🌟"><a class="header-anchor" href="#_45-跳跃游戏-ii-🌟🌟" aria-hidden="true">#</a> 45.跳跃游戏 II 🌟🌟</h2><p><a href="https://leetcode.cn/problems/jump-game-ii/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p>示例:</p><ul><li>输入: [2,3,1,1,4]</li><li>输出: 2</li><li>解释: 跳到最后一个位置的最小跳跃数是 2。从下标为 0 跳到下标为 1 的位置，跳  1  步，然后跳  3  步到达数组的最后一个位置。</li></ul><p>说明: 假设你总是可以到达数组的最后一个位置。</p><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><p>每次在当前的跳跃范围内，找到能跳的最远的位置，然后跳到那个位置，这样每一步都尽可能跳得远，从而减少总次数。</p><p><strong>局部最优：每次移动取最大跳跃步数，如果还没到终点，步数再加一</strong><strong>整体最优：一步尽可能多走，得到最小的跳跃步数</strong></p><ol><li>初始化变量：jumps 记录跳跃次数，currentEnd 表示当前跳跃的边界，farthest 记录全局最远可达位置</li><li>遍历数组：从第一个位置遍历到倒数第二个位置（最后一个位置无需处理）</li><li>更新最远可达位置：每一步计算当前位置能到达的最远位置 i + nums[i]，并更新 farthest</li><li>到达边界时跳跃：当遍历到当前跳跃的边界 currentEnd 时，增加跳跃次数，并将边界更新为全局最远位置 farthest</li><li>提前终止条件：若更新后的边界已超过或等于终点，提前终止循环</li><li>返回结果：最终返回最小跳跃次数 jumps</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">jump</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> jumps <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> currentEnd <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> farthest <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    farthest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> farthest<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> currentEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      jumps<span class="token operator">++</span>\n      currentEnd <span class="token operator">=</span> farthest\n      <span class="token comment">// 提前终止条件：若更新后的边界已超过或等于终点，提前终止循环。</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentEnd <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> jumps\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_1005-k-次取反后最大化的数组和-🌟"><a class="header-anchor" href="#_1005-k-次取反后最大化的数组和-🌟" aria-hidden="true">#</a> 1005.K 次取反后最大化的数组和 🌟</h2><p><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述-4"><a class="header-anchor" href="#题目描述-4" aria-hidden="true">#</a> 题目描述</h3><p>给定一个整数数组 A，我们只能用以下方法修改该数组：我们选择某个索引 i  并将 A[i] 替换为 -A[i]，然后总共重复这个过程 K 次。（我们可以多次选择同一个索引 i。）</p><p>以这种方式修改数组后，返回数组可能的最大和。</p><p>示例 1：</p><ul><li>输入：A = [4,2,3], K = 1</li><li>输出：5</li><li>解释：选择索引 (1) ，然后 A 变为 [4,-2,3]。</li></ul><p>示例 2：</p><ul><li>输入：A = [3,-1,0,2], K = 3</li><li>输出：6</li><li>解释：选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。</li></ul><p>示例 3：</p><ul><li>输入：A = [2,-3,-1,5,-4], K = 2</li><li>输出：13</li><li>解释：选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。</li></ul><p>提示：</p><ul><li>1 &lt;= A.length &lt;= 10000</li><li>1 &lt;= K &lt;= 10000</li><li>-100 &lt;= A[i] &lt;= 100</li></ul><h3 id="解题思路-4"><a class="header-anchor" href="#解题思路-4" aria-hidden="true">#</a> 解题思路</h3><p>此题需要使用两次贪心算法</p><ol><li><p>使数组和最大，那么尽可能将最小的负数变为正数</p><p><strong>局部最优：让最小的负数变为正数，当前数值和达到最大</strong><strong>整体最优：整个数组和达到最大</strong></p></li><li><p>当负数都为正数，且 K 还不为 0 时</p><p><strong>局部最优：让最小的正数变为负数，当前数值和达到最大</strong><strong>整体最优：整个数组和达到最大</strong></p></li><li><p>排序数组：按绝对值从大到小排序，确保优先处理绝对值大的负数</p></li><li><p>翻转负数：遍历数组，尽可能将负数翻转为正数，同时减少剩余次数 k</p></li><li><p>处理剩余次数：若剩余的 k 为奇数，翻转绝对值最小的元素（即第一个元素）以使损失最小</p></li><li><p>计算总和：累加数组所有元素得到最大和</p></li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">largestSumAfterKNegations</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> <span class="token constant">K</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>num\n      <span class="token constant">K</span><span class="token operator">--</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">K</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">K</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    k<span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span> \n<span class="token punctuation">}</span>\n</code></pre></div>',70)];t.render=function(a,p,t,o,l,c){return n(),s("div",null,e)};export{p as __pageData,t as default};
