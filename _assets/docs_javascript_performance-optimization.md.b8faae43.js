import{f as e,g as a,J as l}from"./common-03e46d7f.js";const i='{"title":"性能优化","frontmatter":{"date":"2024-07-24","title":"性能优化","tags":["javascript"],"describe":"性能优化"},"headers":[{"level":2,"title":"编译","slug":"编译"},{"level":3,"title":"webpack","slug":"webpack"},{"level":3,"title":"vite","slug":"vite"},{"level":2,"title":"部署","slug":"部署"},{"level":3,"title":"预处理部分优化","slug":"预处理部分优化"},{"level":3,"title":"防恶化","slug":"防恶化"},{"level":2,"title":"项目优化","slug":"项目优化"},{"level":2,"title":"提升","slug":"提升"},{"level":2,"title":"工程化","slug":"工程化"},{"level":3,"title":"什么是工程化","slug":"什么是工程化"},{"level":3,"title":"ast","slug":"ast"},{"level":3,"title":"babel","slug":"babel"},{"level":3,"title":"模块化","slug":"模块化"},{"level":2,"title":"react 项目","slug":"react-项目"},{"level":3,"title":"如何使用 ts 编译器","slug":"如何使用-ts-编译器"},{"level":2,"title":"前端 js 方案","slug":"前端-js-方案"},{"level":3,"title":"选型","slug":"选型"}],"relativePath":"docs/javascript/performance-optimization.md","lastUpdated":1742176683507.0305}';var r={};const s=[l('<h2 id="编译"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h2><h3 id="webpack"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h3><p>前端工程化就是 webpack 吗？</p><p>webpack 只是前端工程化中的一个工具。</p><h4 id="webpack-自身优化"><a class="header-anchor" href="#webpack-自身优化" aria-hidden="true">#</a> webpack 自身优化</h4><p>webpack 4 升级 webpack 5（非常大的升级）</p><ol><li><p>引入持久化缓存：构建结果持久化缓存到本地</p><p>配置未发生改变，整体结构没发生变化时，只是某一个模块的某一部分需要重新编译时，会利用当前的缓存去反向跳过构建部分（比如构建过程经过多个 plugin、比如 js 处理、css 处理、html 处理，只改动 js 时，css、html 对应的插件就可以跳过，直接利用持久化缓存的结果）</p><p>利用缓存结果反向跳过构建过程，减少构建时间</p></li><li><p>资源模块的优化</p><p>额外引用 loader</p></li><li><p>打包优化</p><p>跨模块的 tree-shaking</p></li><li><p>split-chunks</p><p>超过固定尺寸拆包</p></li></ol><h4 id="webpack-插件机制"><a class="header-anchor" href="#webpack-插件机制" aria-hidden="true">#</a> webpack 插件机制</h4><h5 id="缓存加速"><a class="header-anchor" href="#缓存加速" aria-hidden="true">#</a> 缓存加速</h5><p>不升级 v5 的情况下，如何做缓存加速</p><p>cache-loader</p><h5 id="代码压缩"><a class="header-anchor" href="#代码压缩" aria-hidden="true">#</a> 代码压缩</h5><p>purifycss-plugin: css 未使用的 css 会被提出</p><h3 id="vite"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> vite</h3><h4 id="缓存"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h4><p>预构建存储在 node_modules/.vite 中，删除此文件会重新进行预构建</p><p>package.json lockfile vite.config.js 三个文件决定 vite 的缓存，三者之一发生改变时都会强制进行预构建，并且清除当前页面缓存。</p><h2 id="部署"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h2><h3 id="预处理部分优化"><a class="header-anchor" href="#预处理部分优化" aria-hidden="true">#</a> 预处理部分优化</h3><ol><li>寻址：域名到 IP 的解析（同域名寻址一次）DNS 解析 prefetch 优化</li><li>静态资源加载优化：CDN</li><li>SSR 服务端渲染</li></ol><p>防抖、节流、并发控制</p><h3 id="防恶化"><a class="header-anchor" href="#防恶化" aria-hidden="true">#</a> 防恶化</h3><p>监控、指标等</p><h2 id="项目优化"><a class="header-anchor" href="#项目优化" aria-hidden="true">#</a> 项目优化</h2><ul><li>FP: 用户首屏时间</li><li>FMP:</li><li>TTL: 可交互时间（一般比 FP 时间长，没关系）</li><li>LongTask：超过 50ms 的时间</li></ul><h2 id="提升"><a class="header-anchor" href="#提升" aria-hidden="true">#</a> 提升</h2><ul><li>script 异步加载：async、defer（vue、react 等都已经做了）</li><li>tree-shaking</li><li>按需加载：视野内部的先加载</li></ul><p>提前的性能优化，代价和收益不一定划算</p><p>初中级： 高级：技术底蕴好，独挡一面，快速上手，指导初级，接触大部分第三方库，协助 leader 把控项目进度 前端专家：偏管理，前端专，非前端也得懂（CICD 等），某个领域有丰富的知识 技术负责人：团队 leader（虚线）</p><h2 id="工程化"><a class="header-anchor" href="#工程化" aria-hidden="true">#</a> 工程化</h2><h3 id="什么是工程化"><a class="header-anchor" href="#什么是工程化" aria-hidden="true">#</a> 什么是工程化</h3><p>自动化、脚本化方法，结合工具能力，解决纯人工处理的低效、非标准问题，提升整体质量、性能。 包括：git、工作流 flow、npm script、package manage、构建工具、组件库、node、babel、lint、mock、cicd、微前端、性能质量等</p><h3 id="ast"><a class="header-anchor" href="#ast" aria-hidden="true">#</a> ast</h3><p>AST（Abstract Syntax Tree）抽象语法树，前端基建和工程化基石，会利用一些工具对代码进行转义，比如 babel、eslint、webpack、postcss 等，这些工具都会用到 AST。</p><h3 id="babel"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> babel</h3><ul><li><p>parser 解析：把源码转为 AST(babe/parser)</p></li><li><p>transform 转换：基于 AST， dbabel/traverse 遍历 AST，最后调用 visitor 修改 AST @babel/types 创建、修改、删除，需要用到 types Gbabe l/temp late 如果需要批量的处理，是需要的</p></li><li><p>generate 生成新代码：改造后的代码生成目标代码</p></li></ul><h4 id="如何配置"><a class="header-anchor" href="#如何配置" aria-hidden="true">#</a> 如何配置</h4><p>.babelrc</p><p>presets 和 plugins</p><h3 id="模块化"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h3><h4 id="解决问题"><a class="header-anchor" href="#解决问题" aria-hidden="true">#</a> 解决问题</h4><ol><li>私有、变量不会被外界污染，避免命名冲突、全局污染</li><li>模块设计更加清晰：import、export</li><li>解决依赖顺序问题</li></ol><h4 id="模块化方式"><a class="header-anchor" href="#模块化方式" aria-hidden="true">#</a> 模块化方式</h4><ul><li><p>ES5</p></li><li><p>ESM</p><p>大部分浏览器均支持</p></li><li><p>CJS</p><p>commonJS 规范，无法在浏览器执行</p><p>required、module、exports</p></li><li><p>AMD</p><p>CJS 的异步版本</p></li><li><p>CMD</p><p>依赖后置</p></li><li><p>UMD</p><p>通用的规范，兼容 ESM 和 CJS</p></li><li><p>IIFE</p></li></ul><h4 id="在-node-中使用-esm-规范"><a class="header-anchor" href="#在-node-中使用-esm-规范" aria-hidden="true">#</a> 在 Node 中使用 ESM 规范</h4><ol><li>后缀改为.mjs</li><li>package.json 声明 type: module，不能混用</li><li>封装好的第三方工具</li></ol><h4 id="浏览器支持-js-形式"><a class="header-anchor" href="#浏览器支持-js-形式" aria-hidden="true">#</a> 浏览器支持 js 形式</h4><ol><li><p>直接加载 js</p><div class="language-js"><pre><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;xxx.js&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre></div></li><li><p>动态加载</p></li><li><p>esm</p></li></ol><h4 id="构建公共库考虑构建产物"><a class="header-anchor" href="#构建公共库考虑构建产物" aria-hidden="true">#</a> 构建公共库考虑构建产物</h4><ol><li>支持 ESM：大部分，结合</li><li>支持 CJS</li><li>支持 UMD 或 IIFE：可以支持 cdn 引入方式 xxx.umd.min.js</li></ol><h4 id="monorepo"><a class="header-anchor" href="#monorepo" aria-hidden="true">#</a> monorepo</h4><ol><li>代码复用</li><li>易于抽象公共方法</li><li>协作方便</li></ol><h2 id="react-项目"><a class="header-anchor" href="#react-项目" aria-hidden="true">#</a> react 项目</h2><h3 id="如何使用-ts-编译器"><a class="header-anchor" href="#如何使用-ts-编译器" aria-hidden="true">#</a> 如何使用 ts 编译器</h3><ol><li>tsc 官方编译器，依赖于 tsconfig.js</li><li>ts-loader webpack 插件，默认可以使用 tsconfig.js</li></ol><p>以上两种不太灵活，使用 babel，打包工具基本都使用 babel 作为构建工具</p><p>一般大型项目中，为了保证编译的统一，一般不会用 tsc 作为代码产出，仅仅做类型检查，tsconfig.js 中 <code>noEmit; true</code>，表示不生成代码</p><p>用@babel/preset-typescript + tsc 的类型检查</p><h2 id="前端-js-方案"><a class="header-anchor" href="#前端-js-方案" aria-hidden="true">#</a> 前端 js 方案</h2><h3 id="选型"><a class="header-anchor" href="#选型" aria-hidden="true">#</a> 选型</h3><ol><li>团队技术力量</li><li>和其他应用的关系，代码复用等</li></ol>',61)];r.render=function(l,i,r,h,t,p){return e(),a("div",null,s)};export{i as __pageData,r as default};
