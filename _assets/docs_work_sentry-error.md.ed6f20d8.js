import{f as n,g as a,J as s}from"./common-03e46d7f.js";const e='{"title":"Sentry系列二——Sentry报错类型","frontmatter":{"date":"2022-09-19","title":"Sentry系列二——Sentry报错类型","tags":["work","tool","sentry"],"describe":"Sentry中的Issue分类"},"headers":[{"level":2,"title":"错误不上报原因","slug":"错误不上报原因"},{"level":2,"title":"错误类型","slug":"错误类型"},{"level":3,"title":"SyntaxError 语法错误","slug":"syntaxerror-语法错误"},{"level":3,"title":"ReferenceError 引用错误","slug":"referenceerror-引用错误"},{"level":3,"title":"TypeError 类型错误","slug":"typeerror-类型错误"},{"level":3,"title":"RangeError 范围错误","slug":"rangeerror-范围错误"},{"level":3,"title":"Error 与自定义异常","slug":"error-与自定义异常"},{"level":3,"title":"其他Error","slug":"其他error"},{"level":2,"title":"ISSUE","slug":"issue"}],"relativePath":"docs/work/sentry-error.md","lastUpdated":1670987452832.924}';var t={};const o=[s('<h2 id="错误不上报原因"><a class="header-anchor" href="#错误不上报原因" aria-hidden="true">#</a> 错误不上报原因</h2><p>代码中已经使用catch，则不会再上报了</p><h2 id="错误类型"><a class="header-anchor" href="#错误类型" aria-hidden="true">#</a> 错误类型</h2><h3 id="syntaxerror-语法错误"><a class="header-anchor" href="#syntaxerror-语法错误" aria-hidden="true">#</a> SyntaxError 语法错误</h3><ul><li><p>SyntaxError: Unexpected token &#39;&lt;&#39;</p><p>Syntax/ˈsɪntæks/语法， 编译阶段的异常，可以通过配置编辑器校验工具，避免这类报错</p></li></ul><h3 id="referenceerror-引用错误"><a class="header-anchor" href="#referenceerror-引用错误" aria-hidden="true">#</a> ReferenceError 引用错误</h3><ul><li>ReferenceError: $ is not defined</li></ul><h3 id="typeerror-类型错误"><a class="header-anchor" href="#typeerror-类型错误" aria-hidden="true">#</a> TypeError 类型错误</h3><ul><li><p>TypeError: Cannot read property &#39;length&#39; of undefined</p><p>对值进行不合理操作时会发生，引用null、undefined等</p></li></ul><h3 id="rangeerror-范围错误"><a class="header-anchor" href="#rangeerror-范围错误" aria-hidden="true">#</a> RangeError 范围错误</h3><ul><li>RangeError: Invalid array length</li><li>RangeError: Maximum call stack size exceeded</li></ul><p>第一种发生在调用数组长度不足，第二中共常发生在递归</p><h3 id="error-与自定义异常"><a class="header-anchor" href="#error-与自定义异常" aria-hidden="true">#</a> Error 与自定义异常</h3><p>Error是所有错误的积累，其他错误继承该类型，所有错误类型都包含</p><ul><li>Error.prototype.message: 错误消息</li><li><a href="http://Error.prototype.name" target="_blank" rel="noopener noreferrer">Error.prototype.name</a>: 错误名称</li><li>Error.prototype.stack: 堆栈信息</li></ul><p>通过继承Error实现自定义的错误类型，像React、Vue、Axios等框架都会封装一些自定义异常</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">MyError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;MyError&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="其他error"><a class="header-anchor" href="#其他error" aria-hidden="true">#</a> 其他Error</h3><ul><li><p>Unable to find node on an unmounted component</p><p><a href="https://github.com/facebook/react/issues/20131" target="_blank" rel="noopener noreferrer">react issue</a></p><p>react和react-dom版本不统一，可能时某个插件的依赖导致</p></li><li><p>ResizeObserver loop limit exceeded</p><p><a href="https://github.com/ant-design/ant-design/issues/23246" target="_blank" rel="noopener noreferrer">antd-design issue</a></p><p>该报错<a href="https://github.com/ant-design/ant-design/blob/a51439cbbabef454e35218864fddf0da96e4801e/site/theme/template/Layout/index.jsx#L46" target="_blank" rel="noopener noreferrer">Ant Design官方处理方式</a>是忽略，重新渲染反应期间可能会触发ResizeObserver loop limit exceeded（多发于组件第一次注册和动态元素)</p></li><li><p>开启忽略</p><div class="language-js"><pre><code>Sentry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">ignoreErrors</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;ResizeObserver loop limit exceeded&quot;</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>[React Intl] Could not find required <code>intl</code> object. <code>&lt;IntlProvider&gt;</code> needs to exist in the component ancestry.<a href="https://github.com/formatjs/formatjs/issues/1372" target="_blank" rel="noopener noreferrer">issue</a></p><p>antd Modal组件<code>&lt;IntlProvider&gt;</code>未包裹， <code>&lt;FormattedMessage&gt;</code>是在Modal render的时候才求值的，而<code>formatMessage()</code> API是在组件执行就开始求值</p></li><li><p>ChunkLoadError：Loading Chunk Fail</p><ol><li>异步加载组件，资源不会一下子全加载，而是你点到哪个界面就加载那个界面的资源。</li><li>重新打包发布后hash值不一样，找不到旧的资源。<br> 解决：</li></ol><div class="language-js"><pre><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleLoadingChunkError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Loading chunk报错重新加载</span>\n    <span class="token keyword">const</span> loadFailed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Loading chunk (\\d)+ failed</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>loadFailed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> loadingChunkNum <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;loadingChunkNum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      loadingChunkNum <span class="token operator">=</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>loadingChunkNum<span class="token punctuation">)</span> <span class="token operator">?</span> loadingChunkNum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token comment">// 刷新一次后不再刷新</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>loadingChunkNum <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 重置次数</span>\n        ss<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;loadingChunkNum&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        ss<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;loadingChunkNum&#39;</span><span class="token punctuation">,</span> loadingChunkNum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> handleLoadingChunkError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> handleLoadingChunkError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>注意</strong> window.onError不能捕获到资源加载失败，必须使用window.addEventListener(&#39;error&#39;)捕获资源加载失败情况</p></li><li><p>UnKnown</p><p>Non-Error promise rejection captured with keys: errorFields, outOfDate, values <br> Sentry自定义错误，使用Promise发生错误没有catch的时候，Sentry中通过unhandledrejection进行捕获</p></li><li><p>InternalError</p><p>网络错误</p></li><li><p>URIError</p><p>decodeURI, decodeURIComponent, encodeURI, encodeURIComponent四种方法传参错误时会产生这种异常，参考<a href="https://wang1xiang.github.io/blog/docs/work/malformed.html" target="_blank" rel="noopener noreferrer">这篇文章</a></p></li></ul><h2 id="issue"><a class="header-anchor" href="#issue" aria-hidden="true">#</a> ISSUE</h2><ul><li><code>config is not defined</code> index.html config报错</li><li><code>Cannot read properties of null (reading &#39;editor&#39;)</code> quick-email-editor项目报错</li><li><code>p.current is null</code> quick-email-editor项目报错</li><li><code>afterLogin window.recordInfoCase.reset is not function</code></li><li><code>Cannot read properties of null (reading &#39;staffInfo&#39;)</code></li><li><code>Cannot read properties of null (reading &#39;type&#39;)</code> GuideModal.tsx currentGuide?.type</li><li><code>Cannot read properties of undefined (reading &#39;timeUnit&#39;)</code> 对应bug<a href="http://zentao.quickcep.com/bug-view-2806.html?tid=cnfds63a" target="_blank" rel="noopener noreferrer">2806</a></li><li><code> Unexpected end of JSON input</code> JSON.parse(localStorage.getItem(&#39;user_code_auth&#39;) ?? &#39;&#39;) UserInfo</li><li><code> SecurityError Failed to execute &#39;replaceState&#39; on &#39;History&#39;</code> <a href="https://stackoverflow.com/questions/32453806/uncaught-securityerror-failed-to-execute-replacestate-on-history-cannot-be" target="_blank" rel="noopener noreferrer">stack overflow</a></li><li><code>Failed to execute &#39;getRangeAt&#39; on &#39;Selection&#39;: 0 is not a valid index.</code> <a href="https://stackoverflow.com/questions/22935320/uncaught-indexsizeerror-failed-to-execute-getrangeat-on-selection-0-is-not" target="_blank" rel="noopener noreferrer">stack overflow</a></li></ul>',21)];t.render=function(s,e,t,p,r,c){return n(),a("div",null,o)};export{e as __pageData,t as default};
