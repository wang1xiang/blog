import{f as e,g as r,J as o}from"./common-03e46d7f.js";import{_ as d}from"./common-51eb4cf7.js";const i='{"title":"利用 Chrome Overrides 提高前端开发效率","frontmatter":{"date":"2023-11-10","title":"利用 Chrome Overrides 提高前端开发效率","tags":["tool"],"describe":"本文介绍了 Chrome 浏览器的 Overrides 功能"},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"传统 Mock 工具","slug":"传统-mock-工具"},{"level":3,"title":"弊端","slug":"弊端"},{"level":3,"title":"Ajax Modifier","slug":"ajax-modifier"},{"level":2,"title":"Overrides 的使用场景","slug":"overrides-的使用场景"},{"level":3,"title":"修改请求头","slug":"修改请求头"},{"level":3,"title":"修改请求返回结果","slug":"修改请求返回结果"},{"level":3,"title":"停用 Overrides 的方式","slug":"停用-overrides-的方式"},{"level":2,"title":"结语","slug":"结语"}],"relativePath":"docs/tool/chrome-override.md","lastUpdated":1743653323671.106}';var t={};const a=[o('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>Chrome 浏览器的 Overrides 功能，已经发布有一段时间了，因为一直在用 Ajax Modifier 的缘故，所以并没有使用过，但是最近在使用的时候，发现 Overrides 在对请求头 Headers 的修改上，比 Ajax Modifier 更加友好且方便，并且使用后就不需要再安装多余的浏览器插件。</p><h2 id="传统-mock-工具"><a class="header-anchor" href="#传统-mock-工具" aria-hidden="true">#</a> 传统 Mock 工具</h2><p>Mock 工具可能是大多前端开发最常用的工具之一，Mock 数据的方式多种多样，可以直接使用 JSON 文件，也可以使用前端的 Mock 工具，如：mockjs，或者写一个简单的 Node 服务。</p><h3 id="弊端"><a class="header-anchor" href="#弊端" aria-hidden="true">#</a> 弊端</h3><ul><li>直接使用 JSON 很方便，就是 Mock 数据只能是固定的，每次测试都要去修改 JSON 文件，有点麻烦；</li><li>mockjs 也很好用，但是需要在项目中引入 mockjs 的依赖，而且需要学习 mockjs 的语法；</li><li>使用 Node 服务，请求本地接口，则需要启动 Node 服务，每次测试都要启动 Node 服务，有点麻烦。</li></ul><h3 id="ajax-modifier"><a class="header-anchor" href="#ajax-modifier" aria-hidden="true">#</a> Ajax Modifier</h3><p>如果不想这么麻烦，可以尝试一下像 <a href="https://chromewebstore.google.com/detail/nhpjggchkhnlbgdfcbgpdpkifemomkpg" target="_blank" rel="noopener noreferrer">Ajax Modifier</a> 这样的浏览器插件。</p><p><img src="'+d+'" alt="ajax-modifier"></p><p>可以通过图中的 Switch 按钮切换 Mock 请求的开启状态。</p><p>接下来，我们来介绍一下 Chrome 浏览器的 Overrides 功能，功能类似 Ajax Modifier，就像一个浏览器原生的 Mock 工具，让我们可以更方便的实现对请求数据的覆盖。</p><h2 id="overrides-的使用场景"><a class="header-anchor" href="#overrides-的使用场景" aria-hidden="true">#</a> Overrides 的使用场景</h2><h3 id="修改请求头"><a class="header-anchor" href="#修改请求头" aria-hidden="true">#</a> 修改请求头</h3><p>Overrides 功能允许我们在对接口的 header 信息，如下图，我们可以直接点击字段旁边的编辑符号，或者在请求接口上右键-&gt;override headers 就可以实现对请求头的修改。</p><p>之前有次我们后端的 nginx 配置不对，导致返回的 xml 文件的 <code>Content-Type</code> 为 <code>text/xml</code>，而我们期望的是 <code>text/html</code>，直接通过 Overrides 就可以修改返回的 <code>Content-Type</code> 为 <code>text/html</code>。</p><p><img src="/blog/_assets/overrides-xml.106fd168.png" alt="overrides-xml"></p><h3 id="修改请求返回结果"><a class="header-anchor" href="#修改请求返回结果" aria-hidden="true">#</a> 修改请求返回结果</h3><p>可以实现对接口返回数据的修改，不依赖其他工具。</p><h4 id="使用步骤"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h4><ol><li><p>右键选择需要修改的请求</p><p><img src="/blog/_assets/override-content-step1.2fc2dd8f.png" alt="override-content-step1"></p><p>右键后选择<code>Override content</code></p></li><li><p>选择文件夹</p><p>此时会出现如下图提示，需要选择一个文件夹来存储覆盖文件： <img src="/blog/_assets/override-content-step2.888c9ade.png" alt="override-content-step2"></p><p><img src="/blog/_assets/override-content-step3.06de9353.png" alt="override-content-step3"></p><p>在桌面创建一个文件夹，选择完成后会出现提示：“<strong>DevTools 请求获得对 /Users/xxx/Desktop/chrome_devtools/ 的完整访问权限。请确保您不会泄露任何敏感信息</strong>”，点击<code>允许</code>即可。</p><blockquote><p>如果是第一次覆盖请求时需要存储位置，一旦选择完成后，以后就不会出现这一步骤</p></blockquote></li><li><p>修改请求结果</p><p>接着控制台会自动跳转到<code>Sources -&gt; Overrides</code>中，并且会自动选中需要覆盖的请求文件，修改它就可以实现 mock 请求结果。</p><p><img src="/blog/_assets/override-content-step3-source.21c3634a.png" alt="override-content-step3-source"></p><p>比如我们可以修改上面的数量，看看超出屏幕范围后的弹窗位置是否正常显示：</p><p><img src="/blog/_assets/override-content-step3-override.6b466bb8.png" alt="override-content-step3-override"></p></li></ol><h3 id="停用-overrides-的方式"><a class="header-anchor" href="#停用-overrides-的方式" aria-hidden="true">#</a> 停用 Overrides 的方式</h3><p>使用完 mock 之后，需要及时停用，否则会对真实数据产生影响，Overrides 停用的方式有以下几种：</p><ol><li>通过<code>Enable Local Overrides</code>可以启用或停用 mock</li><li>直接点击<code>Clear configuration</code>清空所有本地 mock 数据</li><li>单独删除某一个请求的本地 mock 数据</li></ol><p><img src="/blog/_assets/override-content-delete.b46a1b0b.png" alt="override-content-delete"></p><h2 id="结语"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>Overrides 功能的推出为我们提供了一个更为灵活、便捷的 Mock 工具，让我们在开发的过程中可以不再对后端有比较重的依赖，灵活处理各种数据交互情景。</p>',26)];t.render=function(o,d,i,t,s,l){return e(),r("div",null,a)};export{i as __pageData,t as default};
