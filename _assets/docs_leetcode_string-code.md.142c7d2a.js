import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"跟着卡哥学算法Day 8：字符串常见题目","frontmatter":{"date":"2025-02-19","title":"跟着卡哥学算法Day 8：字符串常见题目","tags":["leetcode"],"describe":"字符串常见题目"},"headers":[{"level":2,"title":"344.反转字符串 🌟","slug":"_344-反转字符串-🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"541. 反转字符串 II 🌟","slug":"_541-反转字符串-ii-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"},{"level":3,"title":"代码","slug":"代码-2"},{"level":2,"title":"替换数字 🌟","slug":"替换数字-🌟"},{"level":3,"title":"题目描述","slug":"题目描述-3"},{"level":3,"title":"解题思路","slug":"解题思路-3"},{"level":3,"title":"代码","slug":"代码-3"}],"relativePath":"docs/leetcode/string-code.md","lastUpdated":1742973716964.3684}';var p={};const o=[a('<p>接下来都通过 🌟 来代表题目难度：</p><ul><li>简单：🌟</li><li>中等：🌟🌟</li><li>困难：🌟🌟🌟</li></ul><h2 id="_344-反转字符串-🌟"><a class="header-anchor" href="#_344-反转字符串-🌟" aria-hidden="true">#</a> 344.反转字符串 🌟</h2><p><a href="https://leetcode.cn/problems/valid-anagram/description/" target="_blank" rel="noopener noreferrer">力扣链接</a></p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例 1: 输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot; 输出: true</p><p>示例 2: 输入: s = &quot;rat&quot;, t = &quot;car&quot; 输出: false</p><p>说明: 你可以假设字符串只包含小写字母。</p><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p><strong>数指针</strong></p><p>左右指针同时向中间移动，并交换左右指针的位置即可</p><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token comment">/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">;</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> s\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_541-反转字符串-ii-🌟"><a class="header-anchor" href="#_541-反转字符串-ii-🌟" aria-hidden="true">#</a> 541. 反转字符串 II 🌟</h2><p><a href="https://leetcode.cn/problems/reverse-string-ii/description/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个字符串 s 和一个整数 k，从字符串开头算起, 每计数至 2k 个字符，就反转这 2k 个字符中的前 k 个字符。</p><p>如果剩余字符少于 k 个，则将剩余字符全部反转。</p><p>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</p><p>示例:</p><div class="language-text"><pre><code>输入: s = &quot;abcdefg&quot;, k = 2\n输出: &quot;bacdfeg&quot;\n</code></pre></div><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><p><strong>依然双指针</strong></p><p>外层循环每次移动 <code>2 * k</code> 位，内层双指针交换前 <code>k</code> 个字符</p><p><strong>右指针超出剩余长度时，右指针指向 length - 1</strong></p><h3 id="代码-2"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseStr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> left <span class="token operator">=</span> i\n    <span class="token keyword">let</span> right <span class="token operator">=</span> i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span>\n      left<span class="token operator">++</span>\n      right<span class="token operator">--</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="替换数字-🌟"><a class="header-anchor" href="#替换数字-🌟" aria-hidden="true">#</a> 替换数字 🌟</h2><h3 id="题目描述-3"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给定一个字符串 s，它包含小写字母和数字字符，请编写一个函数，将字符串中的字母字符保持不变，而将每个数字字符替换为 number。</p><p>例如，对于输入字符串 &quot;a1b2c3&quot;，函数应该将其转换为 &quot;anumberbnumbercnumber&quot;。</p><p>对于输入字符串 &quot;a5b&quot;，函数应该将其转换为 &quot;anumberb&quot;</p><p>输入：一个字符串 s,s 仅包含小写字母和数字字符。</p><p>输出：打印一个新的字符串，其中每个数字字符都被替换为了 number</p><div class="language-text"><pre><code>样例输入：a1b2c3\n\n样例输出：anumberbnumbercnumber\n</code></pre></div><p>数据范围：1 &lt;= s.length &lt; 10000。</p><h3 id="解题思路-3"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h3><ul><li>根据原字符串，得到将数字变为 &quot;number&quot; 后的长度，初始化数组，长度为此时的长度</li><li>双指针：i 新数组末尾，j 原数组末尾</li><li>字符串直接赋值，数字变为 number 后开始<strong>从后往前</strong>填充</li></ul><p><strong>数组填充类问题，预先给数组扩容带填充后的大小，从后往前操作</strong>，好处：</p><ol><li>不用申请新数组</li><li>从前往后添加元素时，都需要将添加元素之后的所有元素向后移动，导致时间复杂度提升为 O(n^2)</li></ol><h3 id="代码-3"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code>\n<span class="token keyword">var</span> <span class="token function-variable function">replaceNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> z <span class="token operator">=</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">isStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> a <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> z<span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    n <span class="token operator">+=</span> <span class="token function">isStr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStr</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;u&quot;</span><span class="token punctuation">;</span>\n      newArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;n&quot;</span><span class="token punctuation">;</span>\n      i <span class="token operator">-=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    index<span class="token operator">--</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> newArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',43)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
