import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"前端COE-文档协同服务卡顿","frontmatter":{"date":"2025-02-26","title":"前端COE-文档协同服务卡顿","tags":["work"],"describe":null},"headers":[{"level":2,"title":"一、现象","slug":"一、现象"},{"level":2,"title":"二、原因","slug":"二、原因"},{"level":2,"title":"三、修正及优化","slug":"三、修正及优化"},{"level":2,"title":"四、改进","slug":"四、改进"}],"relativePath":"docs/work/word-cpu.md","lastUpdated":1743134641515.3196}';var t={};const o=[a('<h2 id="一、现象"><a class="header-anchor" href="#一、现象" aria-hidden="true">#</a> 一、现象</h2><p>打开 One 文档一直处于加载中（现象 cpu 会飙升到 100%+）</p><h2 id="二、原因"><a class="header-anchor" href="#二、原因" aria-hidden="true">#</a> 二、原因</h2><h4 id="排查方向-1：回溯近期变更"><a class="header-anchor" href="#排查方向-1：回溯近期变更" aria-hidden="true">#</a> 排查方向 1：回溯近期变更</h4><p>因为这个服务很久没动过了，所以怀疑是前端代码问题，回溯了近期的需求变更</p><p><strong>结论：与近期前后端代码无关</strong></p><h4 id="排查方向-2：子进程分配逻辑"><a class="header-anchor" href="#排查方向-2：子进程分配逻辑" aria-hidden="true">#</a> 排查方向 2：子进程分配逻辑</h4><p>观察服务器状态，发现有一个子进程的 cpu 占有率明显高于其它，内存区别不大</p><p><img src="https://qtable.oss-cn-beijing.aliyuncs.com/docs/2025/2/28/default_user/11a72aba10fb3bb81ac5780e4ecbf1e4.jpg" alt=""></p><p>之前的子进程分配是按照内存占有率来的，因为 cpu 的占有率无法计算。新连接分配给内存占有最小的子进程，子进程接管之后把自己的内存状态通知给主进程，主进程对进程池重新做排序。</p><p>且这种写法会导致服务重启后，所有重连上来的连接都被分配到了一个进程，因为这时子进程还没来得及更新自己的内存。</p><p>最后通过 process.cpuUsage() 来计算进程消耗的 cpu 时间、基于 setImmediate 算一次事件循环的耗时，来间接的估算 cpu 占有率。并优化了进程池的分配逻辑。</p><p>结果：</p><p><img src="https://qtable.oss-cn-beijing.aliyuncs.com/docs/2025/2/28/default_user/d49b05e3413d87161c1b52aa2d8cc9d8.png" alt=""></p><p>各子进程 cpu 占有率差不多，但卡顿并没有缓解。</p><h4 id="排查方向-3：在测试环境通过-clinic-js-拿一份性能报告，但在测试环境没能复现问题"><a class="header-anchor" href="#排查方向-3：在测试环境通过-clinic-js-拿一份性能报告，但在测试环境没能复现问题" aria-hidden="true">#</a> 排查方向 3：在测试环境通过 clinic.js 拿一份性能报告，但在测试环境没能复现问题</h4><h4 id="排查方向-4：关键节点耗时检查，怀疑是数据问题，因为某个文档导致-cpu-飙升"><a class="header-anchor" href="#排查方向-4：关键节点耗时检查，怀疑是数据问题，因为某个文档导致-cpu-飙升" aria-hidden="true">#</a> 排查方向 4：关键节点耗时检查，怀疑是数据问题，因为某个文档导致 cpu 飙升</h4><p>求助于后端同事，并了解了另一个查看服务状态的指令 top</p><p><img src="https://qtable.oss-cn-beijing.aliyuncs.com/docs/2025/2/28/default_user/133151020f873a6c64a0c8e55cb8b517.png" alt=""></p><div class="language-bash"><pre><code><span class="token function">ps</span> auxw <span class="token operator">|</span> <span class="token function">sort</span> -rn -k3 <span class="token operator">|</span> <span class="token function">head</span> -5\n- 用从进程启动开始到当前时间点所消耗的总CPU时间与系统运行时间的比例来计算的CPU使用率\n<span class="token function">top</span>\n- 最近的一个时间间隔（通常是几秒）内的瞬时CPU使用率\n- ps命令提供的是一个静态快照，且基于ps的计算规则，如果进程已经运行了很长时间，其CPU使用率可能会被稀释\n- top指令会自动更新，可以精确地捕捉到CPU使用的峰值和波动，所以排查这个问题应该使用top而不是ps\n</code></pre></div><p>通过这个指令发现 node 的 cpu 占有率还是很高。怀疑是某个文档导致 cpu 飙升。</p><p>对握手、协议升级、redis 访问、数据下发的耗时加日志</p><p><img src="https://qtable.oss-cn-beijing.aliyuncs.com/docs/2025/2/28/default_user/5f90ef9cad0cb4db7a12bf19d3aacf87.png" alt=""></p><p><img src="https://qtable.oss-cn-beijing.aliyuncs.com/docs/2025/2/28/default_user/8557b2b2fc8691d79fae3211946defcb.png" alt=""></p><p>发现导致 cpu 飙升的文档并不固定，redis 中最大的文档 f861a1acaebb1618a4db3a6983ee2cd315998 也并不一定会导致 cpu 飙升，几乎是随机的。</p><h4 id="排查方向-5：redis-存储量过大，导致-node-在使用时-cpu-过载"><a class="header-anchor" href="#排查方向-5：redis-存储量过大，导致-node-在使用时-cpu-过载" aria-hidden="true">#</a> 排查方向 5：redis 存储量过大，导致 node 在使用时 cpu 过载</h4><p>怀疑是 redis 太大（1.7G）导致 node 在处理时 cpu 逐渐被吃满，为了验证问题，停止 node 服务后，清空了 redis。运行到现在没有再出现过 cpu 过载</p><p><img src="https://qtable.oss-cn-beijing.aliyuncs.com/docs/2025/2/28/default_user/ac8378aab3a4c58d9604a0d11eade283.png" alt=""></p><p><img src="https://qtable.oss-cn-beijing.aliyuncs.com/docs/2025/2/28/default_user/eefde58b05848a2c598466923b725d1f.png" alt=""></p><h2 id="三、修正及优化"><a class="header-anchor" href="#三、修正及优化" aria-hidden="true">#</a> 三、修正及优化</h2><p>以最大的文档为例，redis 中的大小为 200M+，后端接口中的数据量为 405562 字节，0.4M</p><p>Node：根据子进程 cpu 内存情况优化进程池分配</p><div class="language-js"><pre><code><span class="token comment">// cpu使用率计算</span>\n<span class="token keyword">class</span> <span class="token class-name">CpuUsage</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>startUsage <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cpuUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>startUsage <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cpuUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> endUsage <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cpuUsage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startUsage<span class="token punctuation">)</span>\n    <span class="token keyword">let</span> cpuUsage <span class="token operator">=</span>\n      <span class="token punctuation">(</span>endUsage<span class="token punctuation">.</span>user <span class="token operator">+</span> endUsage<span class="token punctuation">.</span>system<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startTime<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> cpuCount <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length\n    cpuUsage <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cpuUsage <span class="token operator">/</span> cpuCount<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> cpuUsage\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 内存使用率计算</span>\nexports<span class="token punctuation">.</span><span class="token function-variable function">getMemoryUsage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> heapTotal<span class="token punctuation">,</span> heapUsed <span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">memoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> memoryUsage <span class="token operator">=</span> heapUsed <span class="token operator">/</span> heapTotal\n  memoryUsage <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>memoryUsage <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> memoryUsage\n<span class="token punctuation">}</span>\n</code></pre></div><p>Node：在房间销毁时清空 redis 数据，且<strong>在清空 redis 数据时，禁止新连接握手</strong></p><div class="language-js unbindState: (docName, minSize, bigSize) =&gt; {"><pre><code>    rdb<span class="token operator">?.</span><span class="token function">closeDoc</span><span class="token punctuation">(</span>docName<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>minSize<span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>bigSize <span class="token operator">/</span> minSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;清除rdb缓存:&#39;</span><span class="token punctuation">,</span> docName<span class="token punctuation">,</span> <span class="token string">&#39;, bigSize:&#39;</span><span class="token punctuation">,</span> bigSize<span class="token punctuation">,</span> <span class="token string">&#39;, minSize:&#39;</span><span class="token punctuation">,</span> minSize<span class="token punctuation">)</span>\n    <span class="token function">setCleaningDoc</span><span class="token punctuation">(</span>docName<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> rdb\n      <span class="token operator">?.</span><span class="token function">clearDocument</span><span class="token punctuation">(</span>docName<span class="token punctuation">)</span>\n      <span class="token operator">?.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token operator">?.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;清除完成:&#39;</span><span class="token punctuation">,</span> docName<span class="token punctuation">)</span>\n        <span class="token function">delCleaningDoc</span><span class="token punctuation">(</span>docName<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token comment">/**\n * 连接的是否为清库中的文档\n */</span>\nexports<span class="token punctuation">.</span><span class="token function-variable function">checkIsConnectCleaningDoc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> roomid <span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>query\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cleaningDoc<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>roomid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    request<span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 在清空redis数据时，禁止新连接握手</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> request<span class="token punctuation">,</span> head <span class="token punctuation">}</span> <span class="token operator">=</span> message\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> request<span class="token punctuation">.</span>headers <span class="token operator">=</span> message<span class="token punctuation">.</span>headers\n      <span class="token comment">// const timeDiff = new TimeDiff(&#39;升级协议|&#39; + request.query.roomid + &#39;|&#39; + request.query.uuid)</span>\n      request<span class="token punctuation">.</span>socket <span class="token operator">=</span> socket\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkIsConnectResumingDoc</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkIsConnectCleaningDoc</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n      wss<span class="token punctuation">.</span><span class="token function">handleUpgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkIsHistoryResuming</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> ws<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">checkLocalVersion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> ws<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n        <span class="token comment">// logger.info(timeDiff.tips, timeDiff.diff(), timeDiff.hrtime)</span>\n        wss<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> ws<span class="token punctuation">,</span> request<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token function">syncProcessUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>前端：在 Socket 房间关闭且没有等提交的变更时，尽量清空 indexdb</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">recordLastEditPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> eleScrollWarp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.editor-container&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>editor<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token operator">!</span>eleScrollWarp<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">doc_id</span><span class="token operator">:</span> doc<span class="token punctuation">.</span>value<span class="token punctuation">.</span>doc_id<span class="token punctuation">,</span> <span class="token literal-property property">scrollTop</span><span class="token operator">:</span> eleScrollWarp<span class="token punctuation">.</span>scrollTop <span class="token punctuation">}</span>\n  storageLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>storageLocal<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">.</span>LastEditorPosition<span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n  editor<span class="token punctuation">.</span>value<span class="token operator">?.</span>extensionStorage<span class="token operator">?.</span>realtimeExtension<span class="token operator">?.</span>ySocket<span class="token operator">?.</span>provider<span class="token operator">?.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> recordLastEditPosition<span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">YWebsocket</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> synced <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>provider<span class="token punctuation">.</span>synced\n    <span class="token keyword">this</span><span class="token punctuation">.</span>provider<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>provider<span class="token punctuation">.</span>awareness<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>provider <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token function">clearNativeEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>synced <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isSyncing<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexeddb<span class="token punctuation">.</span><span class="token function">clearData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>前端：失活的页面不要反复握手，以减少连接数（有风险）</p><div class="language-js"><pre><code>provider<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection-close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> code<span class="token punctuation">,</span> reason <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>defineErrCodes<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 其它异常掉线</span>\n    provider<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;synced&#39;</span><span class="token punctuation">,</span> otherOfflineCb<span class="token punctuation">)</span>\n    provider<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;synced&#39;</span><span class="token punctuation">,</span> otherOfflineCb<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>\n      <span class="token string">&#39;其它异常掉线&#39;</span><span class="token punctuation">,</span>\n      document<span class="token punctuation">.</span>visibilityState<span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">&#39;hidden&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      provider<span class="token punctuation">.</span>shouldConnect <span class="token operator">=</span> <span class="token boolean">false</span>\n      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;visibilitychange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> provider<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="四、改进"><a class="header-anchor" href="#四、改进" aria-hidden="true">#</a> 四、改进</h2><p>梳理代码发现在 2 年前写过未处理的类似代码，但可能由于后期的业务需求调整未能继续完善</p><p><img src="https://qtable.oss-cn-beijing.aliyuncs.com/docs/2025/2/28/default_user/4db6d9d82f8a244880a224054e50ec13.png" alt=""></p><p>1、做好 log 日志各重要环节节点输出，以便排查问题</p><p>2、对可疑的逻辑和未完成的优化做好记录</p>',44)];t.render=function(a,p,t,c,e,u){return n(),s("div",null,o)};export{p as __pageData,t as default};
