import{f as s,g as n,J as a}from"./common-03e46d7f.js";const e='{"title":"利用Swagger生成express接口文档","frontmatter":{"date":"2024-06-21","title":"利用Swagger生成express接口文档","tags":["node"],"describe":"利用Swagger生成express接口文档"},"headers":[{"level":2,"title":"步骤","slug":"步骤"},{"level":3,"title":"1. 安装 npm 包","slug":"_1-安装-npm-包"},{"level":3,"title":"2. Swagger 配置","slug":"_2-swagger-配置"},{"level":3,"title":"3. 在 app.js 引入 swagger","slug":"_3-在-app-js-引入-swagger"},{"level":3,"title":"4. 在 router 中配置接口文档信息","slug":"_4-在-router-中配置接口文档信息"}],"relativePath":"docs/node/express-swigger.md","lastUpdated":1742290670539.4673}';var p={};const t=[a('<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>主要利用这两个包：</p><ul><li><a href="https://github.com/Surnet/swagger-jsdoc" target="_blank" rel="noopener noreferrer">swagger-jsdoc</a>：可以将注释中的 API 文档生成 Swagger 格式的文档</li><li><a href="https://github.com/scottie1984/swagger-ui-express" target="_blank" rel="noopener noreferrer">swagger-ui-express</a>：在浏览器中展示接口文档</li></ul><h2 id="步骤"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h2><h3 id="_1-安装-npm-包"><a class="header-anchor" href="#_1-安装-npm-包" aria-hidden="true">#</a> 1. 安装 npm 包</h3><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> swagger-jsdoc swagger-ui-express\n</code></pre></div><h3 id="_2-swagger-配置"><a class="header-anchor" href="#_2-swagger-配置" aria-hidden="true">#</a> 2. Swagger 配置</h3><p>在项目根目录创建 <code>swagger/swaggerDocs.js</code> 配置文件，用于定义 swagger 配置：</p><div class="language-js"><pre><code><span class="token keyword">import</span> swaggerJsdoc <span class="token keyword">from</span> <span class="token string">&#39;swagger-jsdoc&#39;</span>\n\n<span class="token keyword">const</span> swaggerOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">definition</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">openapi</span><span class="token operator">:</span> <span class="token string">&#39;3.0.0&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Express API with Swagger&#39;</span><span class="token punctuation">,</span> <span class="token comment">//\ttitle: API 的标题</span>\n      <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">,</span> <span class="token comment">// version: API 的版本号</span>\n      <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;A simple CRUD API application with Express and Swagger&#39;</span><span class="token punctuation">,</span> <span class="token comment">// description: API 的描述信息</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">servers</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">apis</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./routes/**/*.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使用了 &#39;./routes/**/*.js&#39;，这会匹配 routes 文件夹及其所有子文件夹中的所有 .js 文件</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> swaggerDocs <span class="token operator">=</span> <span class="token function">swaggerJsdoc</span><span class="token punctuation">(</span>swaggerOptions<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> swaggerDocs\n</code></pre></div><p>通过这些配置，swagger-jsdoc 将扫描指定的路由文件，解析其中的 Swagger 注释，并生成对应的 Swagger 文档。这些文档可以通过 swagger-ui-express 在浏览器中进行可视化展示。</p><h3 id="_3-在-app-js-引入-swagger"><a class="header-anchor" href="#_3-在-app-js-引入-swagger" aria-hidden="true">#</a> 3. 在 app.js 引入 swagger</h3><div class="language-js"><pre><code><span class="token comment">// app.js</span>\n<span class="token operator">...</span>\n<span class="token keyword">import</span> swaggerUi <span class="token keyword">from</span> <span class="token string">&#39;swagger-ui-express&#39;</span>\n<span class="token keyword">import</span> swaggerDocs <span class="token keyword">from</span> <span class="token string">&#39;./swagger/swaggerConfig&#39;</span>\n\n\n<span class="token comment">// 使用 Swagger</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/api-docs&#39;</span><span class="token punctuation">,</span> swaggerUi<span class="token punctuation">.</span>serve<span class="token punctuation">,</span> swaggerUi<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>swaggerDocs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n</code></pre></div><p>此时访问 <code>localhost:3000/api-docs</code> 就可以看到 Swagger 页面（还没有配置，所以接口为空）</p><p><img src="/blog/_assets/express-swagger-blank.eac7e389.png" alt="express-swagger-blank"></p><h3 id="_4-在-router-中配置接口文档信息"><a class="header-anchor" href="#_4-在-router-中配置接口文档信息" aria-hidden="true">#</a> 4. 在 router 中配置接口文档信息</h3><p>在路由文件中添加 Swagger 注释</p><p>Swagger 注释是一种在代码中嵌入文档信息的方式，用于描述 API 的各个方面，包括路径、方法、参数、响应等。Swagger 通过解析这些注释来生成 API 文档，因此注释的格式和规则非常重要。下面是 Swagger 注释的一些基本规则和常用标记：</p><p>基本规则</p><pre><code>1. 基本结构：\n•\tSwagger 注释以 @swagger 或 @openapi 开头，后面紧跟着 YAML 或 JSON 格式的文档信息。\n2. 路径和方法：\n•\t使用 @swagger 标记来描述 API 路径和方法。例如：\n</code></pre><div class="language-js"><pre><code><span class="token comment">/**\n * @swagger\n * /users:\n *   get:\n *     summary: 获取所有用户\n *     description: 返回所有用户列表\n */</span>\n</code></pre></div><ol start="3"><li>参数和响应： • 描述请求参数和响应体的结构和类型。可以使用 parameters 和 responses 来定义。</li></ol><div class="language-js"><pre><code><span class="token comment">/**\n * @swagger\n * /users:\n *   get:\n *     summary: 获取所有用户\n *     parameters:\n *       - name: id\n *         in: query\n *         required: true\n *         type: string\n *         description: 用户ID\n *     responses:\n *       &#39;200&#39;:\n *         description: 成功获取用户列表\n *         schema:\n *           type: array\n *           items:\n *             $ref: &#39;#/definitions/User&#39;\n */</span>\n</code></pre></div><pre><code>5.\t其他常用标记：\n•\t@summary：API 摘要或简要描述。\n•\t@description：详细描述 API 的作用和功能。\n•\t@param：描述函数或方法的参数。\n•\t@returns 或 @return：描述函数或方法的返回值。\n•\t@deprecated：标记 API 已弃用。</code></pre>',23)];p.render=function(a,e,p,r,o,c){return s(),n("div",null,t)};export{e as __pageData,p as default};
