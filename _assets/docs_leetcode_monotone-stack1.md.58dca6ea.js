import{f as n,g as s,J as a}from"./common-03e46d7f.js";const p='{"title":"跟着卡哥学算法Day 49：单调栈 part2","frontmatter":{"date":"2025-04-01","title":"跟着卡哥学算法Day 49：单调栈 part2","tags":["leetcode"],"describe":"单调栈 part2"},"headers":[{"level":2,"title":"42. 接雨水 🌟🌟","slug":"_42-接雨水-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":2,"title":"84.柱状图中最大的矩形 🌟🌟","slug":"_84-柱状图中最大的矩形-🌟🌟"},{"level":3,"title":"题目描述","slug":"题目描述-2"},{"level":3,"title":"解题思路","slug":"解题思路-2"}],"relativePath":"docs/leetcode/monotone-stack1.md","lastUpdated":1743558905501.9438}';var t={};const o=[a('<h2 id="_42-接雨水-🌟🌟"><a class="header-anchor" href="#_42-接雨水-🌟🌟" aria-hidden="true">#</a> 42. 接雨水 🌟🌟</h2><p><a href="https://leetcode.cn/problems/trapping-rain-water/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p>示例 1：</p><p><img src="/blog/_assets/monotone-stack1.02b6212d.png" alt="alt text"></p><ul><li>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</li><li>输出：6</li><li>解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。</li></ul><p>示例 2：</p><ul><li>输入：height = [4,2,0,3,2,5]</li><li>输出：9</li></ul><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>对每个柱子 i，找出其左侧最高柱子 leftMax 和右侧最高柱子 rightMax，当前柱子积水量取决于其左右两边最高柱子的较小值减去当前柱子的高度</p><div class="language-js"><pre><code>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n</code></pre></div><h4 id="暴力法"><a class="header-anchor" href="#暴力法" aria-hidden="true">#</a> 暴力法</h4><p>遍历每个位置 i，找到左边最大值和右边最大值，计算每个位置的积水量，累加总和。</p><ul><li>左边最大值：<strong>从 0 到 i-1 中的最大值</strong></li><li>右边最大值：<strong>从 i+1 到末尾的最大值</strong></li><li>计算每个位置的积水量</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> leftMax <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> rightMax <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      leftMax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      rightMax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rightMax<span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> total <span class="token operator">+=</span> h <span class="token comment">// 注意只有h大于零的时候，在统计到总和中</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> total\n<span class="token punctuation">}</span>\n</code></pre></div><p>暴力法：O(n^2)</p><h4 id="双指针优化"><a class="header-anchor" href="#双指针优化" aria-hidden="true">#</a> 双指针优化</h4><ul><li><p>是对暴力法的优化，暴力法需要得到柱子 i 两边的最高高度 leftMax 和 rightMax</p></li><li><p>maxLeft 数组用于记录每个柱子 i 左边的最高高度</p><p>从左到右遍历，每个柱子的左边最大高度是：</p><ul><li>当前柱子的高度 height[i] 和</li><li>它左边柱子的最大高度 maxLeft[i - 1] 的较大值</li></ul></li><li><p>maxRight 数组用于记录每个柱子 i 右边的最高高度</p><p>从右到左遍历，每个柱子的右边最大高度是：</p><ul><li>当前柱子的高度 height[i] 和</li><li>它右边柱子的最大高度 maxRight[i + 1] 的较大值</li></ul></li></ul><div class="language-js"><pre><code><span class="token comment">//双指针</span>\n<span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment">// 如果柱子数量小于等于2，无法形成积水，直接返回0</span>\n\n  <span class="token keyword">const</span> maxLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 用于记录每个柱子左边的最大高度</span>\n  <span class="token keyword">const</span> maxRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 用于记录每个柱子右边的最大高度</span>\n\n  <span class="token comment">// 记录每个柱子左边柱子的最大高度</span>\n  maxLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 第一个柱子的左边最大高度就是它自己</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    maxLeft<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxLeft<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 当前柱子的左边最大高度是它左边柱子的最大高度和它自身高度的较大值</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 记录每个柱子右边柱子的最大高度</span>\n  maxRight<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 最后一个柱子的右边最大高度就是它自己</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    maxRight<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxRight<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 当前柱子的右边最大高度是它右边柱子的最大高度和它自身高度的较大值</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 求和</span>\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 用于记录总的积水量</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> count <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxLeft<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxRight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 当前柱子上方的积水量是左右两边最大高度的较小值减去当前柱子的高度</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> count <span class="token comment">// 如果积水量大于0，则累加到总积水量中</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> sum <span class="token comment">// 返回总积水量</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="单调栈"><a class="header-anchor" href="#单调栈" aria-hidden="true">#</a> 单调栈</h4><ol><li><p>与暴力法不同，单调栈是按照行来计算积水量</p></li><li><p>栈头到栈尾是递增的</p><ul><li>一旦发现添加的柱子高度大于栈头元素，则出现凹槽</li><li>此时栈头元素就是凹槽的底部，栈头第二个元素就是凹槽的左柱子，当前元素就是凹槽的右柱子</li></ul></li><li><p>遇到相同高度的柱子，则弹出旧的，加入新的，因为要求宽度的时候，需要有最右边的柱子来计算</p></li></ol><p>处理逻辑：</p><ul><li><p>当前遍历柱子高度小于栈顶元素高度 height[i] &lt; height[stack.top()]</p><p>当前元素入栈</p></li><li><p>当前遍历柱子高度等于栈顶元素高度 height[i] == height[stack.top()]</p><ul><li>需要先将旧元素出栈</li><li>新元素再入栈</li></ul></li><li><p>当前遍历柱子高度大于栈顶元素高度 height[i] &gt; height[stack.top()]</p><p>出现凹槽 <img src="/blog/_assets/monotone-stack11.d875579d.png" alt="alt text"></p><ul><li>弹出栈顶元素，弹出的元素就是凹槽的底部</li><li>弹出栈顶第二个元素，弹出的元素就是凹槽的左边柱子</li><li>当前元素就是凹槽的右边柱子</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> min <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 弹出栈顶元素，凹槽底部</span>\n<span class="token keyword">const</span> left <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 栈顶第二个元素，凹槽左边柱子</span>\n<span class="token comment">// 当前槽的高度</span>\n<span class="token keyword">const</span> h <span class="token operator">=</span>\n  Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>\n    height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment">// 右边柱子和栈顶元素的较小值</span>\n  <span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>\n<span class="token comment">// 当前槽的宽度 = 凹槽右边的下标 - 凹槽左边的下标 - 1</span>\n<span class="token keyword">const</span> w <span class="token operator">=</span> i <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span>\nsum <span class="token operator">=</span> h <span class="token operator">*</span> w\n</code></pre></div></li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> mid <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> left <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n        <span class="token keyword">const</span> h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>\n        <span class="token keyword">const</span> w <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 注意减一，只求中间宽度</span>\n        total <span class="token operator">+=</span> h <span class="token operator">*</span> w\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> total\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_84-柱状图中最大的矩形-🌟🌟"><a class="header-anchor" href="#_84-柱状图中最大的矩形-🌟🌟" aria-hidden="true">#</a> 84.柱状图中最大的矩形 🌟🌟</h2><p><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener noreferrer">力扣链接</a> 🌟🌟</p><h3 id="题目描述-2"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><img src="/blog/_assets/monotone-stack12.9e1b81ba.png" alt="alt text"><img src="/blog/_assets/monotone-stack13.111ac494.png" alt="alt text"></p><ul><li>1 &lt;= heights.length &lt;=10^5</li><li>0 &lt;= heights[i] &lt;= 10^4</li></ul><h3 id="解题思路-2"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h3><h4 id="暴力法-2"><a class="header-anchor" href="#暴力法-2" aria-hidden="true">#</a> 暴力法</h4><p>对每个柱子 i，向左右扩展找到第一个比它小的左边界 left 和右边界 right，当前柱子能形成的最大矩形面积为</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">largestRectangleArea</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">heights</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> heights<span class="token punctuation">.</span>length\n\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> left <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">--</span>\n    <span class="token keyword">let</span> right <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">++</span>\n\n    <span class="token keyword">const</span> w <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span>\n    sum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> w<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> sum\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="双指针优化-2"><a class="header-anchor" href="#双指针优化-2" aria-hidden="true">#</a> 双指针优化</h4><p>预处理每个柱子的左边界 left 和右边界 right，利用跳跃指针快速找到边界，避免重复遍历</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">largestRectangleAreaOptimized</span><span class="token punctuation">(</span><span class="token parameter">heights</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> heights<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n\n  <span class="token comment">// 预处理左边界</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> p <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> p <span class="token operator">=</span> left<span class="token punctuation">[</span>p<span class="token punctuation">]</span>\n    left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 预处理右边界</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> p <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> p <span class="token operator">=</span> right<span class="token punctuation">[</span>p<span class="token punctuation">]</span>\n    right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 计算最大面积</span>\n  <span class="token keyword">let</span> maxArea <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> width <span class="token operator">=</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>\n    maxArea <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxArea<span class="token punctuation">,</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> width<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> maxArea\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="单调栈-2"><a class="header-anchor" href="#单调栈-2" aria-hidden="true">#</a> 单调栈</h4><ul><li>区别：单调递减栈（栈头到栈底的顺序从大到小）</li><li>遇到比栈顶小的柱子时，弹出栈顶并计算以该高度为高的矩形面积，左边界为新的栈顶，右边界为当前索引</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">largestRectangleAreaMonotonicStack</span><span class="token punctuation">(</span><span class="token parameter">heights</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>heights<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 添加哨兵简化代码</span>\n  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> maxArea <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> left <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n      <span class="token keyword">const</span> width <span class="token operator">=</span> i <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span>\n      maxArea <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxArea<span class="token punctuation">,</span> heights<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">*</span> width<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> maxArea\n<span class="token punctuation">}</span>\n</code></pre></div>',42)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
