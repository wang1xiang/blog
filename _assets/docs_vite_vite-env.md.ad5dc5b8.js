import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":".env文件的作用是什么","frontmatter":{"date":"2023-04-10","title":".env文件的作用是什么","tags":["vite"],"describe":null},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"准备工作","slug":"准备工作"},{"level":3,"title":"dotenv","slug":"dotenv"}],"relativePath":"docs/vite/vite-env.md","lastUpdated":1742205571695.041}';var e={};const p=[a('<blockquote><p>本文参加了由<a href="https://lxchuan12.gitee.io/" target="_blank" rel="noopener noreferrer">公众号@若川视野</a>发起的每周源码共读活动，<a href="https://juejin.cn/post/7079706017579139102" target="_blank" rel="noopener noreferrer">点击了解详情一起参与</a>。 这是源码共读的第 40 期，链接：<a href="https://juejin.cn/post/7174045668187570206" target="_blank" rel="noopener noreferrer">vite 是如何解析用户配置的 .env 的</a>。</p></blockquote><h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>看下你的项目下是否</p><p><img src="/blog/_assets/create-react-app-env.863fbffd.png" alt="create-react-app-env.png"></p><p><img src="/blog/_assets/vue-cli-env.11b0f85e.png" alt="vue-cli-env.png"></p><p>你会很开心的将需要的变量添加到这里，然后通过 <a href="http://process.env.XXX" target="_blank" rel="noopener noreferrer">process.env.XXX</a> 来使用它。 但是你知道它们是怎么被关联到 process.env 到项目中的吗？下面我们来一起揭秘一下</p><h2 id="准备工作"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><p>首先需要了解下 dotenv，功劳都是它的 😎。</p><h3 id="dotenv"><a class="header-anchor" href="#dotenv" aria-hidden="true">#</a> dotenv</h3><p><a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener noreferrer">dotenv 是什么</a>：Dotenv 是一个零依赖模块，它将环境变量从 .env 文件加载到 process.env 中。</p><p>我们可以初始化一个 npm 项目，按照<a href="https://github.com/motdotla/dotenv#-install" target="_blank" rel="noopener noreferrer">步骤</a>使用 dotenv 来创建一个 demo。</p><ul><li><p>初始化</p><div class="language-bash"><pre><code><span class="token function">mkdir</span> dotenv-test\n<span class="token comment"># 初始化npm项目</span>\n<span class="token function">pnpm</span> init <span class="token operator">&amp;</span> <span class="token function">pnpm</span> i dotenv\n<span class="token comment"># 创建.env文件和index.ts文件</span>\n<span class="token function">touch</span> .evn <span class="token operator">&amp;</span> <span class="token function">touch</span> index.ts\n</code></pre></div></li><li><p>在.env 中添加变量</p><div class="language-bash"><pre><code><span class="token comment"># 测试变量</span>\n<span class="token assign-left variable">APP_NAME</span><span class="token operator">=</span><span class="token string">&quot;dotenv-test&quot;</span>\n<span class="token assign-left variable">APP_PKG_MANAGER</span><span class="token operator">=</span><span class="token string">&quot;pnpm&quot;</span>\n\n<span class="token comment"># 测试多行变量</span>\n<span class="token assign-left variable">PRIVATE_KEY</span><span class="token operator">=</span><span class="token string">&quot;-----BEGIN RSA PRIVATE KEY-----\n...\nKh9NV...\n...\n-----END RSA PRIVATE KEY-----&quot;</span>\n\n<span class="token comment"># 也可以使用\\n换行符一行输入</span>\n<span class="token assign-left variable">PRIVATE_KEY_CHARACTER</span><span class="token operator">=</span><span class="token string">&quot;-----BEGIN RSA PRIVATE KEY-----<span class="token entity" title="\\n">\\n</span>...<span class="token entity" title="\\n">\\n</span>Kh9NV...<span class="token entity" title="\\n">\\n</span>...<span class="token entity" title="\\n">\\n</span>-----END RSA PRIVATE KEY-----&quot;</span>\n</code></pre></div></li><li><p>index.ts 中输出测试</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dotenv <span class="token keyword">from</span> <span class="token string">&#39;dotenv&#39;</span>\ndotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Current project name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">APP_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The package manager used is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">APP_PKG_MANAGER</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;多行输出：&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;使用\\\\n字符多行输出：&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PRIVATE_KEY_CHARACTER</span><span class="token punctuation">)</span>\n</code></pre></div><p>执行<code>npx esno index.ts</code>，可以看到输出结果如下： <img src="/blog/_assets/dotenv-demo1.f7f62833.png" alt="dotenv-demo1.png"></p><blockquote><p>dotenv.config() 会自动读取当前路径下.env 文件，解析内容，将其分配给 process.env，并返回一个对象，该对象带有包含加载内容的已解析键，如果失败则返回错误键。同时包含<a href="https://github.com/motdotla/dotenv#options" target="_blank" rel="noopener noreferrer">一些配置</a>可以自定义配置。</p></blockquote></li></ul><p>如果需要使用变量时，就需要<a href="https://github.com/motdotla/dotenv-expand" target="_blank" rel="noopener noreferrer">dotenv-expand</a>的帮助。</p><p>我们已经了解了 dotenv 的使用方式，我们通过读源码的方式来揭秘一下它的实现原理。</p><div class="language-bash"><pre><code><span class="token comment"># 直接克隆川哥的项目</span>\n<span class="token function">git</span> clone https://github.com/lxchuan12/dotenv-analysis.git\n<span class="token builtin class-name">cd</span> dotenv-analysis/dotenv <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span> i\n<span class="token comment"># VSCode 直接打开当前项目</span>\ncode <span class="token builtin class-name">.</span>\n<span class="token comment"># 我写的例子都在 examples 这个文件夹中，可以启动服务本地查看调试</span>\n<span class="token comment"># 在 dotenv-analysis 目录下</span>\n<span class="token function">node</span> examples/index.js\n</code></pre></div>',15)];e.render=function(a,t,e,o,c,l){return n(),s("div",null,p)};export{t as __pageData,e as default};
