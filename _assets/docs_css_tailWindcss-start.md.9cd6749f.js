import{f as a,g as n,J as s}from"./common-03e46d7f.js";const t='{"title":"Windi CSS 上手","frontmatter":{"date":"2024-05-13","title":"Windi CSS 上手","tags":["css"],"describe":"Windi CSS 上手"},"headers":[{"level":2,"title":"优点","slug":"优点"},{"level":2,"title":"使用","slug":"使用"},{"level":3,"title":"安装包","slug":"安装包"},{"level":3,"title":"vite 配置修改","slug":"vite-配置修改"},{"level":3,"title":"main.ts 入口文件引入","slug":"main-ts-入口文件引入"},{"level":3,"title":"windi css 配置文件","slug":"windi-css-配置文件"},{"level":3,"title":"属性配置解释","slug":"属性配置解释"},{"level":2,"title":"Tailwind css","slug":"tailwind-css"},{"level":2,"title":"安装","slug":"安装"},{"level":2,"title":"配置","slug":"配置"},{"level":2,"title":"基本使用","slug":"基本使用"},{"level":2,"title":"响应式","slug":"响应式"}],"relativePath":"docs/css/tailWindcss-start.md","lastUpdated":1742523053117.6375}';var p={};const e=[s('<p><a href="https://cn.windicss.org/" target="_blank" rel="noopener noreferrer">官网</a></p><p>因为项目是在 vue+vite 项目使用，所以选择 Windi CSS 是<strong>按需供应的 TailWind 替代方案</strong>，</p><h2 id="优点"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><p>⚡️ 极速 - 在 Vite 中比 Tailwind 快 20~100 倍 🧩 按需使用 CSS 工具类（与 Tailwind CSS v2 完全兼容） 📦 按需使用原生元素样式重置（预检样式） 🔥 模块热替换 (HMR) 🍃 从 tailwind.config.js 加载配置 🤝 与框架无关 - Vue、 React、Svelte and vanilla！ 📄 CSS @apply / @screen 指令转换（也适用于 Vue SFC 的<code>&lt;style&gt;</code> ） 🎳 支持变量组 - 如 bg-gray-200 hover:(bg-gray-100 text-red-300) 😎 &quot;Devtools 设计&quot; - 支持传统的 Tailwind 运行方式</p><h2 id="使用"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><h3 id="安装包"><a class="header-anchor" href="#安装包" aria-hidden="true">#</a> 安装包</h3><div class="language-bash"><pre><code><span class="token function">npm</span> i -D vite-plugin-windicss windicss\n</code></pre></div><h3 id="vite-配置修改"><a class="header-anchor" href="#vite-配置修改" aria-hidden="true">#</a> vite 配置修改</h3><div class="language-js"><pre><code><span class="token keyword">import</span> WindiCSS <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-windicss&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">WindiCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="main-ts-入口文件引入"><a class="header-anchor" href="#main-ts-入口文件引入" aria-hidden="true">#</a> main.ts 入口文件引入</h3><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;virtual:windi.css&#39;</span>\n</code></pre></div><h3 id="windi-css-配置文件"><a class="header-anchor" href="#windi-css-配置文件" aria-hidden="true">#</a> windi css 配置文件</h3><p>同时兼容 <code>windi.config.js</code> 或 <code>tailwind.config.js</code></p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;windicss/helpers&#39;</span>\n<span class="token keyword">import</span> formsPlugin <span class="token keyword">from</span> <span class="token string">&#39;windicss/plugin/forms&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">preflight</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">darkMode</span><span class="token operator">:</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">safelist</span><span class="token operator">:</span> <span class="token string">&#39;p-3 p-4 p-5&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">teal</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token number">100</span><span class="token operator">:</span> <span class="token string">&#39;#096&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">attributify</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;w:&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">hstack</span><span class="token operator">:</span> <span class="token string">&#39;flex items-center&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">vstack</span><span class="token operator">:</span> <span class="token string">&#39;flex flex-col&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">&#39;w-6 h-6 fill-current&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">&#39;text-red&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;app-border&#39;</span><span class="token operator">:</span> <span class="token string">&#39;border-gray-200 dark:border-dark-300&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>formsPlugin<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="属性配置解释"><a class="header-anchor" href="#属性配置解释" aria-hidden="true">#</a> 属性配置解释</h3><h4 id="preflight-预检样式"><a class="header-anchor" href="#preflight-预检样式" aria-hidden="true">#</a> preflight 预检样式</h4><p>Windi CSS 中的预检样式实际上是指一组默认的全局样式，用于在没有明确样式声明的情况下提供一些基本的全局样式设置，以确保一致性和一致的样式基础。这包括了重置默认的边距、填充、字体等，以及一些其他的全局样式设置。默认为 true</p><h4 id="attributify：开启属性模式"><a class="header-anchor" href="#attributify：开启属性模式" aria-hidden="true">#</a> attributify：开启属性模式</h4><p>先看下传统 tailwind 使用的语法，即所有实用程序和变体都写在类中</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-blue-400 hover:bg-blue-500 text-sm text-white font-mono font-light py-2 px-4 rounded border-2 border-blue-200 dark:bg-blue-500 dark:hover:bg-blue-600<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span>\n  Button\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>如果使用 Windi css 的属性模式，则可以将类拆分为多个属性，如下：</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n  <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blue-400 hover:blue-500 dark:blue-500 dark:hover:blue-600<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sm white<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">font</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mono light<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>y-2 x-4<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2 rounded blue-200<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span>\n  Button\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>如果担心命名冲突，可以通过以下方式给属性模式添加自定义前缀：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">attributify</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;w:&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n  <span class="token attr-name"><span class="token namespace">w:</span>bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blue-400 hover:blue-500 dark:blue-500 dark:hover:blue-600<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">w:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sm white<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">w:</span>font</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mono light<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">w:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>y-2 x-4<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">w:</span>border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2 rounded blue-200<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span>\n  Button\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h4 id="alias-别名配置"><a class="header-anchor" href="#alias-别名配置" aria-hidden="true">#</a> alias 别名配置</h4><p>请注意，在使用别名时需要加上前缀 * ，例如：</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*hstack<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h4 id="theme-配置"><a class="header-anchor" href="#theme-配置" aria-hidden="true">#</a> theme 配置</h4><p>theme 是 tailwind css 的配置，可以为项目自定义默认主题。<a href="https://www.tailwindcss.cn/docs/theme" target="_blank" rel="noopener noreferrer">theme</a></p><h4 id="dark-mode-深色模式"><a class="header-anchor" href="#dark-mode-深色模式" aria-hidden="true">#</a> dark mode 深色模式</h4><p><a href="https://www.tailwindcss.cn/docs/dark-mode#toggling-dark-mode-manually" target="_blank" rel="noopener noreferrer">dark-mode</a></p><h4 id="plugins"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> plugins</h4><p><a href="https://www.tailwindcss.cn/docs/plugins" target="_blank" rel="noopener noreferrer">plugins</a></p><h2 id="tailwind-css"><a class="header-anchor" href="#tailwind-css" aria-hidden="true">#</a> Tailwind css</h2><p>根据<a href="https://www.tailwindcss.cn/docs/installation" target="_blank" rel="noopener noreferrer">官方文档</a></p><h2 id="安装"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> -D tailwindcss\n</code></pre></div><h2 id="配置"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><div class="language-bash"><pre><code><span class="token comment"># 安装完成后</span>\nnpx tailwindcss init\n</code></pre></div><p>执行完成后，在项目根目录下会生成一个<code>tailwind.config.js</code>文件，里面有配置项，可以根据自己的需求进行修改。</p><h2 id="基本使用"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><div class="language-js"><pre><code>w<span class="token operator">-</span>full\nw<span class="token operator">-</span>xxpx\np<span class="token operator">-</span>xxpx\npt<span class="token operator">-</span>xxpx\nbg<span class="token operator">-</span>white\ntext<span class="token operator">-</span>16px\ntext<span class="token operator">-</span><span class="token punctuation">[</span>#<span class="token number">000</span><span class="token punctuation">]</span>\n</code></pre></div><h2 id="响应式"><a class="header-anchor" href="#响应式" aria-hidden="true">#</a> 响应式</h2><p>tailwind css 响应式提供了 5 个断点：</p><table><thead><tr><th>断点前缀</th><th>最小宽度</th><th>转为 css 媒体查询</th></tr></thead><tbody><tr><td><code>sm</code></td><td>640px</td><td><code>@media (min-width: 640px) { ... }</code></td></tr><tr><td><code>md</code></td><td>768px</td><td><code>@media (min-width: 768px) { ... }</code></td></tr><tr><td><code>lg</code></td><td>1024px</td><td><code>@media (min-width: 1024px) { ... }</code></td></tr><tr><td><code>xl</code></td><td>1280px</td><td><code>@media (min-width: 1280px) { ... }</code></td></tr><tr><td><code>2xl</code></td><td>1536px</td><td><code>@media (min-width: 1536px) { ... }</code></td></tr></tbody></table><p>使用起来很方便。</p><p>比如以下布局，在 pc 上需要左右展示:</p><p><img src="/blog/_assets/tailwindcss-flex-row.68c125e2.png" alt="tailwindcss-flex-row"></p><p>在移动端需要上下展示:</p><p><img src="/blog/_assets/tailwindcss-flex-col.4ac15560.png" alt="tailwindcss-flex-col"></p><p>使用 tailwindcss 可以这样设置：</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex justify-center flex-col sm:flex-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>意思是在屏幕宽度小于 640px 时，使用 flex-col，大于 640px 时将 flex-col 改为 flex-row，所以在设置响应式布局时，需要先设置默认布局，然后再根据不同屏幕宽度设置不同的布局。</p>',54)];p.render=function(s,t,p,o,l,c){return a(),n("div",null,e)};export{t as __pageData,p as default};
