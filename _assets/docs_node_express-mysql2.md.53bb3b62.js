import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"express项目使用mysql2","frontmatter":{"date":"2024-06-22","title":"express项目使用mysql2","tags":["node"],"describe":"express项目使用mysql2"},"headers":[{"level":2,"title":"之前使用","slug":"之前使用"},{"level":3,"title":"封装接口调用函数","slug":"封装接口调用函数"},{"level":3,"title":"使用","slug":"使用"},{"level":2,"title":"mysql vs mysql2","slug":"mysql-vs-mysql2"},{"level":2,"title":"express 使用 mysql2 基础配置","slug":"express-使用-mysql2-基础配置"},{"level":3,"title":"1. 安装依赖","slug":"_1-安装依赖"},{"level":3,"title":"配置数据库连接池","slug":"配置数据库连接池"},{"level":3,"title":"3. 使用连接池执行数据库操作","slug":"_3-使用连接池执行数据库操作"},{"level":3,"title":"4. 在 Controller 层调用 Model 层的方法","slug":"_4-在-controller-层调用-model-层的方法"},{"level":3,"title":"5. 通过路由调用 Controller 层","slug":"_5-通过路由调用-controller-层"},{"level":3,"title":"报错集锦","slug":"报错集锦"},{"level":2,"title":"TypeORM","slug":"typeorm"},{"level":3,"title":"使用步骤","slug":"使用步骤"}],"relativePath":"docs/node/express-mysql2.md","lastUpdated":1743591022116.7986}';var p={};const o=[a('<h2 id="之前使用"><a class="header-anchor" href="#之前使用" aria-hidden="true">#</a> 之前使用</h2><h3 id="封装接口调用函数"><a class="header-anchor" href="#封装接口调用函数" aria-hidden="true">#</a> 封装接口调用函数</h3><p>之前使用后端提供的接口进行数据库的增删改查：</p><div class="language-js"><pre><code><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&#39;@lib/request.js&#39;</span>\n\n<span class="token comment">/** 查询 */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">selectDB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">body<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/db/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>body<span class="token punctuation">.</span>database<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/select</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">token</span><span class="token operator">:</span> headers<span class="token punctuation">.</span>token <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 修改 */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">updateDB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">body<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">/** 新增 */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">insertDB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">body<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><h3 id="使用"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-js"><pre><code><span class="token keyword">const</span> _body <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">database</span><span class="token operator">:</span> database<span class="token punctuation">.</span>qmp_data_sso<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n  <span class="token literal-property property">table</span><span class="token operator">:</span> database<span class="token punctuation">.</span>qmp_data_sso<span class="token punctuation">.</span>table<span class="token punctuation">.</span>qmp_user_info<span class="token punctuation">,</span>\n  <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">wheres</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token string">&#39;display_flag&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">opt</span><span class="token operator">:</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">selectDB</span><span class="token punctuation">(</span>_body<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>\n</code></pre></div><h2 id="mysql-vs-mysql2"><a class="header-anchor" href="#mysql-vs-mysql2" aria-hidden="true">#</a> mysql vs mysql2</h2><p><a href="https://github.com/mysqljs/mysql?tab=readme-ov-file#install" target="_blank" rel="noopener noreferrer">mysql 实现 MySQL 协议的纯 Node.js JavaScript 客户端</a></p><p><a href="https://github.com/sidorares/node-mysql2?tab=readme-ov-file#history-and-why-mysql2" target="_blank" rel="noopener noreferrer">mysql2 ⚡ 适用于 Node.js 的快速 mysqljs/mysql 兼容 mysql 驱动程序</a></p><p><a href="https://sidorares.github.io/node-mysql2/zh-CN/docs/history-and-why-mysq2" target="_blank" rel="noopener noreferrer">MySQL2 的历史以及选择原因</a></p><p>mysql2 是 mysql 包的升级版，有更多特性。</p><h2 id="express-使用-mysql2-基础配置"><a class="header-anchor" href="#express-使用-mysql2-基础配置" aria-hidden="true">#</a> express 使用 mysql2 基础配置</h2><h3 id="_1-安装依赖"><a class="header-anchor" href="#_1-安装依赖" aria-hidden="true">#</a> 1. 安装依赖</h3><div class="language-bash"><pre><code><span class="token function">yarn</span> <span class="token function">add</span> mysql2\n</code></pre></div><h3 id="配置数据库连接池"><a class="header-anchor" href="#配置数据库连接池" aria-hidden="true">#</a> 配置数据库连接池</h3><p>可以通过 <code>createConnection</code> 在需要操作数据库的时候，建立连接，用完之后释放连接，但这样会浪费性能，因为数据库的连接建立还是很耗时的，而且一个连接也不够用。</p><p>这时候就需要连接池来管理数据库连接、提高 mysql 的使用性能并减少资源消耗：连接池会重用以前的连接而不是重新创建连接，保持打开而不是关闭。</p><p><img src="/blog/_assets/mysql-pool.d4656588.png" alt="mysql-pool"></p><p>连接池中放着好几个 mysql 的连接对象，用的时候取出来执行 sql，用完之后放回去，不需要断开连接。</p><p>创建一个数据库连接池并导出，以便在整个应用程序中共享使用：</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  <span class="token constant">MYSQL_HOST</span><span class="token punctuation">,</span>\n  <span class="token constant">MYSQL_PORT</span><span class="token punctuation">,</span>\n  <span class="token constant">MYSQL_USER</span><span class="token punctuation">,</span>\n  <span class="token constant">MYSQL_PASSWORD</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../index.js&#39;</span>\n<span class="token keyword">import</span> mysql <span class="token keyword">from</span> <span class="token string">&#39;mysql2/promise&#39;</span>\n\n<span class="token keyword">const</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token constant">MYSQL_HOST</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token constant">MYSQL_PORT</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token constant">MYSQL_USER</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token constant">MYSQL_PASSWORD</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;passport&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">waitForConnections</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//连接超额是否等待</span>\n  <span class="token literal-property property">connectionLimit</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">//一次创建的最大连接数</span>\n  <span class="token literal-property property">queueLimit</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//可以等待的连接的个数</span>\n  <span class="token literal-property property">maxIdle</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 超过10个空闲会释放</span>\n  <span class="token literal-property property">idleTimeout</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span> <span class="token comment">// 空闲的连接需要多久断开</span>\n  <span class="token literal-property property">enableKeepAlive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">keepAliveInitialDelay</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> pool\n</code></pre></div><p>数据库连接相关配置写在 config 中</p><p>连接池配置：</p><ul><li>connectionLimit：指定连接池中允许的最大连接数，比如 10，也就是同时最多使用 10 个，再多就需要排队</li><li>queueLimit：指定当连接池中的连接已满时，请求排队等待的最大数量，设置为 0 时没有上限</li><li>waitForConnections：指定是否等待可用连接。如果设置为 true，则在连接不足时请求将被排队，为 false 时直接报错</li><li>maxIdle：指定最多有多少个空闲的，超过这个数量的空闲连接会被释放</li><li>idleTimeout：空闲的连接需要多久断开</li><li>enableKeepAlive、keepAliveInitialDelay：保持心跳用的，默认值即可</li></ul><h3 id="_3-使用连接池执行数据库操作"><a class="header-anchor" href="#_3-使用连接池执行数据库操作" aria-hidden="true">#</a> 3. 使用连接池执行数据库操作</h3><p>在模型层（model 层），使用连接池的 getConnection 方法获取连接，执行数据库操作需要释放连接，详见<a href="https://sidorares.github.io/node-mysql2/zh-CN/docs/examples/connections/create-pool" target="_blank" rel="noopener noreferrer">官方文档</a></p><div class="language-js"><pre><code><span class="token comment">// 实现一个查询用户数量的接口</span>\n<span class="token keyword">import</span> pool <span class="token keyword">from</span> <span class="token string">&#39;@/config/database.js&#39;</span>\n\n<span class="token keyword">const</span> UserCountModel <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">getAllUserCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> connection\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      connection <span class="token operator">=</span> <span class="token keyword">await</span> pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> filed<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>\n        <span class="token string">&#39;SELECT count(*) FROM user_info&#39;</span>\n      <span class="token punctuation">)</span>\n      <span class="token keyword">return</span> rows\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> error\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">)</span> connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 释放连接回连接池</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>query 返回结果</p><ul><li>rows：数组，包含了查询结果的所有行数据。每一行数据通常是一个对象，具体结构取决于查询语句的结果。如果没有匹配的行，则 rows 是一个空数组 []。</li><li>fields：数组，包含了查询结果的字段信息。每个字段对象通常包含字段的名称、类型等信息。如果查询结果不包含字段（例如 SELECT COUNT(*)），则 fields 是 undefined。</li></ul><p><img src="/blog/_assets/express-mysql2-count.c0bf4eab.png" alt="express-mysql2-count"></p><p>注意事项</p><ul><li><p>错误处理：务必在适当的地方捕获和处理数据库操作可能出现的错误，例如网络中断、SQL 错误等。</p></li><li><p>连接释放：使用 connection.release() 方法来释放连接回连接池，以便其他请求可以继续使用。</p></li></ul><h3 id="_4-在-controller-层调用-model-层的方法"><a class="header-anchor" href="#_4-在-controller-层调用-model-层的方法" aria-hidden="true">#</a> 4. 在 Controller 层调用 Model 层的方法</h3><div class="language-js"><pre><code><span class="token keyword">import</span> UserCountModel <span class="token keyword">from</span> <span class="token string">&#39;@/models/userCountModel.js&#39;</span>\n\n<span class="token comment">// 获取所有用户数量</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getAllUserCount</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> UserCountModel<span class="token punctuation">.</span><span class="token function">getAllUserCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> err<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_5-通过路由调用-controller-层"><a class="header-anchor" href="#_5-通过路由调用-controller-层" aria-hidden="true">#</a> 5. 通过路由调用 Controller 层</h3><div class="language-js"><pre><code><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getAllUserCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/controllers/userCountCountController.js&#39;</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// GET /count 路由</span>\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/count&#39;</span><span class="token punctuation">,</span> getAllUserCount<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> router\n</code></pre></div><h3 id="报错集锦"><a class="header-anchor" href="#报错集锦" aria-hidden="true">#</a> 报错集锦</h3><h4 id="node-modules-mysql2-node-modules-lru-cache-dist-cjs-index-js-781-this-dispose-oldval-k-set"><a class="header-anchor" href="#node-modules-mysql2-node-modules-lru-cache-dist-cjs-index-js-781-this-dispose-oldval-k-set" aria-hidden="true">#</a> node_modules/mysql2/node_modules/lru-cache/dist/cjs/index.js:781 this.#dispose?.(oldVal, k, &#39;set&#39;);</h4><p>太坑了，必须把 mysql2 版本降到 3.0.0，不然报错</p><p><a href="https://github.com/isaacs/node-lru-cache/issues/314" target="_blank" rel="noopener noreferrer">解决方法</a></p><h2 id="typeorm"><a class="header-anchor" href="#typeorm" aria-hidden="true">#</a> TypeORM</h2><p>使用上述方法可以正常的在 node 中操作数据库，但一般不会这样直接执行 sql，而是会使用 ORM 框架。</p><p>ORM 是 Object Relational Mapping（对象关系映射）。就是把 mysql 这种关系型数据库的表映射成面向对象的 Class，表的字段映射成对象的属性映射，表与表的关联映射成属性的关联。</p><p>而 <a href="https://typeorm.bootcss.com/" target="_blank" rel="noopener noreferrer">TypeORM</a> 就是用于 TypeScript 和 JavaScript 流行的 ORM 框架，兼容多种数据库。</p><p>TypeORM 特性</p><ul><li>实体 (Entity)：定义数据库表的类。</li><li>仓库 (Repository)：用于访问实体的存储库。</li><li>迁移 (Migration)：管理数据库迁移。</li><li>查询生成器 (Query Builder)：以编程方式构建 SQL 查询。</li><li>数据映射和关系：支持一对一、一对多、多对多等关系。</li></ul><h3 id="使用步骤"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h3><h4 id="_1-安装依赖-2"><a class="header-anchor" href="#_1-安装依赖-2" aria-hidden="true">#</a> 1. 安装依赖</h4><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> typeorm reflect-metadata\n</code></pre></div><p>需要在应用程序的全局位置导入（例如在 app.ts 中）</p><div class="language-bash"><pre><code><span class="token function">import</span> <span class="token string">&#39;reflect-metadata&#39;</span>\n</code></pre></div><h4 id="_2-typeorm-配置"><a class="header-anchor" href="#_2-typeorm-配置" aria-hidden="true">#</a> 2. TypeORM 配置</h4><p>ormconfig.json 是 TypeORM 的配置文件，用于配置数据库连接、实体、迁移等信息。</p><p>在项目根目录创建一个 ormconfig.json 文件，配置数据库连接：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;host&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;database&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;synchronize&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;logging&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;entities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/entity/**/*.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;migrations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/migration/**/*.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;subscribers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/subscriber/**/*.ts&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>synchronize: 同步建表，也就是当 database 里没有和 Entity 对应的表的时候，会自动生成建表 sql 语句并执行。</li><li>logging: 打印生成的 sql 语句</li><li>entities: 是指定有哪些和数据库的表对应的 Entity</li></ul><p>TypeORM 会自动读取项目根目录中的 ormconfig.json 文件来配置连接和其他设置。在代码中无需显式引用 ormconfig.json，TypeORM 会自动读取和使用该文件的配置。</p><h4 id="_3-创建数据库连接模块"><a class="header-anchor" href="#_3-创建数据库连接模块" aria-hidden="true">#</a> 3. 创建数据库连接模块</h4><p>在 src/config 目录中创建一个 datasource.js 文件，用于管理数据库连接：</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;reflect-metadata&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;typeorm&#39;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">connectDatabase</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库链接建立成功&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;连接数据库失败&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>\n    <span class="token keyword">throw</span> error\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> connectDatabase\n</code></pre></div><h4 id="_4-创建实体-entity"><a class="header-anchor" href="#_4-创建实体-entity" aria-hidden="true">#</a> 4. 创建实体 Entity</h4><p>实体 (Entity) 是 TypeORM 映射到数据库表的类。每个实体类代表数据库中的一张表，类中的每个属性对应表中的一列。</p><p>如我们数据库有一个 user_info 表：</p><p><img src="/blog/_assets/typeorm-user-info.0780e14b.png" alt="typeorm-user-info"></p><p>user_info 表具有以下列：</p><ul><li>id (主键)</li><li>uuid (字符串)</li><li>nickname</li><li>avatar</li><li>desc</li><li>phone</li><li>created_at (日期时间)</li><li>updated_at</li><li>deleted_at</li><li>display_flag</li></ul><p>我们创建一个对应的实体类 <code>src/entity/UserInfo.js</code></p>',67)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
