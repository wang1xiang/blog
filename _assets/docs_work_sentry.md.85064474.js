import{f as n,g as s,J as a}from"./common-03e46d7f.js";const t='{"title":"Sentry系列一——React接入Sentry完整教程","frontmatter":{"date":"2022-09-16","title":"Sentry系列一——React接入Sentry完整教程","tags":["work","tool","sentry"],"describe":"Sentry介绍及React接入Sentry、及Sentry报错类型"},"headers":[{"level":2,"title":"Sentry介绍与使用","slug":"sentry介绍与使用"},{"level":3,"title":"简介","slug":"简介"},{"level":3,"title":"使用","slug":"使用"},{"level":3,"title":"原理","slug":"原理"},{"level":2,"title":"接入SourceMap","slug":"接入sourcemap"},{"level":3,"title":"Sentry-cli","slug":"sentry-cli"},{"level":3,"title":"使用API上传","slug":"使用api上传"},{"level":3,"title":"使用webpack plugins","slug":"使用webpack-plugins"},{"level":2,"title":"对比","slug":"对比"}],"relativePath":"docs/work/sentry.md","lastUpdated":1742891325218.531}';var p={};const o=[a('<h2 id="sentry介绍与使用"><a class="header-anchor" href="#sentry介绍与使用" aria-hidden="true">#</a> Sentry介绍与使用</h2><h3 id="简介"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>Sentry 是跨平台的应用程序监控，专注于错误报告。<a href="https://github.com/getsentry/sentry" target="_blank" rel="noopener noreferrer">GitHub</a>、<a href="https://sentry.io/welcome/" target="_blank" rel="noopener noreferrer">官方网站</a></p><p>Sentry 翻译过来是「哨兵」的意思，可以监控程序代码中出现的报错问题，生成issue，通过查看issue快速定位到问题发生的位置。</p><h3 id="使用"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><ol><li>安装</li></ol><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> --save @sentry/react @sentry/tracing\n</code></pre></div><ol start="2"><li>配置</li></ol><ul><li><p>在入口文件index.tsx中添加配置</p><div class="language-tsx"><pre><code><span class="token comment">/* 报错监控 */</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Sentry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    dsn<span class="token operator">:</span> <span class="token string">&#39;https://aee8343989d243d682d58a5b0cd0b4d7@sentry-monitor.quickcep.com/2&#39;</span><span class="token punctuation">,</span>\n    integrations<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Integrations</span><span class="token punctuation">.</span><span class="token function">BrowserTracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    maxBreadcrumbs<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    environment<span class="token operator">:</span> env<span class="token punctuation">.</span>isProd <span class="token operator">?</span> <span class="token string">&#39;prod&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span>\n    tracesSampleRate<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>dsn：Data Source Name错误报告发送的地址，获取Settings -&gt; Projects -&gt; <a href="https://sentry-monitor.quickcep.com/settings/sentry/projects/quickcep-front/keys/" target="_blank" rel="noopener noreferrer">Client Keys (DSN)</a></li><li>integrations</li><li>maxBreadcrumbs：这个变量控制应该捕获的面包屑总数。默认值为 100。</li><li>environment：环境，在sentry中生成不同的<a href="https://sentry-monitor.quickcep.com/settings/sentry/projects/quickcep-front/environments/" target="_blank" rel="noopener noreferrer">环境</a></li><li>tracesSampleRate：0-1，控制给定事务发送到 Sentry 的概率百分比。0 表示 0%，1 表示 100%</li><li><a href="https://docs.sentry.io/platforms/javascript/guides/electron/configuration/options/" target="_blank" rel="noopener noreferrer">更多配置</a></li></ul></li><li><p>在组件中增加ErrorBoundary组件，会自动将报错信息发送到Sentry，并回退UI</p><div class="language-tsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ErrorBoundary<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@sentry/react&#39;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">DefaultErrorBoundary</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorBoundary</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&lt;h2&gt;请刷新页面重新操作</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ErrorBoundary</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> DefaultErrorBoundary<span class="token punctuation">;</span>\n</code></pre></div><ul><li><p>fallback (React.ReactNode or Function)：当错误边界捕获错误时要呈现的 React 元素</p></li><li><p>beforeCapture：在将错误发送到 Sentry 之前调用的函数，允许将额外的标签或上下文添加到错误中</p><div class="language-jsx"><pre><code>beforeCapture<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">scope</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  scope<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">&#39;storeId&#39;</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;quick-storeId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  scope<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">&#39;userId&#39;</span><span class="token punctuation">,</span> user<span class="token operator">?.</span>staffInfo<span class="token operator">?.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  scope<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">&#39;currentTime&#39;</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  scope<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">&#39;pathname&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre></div></li><li><p><a href="https://docs.sentry.io/platforms/javascript/guides/react/components/errorboundary/#options" target="_blank" rel="noopener noreferrer">更多配置</a></p></li></ul></li></ul><h3 id="原理"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>Javascript代码发生错误后，Javascript引擎会抛出一个Error对象，并触发window.onerror事件，Sentry正是对window.onerror进行重写，实现错误监控的逻辑，并添加了很多信息帮助错误定位，并对错误进行滚跨浏览器的兼容等</p><ul><li><p>window.onerror</p><p>捕获基本的js错误，但不能获取到资源加载失败的情况，必须使用window.addEventListener(&#39;error&#39;)才行</p></li><li><p>Promise</p><p>Promise 如果reject没被catch的话，不能被window.onerror捕获，需要使用unhandledrejection捕获</p><div class="language-js"><pre><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;unhandledrejection&quot;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">UNHANDLED PROMISE REJECTION: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>Vue的Vue.config.errorHandler</p><p>Sentry对Vue.config.errorHandler进行重写</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">vuePlugin</span><span class="token punctuation">(</span><span class="token parameter">Raven<span class="token punctuation">,</span> Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> _oldOnError <span class="token operator">=</span> Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>errorHandler<span class="token punctuation">;</span>\n  Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">VueErrorHandler</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 上报</span>\n    Raven<span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">extra</span><span class="token operator">:</span> metaData\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> _oldOnError <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 为什么这么做？</span>\n      <span class="token function">_oldOnError</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> vuePlugin<span class="token punctuation">;</span>\n</code></pre></div></li><li><p>React的ErrorBoundary</p><div class="language-ts"><pre><code><span class="token comment">/**\n* A ErrorBoundary component that logs errors to Sentry.\n* Requires React &gt;= 16\n*/</span>\n<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">ErrorBoundary</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>ErrorBoundaryProps<span class="token punctuation">,</span> ErrorBoundaryState<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    state<span class="token operator">:</span> ErrorBoundaryState<span class="token punctuation">;</span>\n    <span class="token function">componentDidCatch</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">,</span> <span class="token punctuation">{</span> componentStack <span class="token punctuation">}</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ErrorInfo<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n    <span class="token function-variable function">resetErrorBoundary</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 真实上报的地方</span>\nErrorBoundary<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">componentDidCatch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> _a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> componentStack <span class="token operator">=</span> _a<span class="token punctuation">.</span>componentStack<span class="token punctuation">;</span>\n  <span class="token comment">// 获取到配置的props</span>\n  <span class="token keyword">var</span> _b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> beforeCapture <span class="token operator">=</span> _b<span class="token punctuation">.</span>beforeCapture<span class="token punctuation">,</span> onError <span class="token operator">=</span> _b<span class="token punctuation">.</span>onError<span class="token punctuation">,</span> showDialog <span class="token operator">=</span> _b<span class="token punctuation">.</span>showDialog<span class="token punctuation">,</span> dialogOptions <span class="token operator">=</span> _b<span class="token punctuation">.</span>dialogOptions<span class="token punctuation">;</span>\n  <span class="token function">withScope</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 上报之前做一些处理，相当于axios的请求拦截器</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeCapture<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">beforeCapture</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> error<span class="token punctuation">,</span> componentStack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 上报</span>\n    <span class="token keyword">var</span> eventId <span class="token operator">=</span> <span class="token function">captureException</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token punctuation">{</span> contexts<span class="token operator">:</span> <span class="token punctuation">{</span> react<span class="token operator">:</span> <span class="token punctuation">{</span> componentStack<span class="token operator">:</span> componentStack <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 开发者的回调</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>onError<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">onError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> componentStack<span class="token punctuation">,</span> eventId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 是否显示sentry的错误反馈组件（也是一种收集错误的方式）</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>showDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">showReportDialog</span><span class="token punctuation">(</span><span class="token function">__assign</span><span class="token punctuation">(</span><span class="token function">__assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> dialogOptions<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> eventId<span class="token operator">:</span> eventId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// componentDidCatch is used over getDerivedStateFromError</span>\n    <span class="token comment">// so that componentStack is accessible through state.</span>\n    _this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token operator">:</span> error<span class="token punctuation">,</span> componentStack<span class="token operator">:</span> componentStack<span class="token punctuation">,</span> eventId<span class="token operator">:</span> eventId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>请求</p><p>Sentry不能捕获异步操作、接口请求中的错误，比如404、500等，此时需要通过Sentry.caputureException()主动上报</p><ul><li>XHR通过拦截send和open</li><li>fetch通过拦截整个方法</li><li>axios通过请求/响应拦截器</li></ul></li></ul><h2 id="接入sourcemap"><a class="header-anchor" href="#接入sourcemap" aria-hidden="true">#</a> <a href="https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/" target="_blank" rel="noopener noreferrer">接入SourceMap</a></h2><p>使用Sentry的webpack插件配置sourceMap，在构建的时候自动上传到Sentry，如果不上传SourceMap有些问题不好定位<br> Sentry一共提供了三种上传source map的方式</p><h3 id="sentry-cli"><a class="header-anchor" href="#sentry-cli" aria-hidden="true">#</a> Sentry-cli</h3><p><a href="https://docs.sentry.io/platforms/javascript/sourcemaps/#webpack" target="_blank" rel="noopener noreferrer">文档</a></p><h3 id="使用api上传"><a class="header-anchor" href="#使用api上传" aria-hidden="true">#</a> 使用API上传</h3><p><a href="https://docs.sentry.io/api/" target="_blank" rel="noopener noreferrer">文档</a></p><h3 id="使用webpack-plugins"><a class="header-anchor" href="#使用webpack-plugins" aria-hidden="true">#</a> 使用webpack plugins</h3><ol><li>安装@sentry/webpack-plugin</li></ol><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @sentry/webpack-plugin\n</code></pre></div><ol start="2"><li>项目根目录添加.sentryclirc文件</li></ol><div class="language-bash"><pre><code><span class="token punctuation">[</span>auth<span class="token punctuation">]</span>\ntoken <span class="token operator">=</span> ef5b031a00964f3c8f8ccbca07bb03c1d950be4b33f24ff\n\n<span class="token punctuation">[</span>defaults<span class="token punctuation">]</span>\nurl <span class="token operator">=</span> https://sentry-monitor.xxx.com/\norg <span class="token operator">=</span> xxx\nproject <span class="token operator">=</span> xxx\n</code></pre></div><ul><li>token：sentry的Auth Token，settings -&gt; account -&gt; api -&gt; auth-tokens</li><li>url：sentry地址</li><li>org：组织settings -&gt; settings/organization-slug</li><li>project：项目名称</li><li></li></ul><ol start="3"><li>配置webpack</li></ol><div class="language-js"><pre><code><span class="token keyword">const</span> SentryWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@sentry/webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// other webpack configuration</span>\n  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 将 Webpack 插件设置为最后运行的插件  否则插件收到的 source maps 可能不是最终的</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">SentryWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">release</span><span class="token operator">:</span><span class="token string">&quot;v1.0.1&quot;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> \n      <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;webpack.config.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">configFile</span><span class="token operator">:</span> <span class="token string">&quot;sentry.properties&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>release：每次上传sourcemap是一次release的过程，如果init时没有配置release属性，sentry会自动生成一个随机数作为release版本；配置的话需要init和webpack配置中的一致</li><li>include：指定路径让sentry-cli来检测有没有.map与.js文件，如果有就会上传到sentry</li><li>ignore: 忽略文件夹或文件不要被检测</li><li>configFile: 用来替代第二步的.sentryclirc文件 需要有对应的文件 默认不配置即可</li></ul><p>在sentry上就会有对应项目的 Source Map 文件；（在settings -&gt; projects -&gt; xxx -&gt; Source Maps） <img src="/blog/_assets/sentry.07180f61.jpg" alt="sentry.jpg"></p><ol start="4"><li>测试</li></ol><p><img src="/blog/_assets/sentryerror.d89ffc18.jpg" alt="sentryerror.jpg"></p><ul><li>@sentry/webpack-plugin原理 <a href="https://github.com/getsentry/sentry-webpack-plugin" target="_blank" rel="noopener noreferrer">源码</a></li></ul><p>在webpack的afterEmit钩子（在生成文件到output目录之后执行）中获取打包后的文件，过滤出文件类型为<code>/\\.js$|\\.map$/</code>结尾的文件上传到对应的sentry服务器</p><div class="language-js"><pre><code><span class="token comment">// upload sourcemaps</span>\n<span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// afterEmit在生成文件到output目录之后执行</span>\n  compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterEmit<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFiles</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">uploadFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;\\n\\u001b[32mUpload successfully.\\u001b[39m\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// todo</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n <span class="token comment">// 获取需要上传的文件</span>\n <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 通过 compilation.assets 获取我们需要的文件信息，格式信息</span>\n      <span class="token comment">// compilation.assets {</span>\n      <span class="token comment">// &#39;bundle.js&#39;: SizeOnlySource { _size: 212 },</span>\n      <span class="token comment">// &#39;bundle.js.map&#39;: SizeOnlySource { _size: 162 }</span>\n      <span class="token comment">// }</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>assets<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isIncludeOrExclude</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> <span class="token literal-property property">filePath</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAssetPath</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n <span class="token comment">// 获取文件的绝对路径</span>\n <span class="token function">getAssetPath</span><span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>outputPath<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n <span class="token comment">// 获取文件的绝对路径</span>\n <span class="token function">getAssetPath</span><span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>outputPath<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n <span class="token comment">// 上传文件</span>\n <span class="token keyword">async</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> filePath<span class="token punctuation">,</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">try</span> <span class="token punctuation">{</span>\n     <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n       <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sentryReleaseUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>release<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/files/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 上传的sentry路径</span>\n       <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n       <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n         <span class="token literal-property property">bearer</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apiKey<span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">,</span>\n       <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n       <span class="token literal-property property">formData</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n         <span class="token literal-property property">file</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span>\n         <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filenameTransform</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">,</span>\n     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">uploadFile failed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n\n</code></pre></div><p>webpack钩子</p><ul><li>done: 编译完成后</li><li>beforeRun: 在编译器执行前</li><li>run: 在编译器开始读取记录前执行</li><li>emit: 在生成文件到output目录之前执行</li><li>afterEmit: 在生成文件到output目录之后执行</li><li>compilation: 创建compilation后</li><li>beforeCompile: 在编译前</li><li>compile: 创建compilation前</li><li>make:编译完成前</li></ul><h2 id="对比"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h2><p>与其他的npm下载量<a href="https://npmtrends.com/@sentry/browser-vs-airbrake-js-vs-bugsnag-vs-bugsnag-js-vs-raygun4js-vs-rollbar-vs-rollbar-browser-vs-trackjs" target="_blank" rel="noopener noreferrer">对比</a></p><ul><li>100%开源</li><li>私有化部署</li><li>支持大多数编程语言</li></ul>',38)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
