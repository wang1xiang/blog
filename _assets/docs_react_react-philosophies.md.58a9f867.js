import{f as n,g as a,J as s}from"./common-03e46d7f.js";const t='{"title":"react-philosophies","frontmatter":{"date":"2022-06-10","title":"react-philosophies","tags":["react"],"describe":"react-philosophies即react哲学，按照英文文档翻译"},"headers":[{"level":2,"title":"react-philosophies react哲学","slug":"react-philosophies-react哲学"},{"level":3,"title":"1.The Bare Minimum 最低要求","slug":"_1-the-bare-minimum-最低要求"},{"level":3,"title":"Performance Tips 性能优化","slug":"performance-tips-性能优化"},{"level":3,"title":"Testing principles测试原则","slug":"testing-principles测试原则"},{"level":3,"title":"Insights shared by others 与他人分享见解","slug":"insights-shared-by-others-与他人分享见解"}],"relativePath":"docs/react/react-philosophies.md","lastUpdated":1743046188787.0457}';var e={};const o=[s('<blockquote><p>Chinese translation of the <a href="https://github.com/mithi/react-philosophies" target="_blank" rel="noopener noreferrer">react-philosophies</a></p></blockquote><h2 id="react-philosophies-react哲学"><a class="header-anchor" href="#react-philosophies-react哲学" aria-hidden="true">#</a> react-philosophies react哲学</h2><h3 id="_1-the-bare-minimum-最低要求"><a class="header-anchor" href="#_1-the-bare-minimum-最低要求" aria-hidden="true">#</a> 1.The Bare Minimum 最低要求</h3><h4 id="_1-1-recognize-when-the-computer-is-smarter-than-you-计算机比你更聪明"><a class="header-anchor" href="#_1-1-recognize-when-the-computer-is-smarter-than-you-计算机比你更聪明" aria-hidden="true">#</a> 1.1 Recognize when the computer is smarter than you 计算机比你更聪明</h4><ol><li>使用Eslint静态分析代码，启用<a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener noreferrer">钩子规则</a>捕获特定react错误</li><li>开启严格模式</li><li>诚实对待你的依赖。修改useMemo、useCallback和useEffect的警告/错误。</li><li>使用map时，必须加key</li><li>只在顶级使用钩子，不要在循环、条件或嵌套函数中调用Hook</li><li>理解警告“无法对未安装的组件执行状态更新”, <a href="https://github.com/facebook/react/pull/22114" target="_blank" rel="noopener noreferrer">react/pull</a></li><li>在应用程序不同级别添加多个错误边界来防止“白屏死机”，使用Sentry监控</li><li>不要忽略了控制台中打印的错误和警告。</li><li>记得要 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fguides%2Ftree-shaking%2F" target="_blank" rel="noopener noreferrer"><code>tree-shaking</code></a>!</li><li>使用prettier格式化代码</li></ol><h5 id="_1-2-code-is-just-a-necessary-evil-代码只是一种必要的邪恶"><a class="header-anchor" href="#_1-2-code-is-just-a-necessary-evil-代码只是一种必要的邪恶" aria-hidden="true">#</a> 1.2 Code is just a necessary evil 代码只是一种必要的邪恶</h5><ol><li>在添加另一个依赖项之前先考虑一下 <ul><li>真的需要Redux吗？这是可能的。但请记住，React已经是一个状态管理库</li><li><a href="https://lodash.com/" target="_blank" rel="noopener noreferrer"><code>Lodash</code></a>/<a href="https://underscorejs.org/" target="_blank" rel="noopener noreferrer"><code>underscoreJS</code></a>? <a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore" target="_blank" rel="noopener noreferrer">you-dont-need/You-Dont-Need-Lodash-Underscore</a></li><li><a href="https://momentjs.com/" target="_blank" rel="noopener noreferrer"><code>MomentJS</code></a>? <a href="https://github.com/you-dont-need/You-Dont-Need-Momentjs" target="_blank" rel="noopener noreferrer">you-dont-need/You-Dont-Need-Momentjs</a></li><li>你甚至可能不需要 Javascript。 CSS 很强大。<a href="https://github.com/you-dont-need/You-Dont-Need-JavaScript" target="_blank" rel="noopener noreferrer">you-dont-need/You-Dont-Need-JavaScript</a></li></ul></li></ol><h5 id="_1-3-leave-it-better-than-you-fount-it-让它比你发现发更好"><a class="header-anchor" href="#_1-3-leave-it-better-than-you-fount-it-让它比你发现发更好" aria-hidden="true">#</a> 1.3 Leave it better than you fount it 让它比你发现发更好</h5><ol><li>检测代码异味并在需要时对其进行处理（代码异味并不一定意味需要更改代码，只是有更好的方法可以实现相同的功能） <ul><li>使用大量参数定义的方法或函数</li><li>难以理解的Boolean逻辑</li><li>单个文件中的代码行过多</li><li>语法相同的重复代码（但格式可能不同）</li><li>可能难以理解的功能或方法</li><li>用大量函数或方法定义的类/组件</li><li>单个函数或方法中的代码行数过多</li><li>具有大量返回语句的函数或方法</li></ul></li><li>无情的重构。简单胜于复杂 <ul><li><p>如果可以的话，简化复杂的条件并尽早退出</p></li><li></li></ul></li></ol><h5 id="_1-4-you-can-do-better-你可以做得更好"><a class="header-anchor" href="#_1-4-you-can-do-better-你可以做得更好" aria-hidden="true">#</a> 1.4 You can do better 你可以做得更好</h5><ol><li><p>请记住，你可能不需要将状态作为依赖项，因为您可以传递回调函数</p><div class="language-js"><pre><code>❌ Not<span class="token operator">-</span>so<span class="token operator">-</span>good\n<span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>setCount<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n✅ <span class="token constant">BETTER</span>\n<span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">count</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>用钩子包装你的自定义上下文会创建一个更好看的API</p><div class="language-js"><pre><code><span class="token comment">// you need to import two things every time </span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SomethingContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;some-context-package&quot;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> something <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>SomethingContext<span class="token punctuation">)</span> <span class="token comment">// looks okay, but could look better</span>\n  <span class="token comment">// blah</span>\n<span class="token punctuation">}</span>\n\n  \n<span class="token comment">// on one file you declare this hook</span>\n<span class="token keyword">function</span> <span class="token function">useSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>SomethingContext<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;useSomething must be used within a SomethingProvider&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> context\n<span class="token punctuation">}</span>\n  \n<span class="token comment">// you only need to import one thing each time</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useSomething <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;some-context-package&quot;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> something <span class="token operator">=</span> <span class="token function">useSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// looks better</span>\n  <span class="token comment">// blah</span>\n<span class="token punctuation">}</span>  \n</code></pre></div></li><li><p>在编码之前考虑如何使用您的组件，写README文档，写清楚组件API</p></li></ol><h4 id="_2-design-for-happiness-面向幸福设计"><a class="header-anchor" href="#_2-design-for-happiness-面向幸福设计" aria-hidden="true">#</a> 2. Design for happiness 面向幸福设计</h4><p>​ 我们不断阅读旧代码作为编写新代码的一部分，所以如果你想快点，如果你想快速完成，如果你想让你的代码已于编写，请让它先易于阅读。</p><ol><li><p>通过删除冗余状态来避免状态管理复杂性</p></li><li><p>传递香蕉，而不是拿着香蕉的大猩猩和整个丛林（组件需要什么传递什么，而不是传递大对象）</p><p>为了避免落入这个陷阱，最好将主要的原始类型（boolean、string、number等）作为道具传递（如果想使用React.memo进行优化，传递原语是一个好主意）</p><p>当这样做时，组件解耦，两个组件间的依赖程度会更低</p><div class="language-tsx"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">Summary</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> member <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span> member<span class="token operator">:</span> Member <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">SeeMore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> member <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> member<span class="token operator">:</span> Member <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> MemberCard <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token function">useMember</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&lt;Summary member=</span><span class="token punctuation">{</span>member<span class="token punctuation">}</span><span class="token plain-text"> /&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SeeMore</span></span> <span class="token attr-name">member</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>member<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// better</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Summary</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> imgUrl<span class="token punctuation">,</span> webUrl<span class="token punctuation">,</span> header <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> imgUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> webUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> header<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">SeeMore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> componentToShow <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> componentToShow<span class="token operator">:</span> ReactNode <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">const</span> <span class="token function-variable function">MemberCard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> webUrl<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> age<span class="token punctuation">,</span> bio <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMember</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Summary</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span> imgUrl<span class="token punctuation">,</span> webUrl<span class="token punctuation">,</span> header <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SeeMore</span></span> <span class="token attr-name">componentToShow</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">AGE: </span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token plain-text"> | BIO: </span><span class="token punctuation">{</span>bio<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>保持组件小而简单——单一责任原则</p><p>具备各种职责的组件难以重用，可能与其他代码纠缠在一起</p></li><li><p>重复比错误的抽象要便宜得多（避免过早/不恰当的泛化）</p></li><li><p>必满Prop层层传递（prop钻取，prop drilling）</p></li><li><p>将巨大的useEffect拆分为更小的独立的</p></li><li><p>将逻辑提取到钩子和辅助函数中</p></li><li><p>useCallback、useMemo 和 useEffect 依赖数组中的依赖项组好是基本类型</p></li><li><p>不要再useCallback、useMemo和useEffect中放置过多的依赖项</p></li><li><p>为简单起见，如果你的状态的某些值依赖于你的状态和先前状态的其他值，请考虑使用useReducer，而不是使用多个useState ?? useMemo为什么不适用呢</p></li><li><p>Context放在组件树中尽可能低的位置，尽可能靠近它们相关/正在使用的位置</p></li></ol><h3 id="performance-tips-性能优化"><a class="header-anchor" href="#performance-tips-性能优化" aria-hidden="true">#</a> Performance Tips 性能优化</h3><ol><li>使用useMemo用于昂贵的计算</li><li>如果打算使用memo、useMemo或useCallback来减少重新渲染，不应该有过多的依赖关系，并且依赖关系应该主要是原始类型</li><li>确保memo、useMemo或useCallback正在做你认为它正在做的事情（它真的阻止重新渲染了吗？）您能否凭经验证明在您的案例中使用它们可以显着提高性能？</li><li><a href="https://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render" target="_blank" rel="noopener noreferrer">在修复重新渲染之前修复慢速渲染</a></li><li>状态托管：使你的状态尽可能的靠近使用它的位置不仅会使代码更易于阅读，而且会使应用程序更快</li><li>Context应该在逻辑上分开，不要再一个Context Provider中添加多个值，如果Context中的任何值发生更改，则使用该Context的所有组件都会重新渲染，即使这些组件未使用实际更改的值</li><li>你可以通过拆分state和disppatch来优化Context</li><li>了解术语 lazy loading和bundle/code splitting</li><li>长列表使用react-virtual类似</li><li>使用source-map-explorer工具可视化生成的代码包，包体积越小，app越快</li></ol><p><strong>查看有关性能的选定 KCD 文章</strong></p><ul><li><a href="https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster" target="_blank" rel="noopener noreferrer">KCD: State Colocation will make your React app faster</a></li><li><a href="https://kentcdodds.com/blog/usememo-and-usecallback" target="_blank" rel="noopener noreferrer">KCD: When to <code>useMemo</code> and <code>useCallback</code></a></li><li><a href="https://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render" target="_blank" rel="noopener noreferrer">KCD: Fix the slow render before you fix the re-render</a></li><li><a href="https://kentcdodds.com/blog/profile-a-react-app-for-performance" target="_blank" rel="noopener noreferrer">KCD: Profile a React App for Performance</a></li><li><a href="https://kentcdodds.com/blog/how-to-optimize-your-context-value" target="_blank" rel="noopener noreferrer">KCD: How to optimize your context value</a></li><li><a href="https://kentcdodds.com/blog/how-to-use-react-context-effectively" target="_blank" rel="noopener noreferrer">KCD: How to use React Context effectively</a></li><li><a href="https://epicreact.dev/one-react-mistake-thats-slowing-you-down" target="_blank" rel="noopener noreferrer">KCD: One React Mistake that is slowing you down</a></li><li><a href="https://kentcdodds.com/blog/optimize-react-re-renders" target="_blank" rel="noopener noreferrer">KCD: One simple trick to optimize React re-renders</a></li></ul><h3 id="testing-principles测试原则"><a class="header-anchor" href="#testing-principles测试原则" aria-hidden="true">#</a> Testing principles测试原则</h3><ol><li>测试应该始终与软件的使用方式相似</li><li>确保不是在测试一些边界细节（用户不会使用，看不到甚至感知不到的内容）</li><li>如果果你的测试不能让你对自己的代码产生信任，那测试就是无意义的</li><li>如果你正在重构某个代码，且最后实现的功能都是完全一致的，其实几乎不需要修改测试，而且可以通过测试结果来判定你正确的重构了</li><li>测试应该让开发更有效率，而不是减慢开发速度</li><li>使用 <a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">Jest</a>, <a href="https://testing-library.com/docs/react-testing-library/intro/" target="_blank" rel="noopener noreferrer">React testing library</a>, <a href="https://www.cypress.io/" target="_blank" rel="noopener noreferrer">Cypress</a>, and <a href="https://github.com/mswjs/msw" target="_blank" rel="noopener noreferrer">Mock service worker</a></li></ol><h3 id="insights-shared-by-others-与他人分享见解"><a class="header-anchor" href="#insights-shared-by-others-与他人分享见解" aria-hidden="true">#</a> Insights shared by others 与他人分享见解</h3>',21)];e.render=function(s,t,e,p,c,l){return n(),a("div",null,o)};export{t as __pageData,e as default};
