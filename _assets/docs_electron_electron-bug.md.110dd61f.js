import{f as n,g as a,J as s}from"./common-03e46d7f.js";const e='{"title":"Electron bug记录","frontmatter":{"date":"2024-01-05","title":"Electron bug记录","tags":["electron"],"describe":"electron-bug"},"headers":[{"level":2,"title":"原因","slug":"原因"},{"level":2,"title":"修正","slug":"修正"},{"level":2,"title":"现象","slug":"现象"},{"level":2,"title":"原因","slug":"原因-2"},{"level":2,"title":"修正","slug":"修正-2"},{"level":2,"title":"改进","slug":"改进"}],"relativePath":"docs/electron/electron-bug.md","lastUpdated":1742973716702.3682}';var t={};const p=[s('<h1 id="快速双击打开两个主窗口导致登录状态互踢"><a class="header-anchor" href="#快速双击打开两个主窗口导致登录状态互踢" aria-hidden="true">#</a> 快速双击打开两个主窗口导致登录状态互踢</h1><p>MAC Dock 上的 APP 单击即可打开应用，当双击时主进程会被启动 2 次，One 不允许运行多份实例，第 2 次启动会自动退出，并激活第一个实例。 双击太快，导致第 2 个实例关闭自己并激活第一个实例时，第一个实例的应用状态已经 Ready，但主窗口尚未绘制，导致主窗口被再次绘制 正常主窗口绘制时机：环境变量读取完成、应用聚焦且 AppReady 且一个窗口都没有（hack）</p><p><strong>修复：在应用聚焦并尝试绘制窗口前，检查环境变量是否读取完成</strong></p><div class="language-js"><pre><code>  app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;activate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token operator">-</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>app<span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n<span class="token operator">+</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnvReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>BrowserWindow<span class="token punctuation">.</span><span class="token function">getAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      mainWindow<span class="token operator">?.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>amp<span class="token punctuation">;</span> mainWindow<span class="token operator">?.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h1 id="webview-内-beforeunload-事件无法被触发，导致文档类产品（非协作）丢字"><a class="header-anchor" href="#webview-内-beforeunload-事件无法被触发，导致文档类产品（非协作）丢字" aria-hidden="true">#</a> webview 内 beforeunload 事件无法被触发，导致文档类产品（非协作）丢字</h1><h2 id="原因"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h2><ol><li>webview bug：关闭窗口时不触发 webview 内的 beforeunload</li><li>webview 内快捷键 cmd+w 触发了主进程的关闭窗口事件，它应该只触发关闭 TAB 事件</li><li>webview 是使用 vue v-for 循环渲染出来的，关闭时 vue 直接卸载了标签，导致 beforeunload 没有机会触发</li></ol><h2 id="修正"><a class="header-anchor" href="#修正" aria-hidden="true">#</a> 修正</h2><ol><li>拦截窗口关闭，如果页面上 webview 数量 &gt; 0 关闭标签，否则关闭窗口</li><li>主进程拦截 webview 内快捷键，转发到外层页面</li><li>webview 关闭前先跳转到空白页，跳转成功后再卸载标签，此时如果页面上没有了 webview 关闭窗口 beforeunload 会组织 app.quit()，需要在 window-all-closed 之后关闭应用，应用常驻不再依赖此事件</li></ol><h1 id="多窗口内存泄漏-飙增问题"><a class="header-anchor" href="#多窗口内存泄漏-飙增问题" aria-hidden="true">#</a> 多窗口内存泄漏/飙增问题</h1><p>原因 1：webview partition 要么给值，要么不要有此属性，给&#39;&#39;、null、undefined 都会造成内存飙增 原因 2：快速频繁创建窗口，会造成内存泄漏，应对 IPC 做节流</p><h1 id="sentry-错误-typeerror-onreadytoshow-1-main"><a class="header-anchor" href="#sentry-错误-typeerror-onreadytoshow-1-main" aria-hidden="true">#</a> sentry 错误: TypeError onReadyToShow$1(main)</h1><p>原因： BrowserWindow 实例方法 setPosition、setSize 传值必须是整数，小数就会造成主进程错误，操作窗口失败</p><div class="language-js"><pre><code>win<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n</code></pre></div><p>现象：部分 mac 机型 窗口点击 失效 报错，这个 bug 底层还是性能的问题，如果选用不取整的线上代码，有报错的电脑 把分辨率调低一些，调成正常的就没问题了，性能高的电脑会出现这一问题。</p><h1 id="electron-桌面端闪退"><a class="header-anchor" href="#electron-桌面端闪退" aria-hidden="true">#</a> Electron 桌面端闪退</h1><h2 id="现象"><a class="header-anchor" href="#现象" aria-hidden="true">#</a> 现象</h2><p>One 桌面端多标签窗口偶现无法刷新，关闭标签应用闪退</p><h2 id="原因-2"><a class="header-anchor" href="#原因-2" aria-hidden="true">#</a> 原因</h2><p>根据 sentry 查到 2 条相关异常</p><p><a href="https://sentry.qmpoa.com/organizations/sentry/issues/32181/?project=57&amp;query=is%3Aunresolved&amp;referrer=issue-stream&amp;statsPeriod=1h" target="_blank" rel="noopener noreferrer">https://sentry.qmpoa.com/organizations/sentry/issues/32181/?project=57&amp;query=is%3Aunresolved&amp;referrer=issue-stream&amp;statsPeriod=1h</a></p><p><img src="/blog/_assets/electron-sentry-bug.ee136f8a.png" alt="electron-sentry-bug"></p><p><a href="https://sentry.qmpoa.com/organizations/sentry/issues/19294/events/e504f067bad64b328369743c2588cbd9/?project=57&amp;query=is%3Aunresolved&amp;referrer=previous-event&amp;statsPeriod=1h" target="_blank" rel="noopener noreferrer">https://sentry.qmpoa.com/organizations/sentry/issues/19294/events/e504f067bad64b328369743c2588cbd9/?project=57&amp;query=is%3Aunresolved&amp;referrer=previous-event&amp;statsPeriod=1h</a></p><p><img src="/blog/_assets/electron-sentry-bug1.bfe016de.png" alt="electron-sentry-bug1"></p><p>初步判断是内存问题，出现问题时内存没有增长，另一个常见因内存闪退的原因是空指针</p><p>出问题的页面有 beforeunload 拦截，初步怀疑是 electron 销毁了 webview 的实例或句柄，但因为 beforeunload 导致 webview 并没有被销毁，导致后续事件访问不到它的实例</p><p>github 查找到相关问题：<a href="https://github.com/electron/electron/issues/38941%E3%80%81https://github.com/ElectronNET/electron.net-api-demos/issues/34" target="_blank" rel="noopener noreferrer">https://github.com/electron/electron/issues/38941、https://github.com/ElectronNET/electron.net-api-demos/issues/34</a></p><p>electron 在处理 webview 的 will-prevent-unload 事件和 webviewContents.close 有问题，目前官方还未解决</p><h2 id="修正-2"><a class="header-anchor" href="#修正-2" aria-hidden="true">#</a> 修正</h2><p>绕开与 webview 相关的两个事件</p><p>关闭 webview 不再使用 webviewContents.close ，改为使用</p><div class="language-js"><pre><code>ele<span class="token punctuation">.</span><span class="token function">executeJavaScript</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(function(w) { w.close() })(window);</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre></div><p>监听 will-prevent-unload 事件但并不使用官方回调，通过 IPC 通知渲染进程，由渲染进程移除 webview 标签来模仿 webview 自关闭</p><h2 id="改进"><a class="header-anchor" href="#改进" aria-hidden="true">#</a> 改进</h2><p>重点功能请求产品协助验收</p>',35)];t.render=function(s,e,t,o,r,c){return n(),a("div",null,p)};export{e as __pageData,t as default};
